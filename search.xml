<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Shrio学习笔记</title>
    <url>/2020/01/25/Shrio%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Shrio-集成Spring"><a href="#Shrio-集成Spring" class="headerlink" title="Shrio 集成Spring"></a>Shrio 集成Spring</h1><p>一 导入相关jar包</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">aopalliance</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">aspectjweaver</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">commons-beanutils-1</span><span class="selector-class">.9</span><span class="selector-class">.3</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">commons-logging-1</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">ehcache-2</span><span class="selector-class">.10</span><span class="selector-class">.6</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">log4j-1</span><span class="selector-class">.2</span><span class="selector-class">.17</span> (1)<span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">shiro-all-1</span><span class="selector-class">.4</span><span class="selector-class">.1</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">slf4j-api-1</span><span class="selector-class">.7</span><span class="selector-class">.25</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">slf4j-log4j12-1</span><span class="selector-class">.7</span><span class="selector-class">.25</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aop-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aspects-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-beans-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-support-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-core-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-expression-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-tx-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-web-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-webmvc-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure>
<p>二 编写Web.xml、Spring 、SpringMvc配置文件</p>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Shrio-Spring<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 编写shrio的过滤器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		1.配置securityManager </span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    	2.配置 cacheManager </span></span><br><span class="line"><span class="comment">    	需要导入 ehcache的jar包 以及配置文件</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		3.配置Realm </span></span><br><span class="line"><span class="comment">			直接使用实现了Realm接口的bean</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.ShrioRealm"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- =========================================================</span></span><br><span class="line"><span class="comment">         Shiro Spring-specific integration</span></span><br><span class="line"><span class="comment">         ========================================================= --&gt;</span></span><br><span class="line">   </span><br><span class="line">   	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   		4.配置lifecycleBeanPostProcessor ，可以自动的调用配置在Spring ioc容器中的shrio bean 的生命周期方法</span></span><br><span class="line"><span class="comment">   	 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Enable Shiro Annotations for Spring-configured beans.  Only run after</span></span><br><span class="line"><span class="comment">         the lifecycleBeanProcessor has run: --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     	5. 启用ioc容器中使用shrio的注解，但必须在配置了lifecycleBeanPostProcessor之后才能使用</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -</span></span><br><span class="line"><span class="comment">         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us</span></span><br><span class="line"><span class="comment">         to wire things with more control as well utilize nice Spring things such as</span></span><br><span class="line"><span class="comment">         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: --&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    	6.配置shrioFilter</span></span><br><span class="line"><span class="comment">    	- id 必须和 web.xml 中配置的DelegatingFilterProxy的&lt;filter-name&gt;一致</span></span><br><span class="line"><span class="comment">    	- </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        	配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">        	1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        	2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">        	3) logout 登出</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login.do = anon</span><br><span class="line">                /logout = logout</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span> --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基本效果：login.jsp页面可以匿名访问，在登陆之前访问其他页面会被重定向到login页面</p>
<h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><h2 id="认证的实现"><a href="#认证的实现" class="headerlink" title="认证的实现"></a>认证的实现</h2><h3 id="实现认证的思路"><a href="#实现认证的思路" class="headerlink" title="实现认证的思路"></a>实现认证的思路</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>·获取当前的subiect.调用Securityutils.getsubiect ();</span><br><span class="line"><span class="number">2</span>·测试当前的用户是否已经被认证,刚是否已经登录,调用Subiect的isAuthenticated ()</span><br><span class="line"><span class="number">3</span>,若没有被认证,则把用户名和密码封装为UsernamePasswordToken对象</span><br><span class="line">    <span class="number">1</span>).创建一个表单页面</span><br><span class="line">    <span class="number">2</span>).把请求提交到springMvC的Handler</span><br><span class="line">    <span class="number">3</span>).获取用户名和密码.</span><br><span class="line"><span class="number">4</span>·执行登录:调用Subject的login (AuthenticationToken)方法<span class="number">.5</span>·自定义Realm的方法,从数据库中获取对应的记录,返回给shiro.</span><br><span class="line">    <span class="number">1</span>),实际上需要继承orq. apache.shiro.realm.AuthenticatingRealm类</span><br><span class="line">    <span class="number">2</span>).实现doGetAuthenticationInfo (AuthenticationToken)方法.</span><br><span class="line"><span class="number">6</span>·由shiro完成对密码的比对.</span><br></pre></td></tr></table></figure>
<h3 id="身份认证相关的拦截器"><a href="#身份认证相关的拦截器" class="headerlink" title="身份认证相关的拦截器"></a>身份认证相关的拦截器</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://note.youdao.com/yws/public/resource/95dc5fd583515e098ac1c0633b7c4216/xmlnote/ADCF8DE003A94B08BAA7B4011D8ADB7B/9453" alt="image"></h2><h3 id="具体的实现例子"><a href="#具体的实现例子" class="headerlink" title="具体的实现例子"></a>具体的实现例子</h3><p>login登陆页面</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">   &lt;h4&gt;<span class="keyword">login</span> page&lt;/h4&gt;</span><br><span class="line">&lt;form action="login.do" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">	用户名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="username"/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">	密码：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="password" <span class="type">name</span>="password"/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="登陆"/&gt;</span><br></pre></td></tr></table></figure>
<p>根据applicationContext.xml中对shrio的配置，登陆成功后跳转到list页面</p>
<p>list页面</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">list page</span><br><span class="line"><span class="comment"> //在登陆成功后会有缓存存在，如果要重新实现登陆需要登出</span></span><br><span class="line"><span class="comment"> //登出操作在applicationContext.xml对shrio进行配置</span></span><br><span class="line"> &lt;<span class="keyword">a</span> href=<span class="string">"logout"</span>&gt;登出&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></table></figure>
<p>登陆controller</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public <span class="keyword">class</span> LoginController &#123;</span><br><span class="line">	</span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/login"</span>)</span></span><br><span class="line">	public String login(String username,String password) &#123;</span><br><span class="line">		</span><br><span class="line">		Subject currentUser = <span class="module-access"><span class="module"><span class="identifier">SecurityUtils</span>.</span></span>get<span class="constructor">Subject()</span>;</span><br><span class="line">		</span><br><span class="line">	     <span class="keyword">if</span> (!currentUser.is<span class="constructor">Authenticated()</span>) &#123;</span><br><span class="line">	            UsernamePasswordToken token = <span class="keyword">new</span> <span class="constructor">UsernamePasswordToken(<span class="params">username</span>, <span class="params">password</span>)</span>;</span><br><span class="line">	            token.set<span class="constructor">RememberMe(<span class="params">true</span>)</span>;</span><br><span class="line">	            <span class="keyword">try</span> &#123;</span><br><span class="line">	            	<span class="comment">//调用login方法实际上是调用realm</span></span><br><span class="line">	                currentUser.login(token);</span><br><span class="line">	     </span><br><span class="line">	            &#125; </span><br><span class="line">	            catch (AuthenticationException ae) &#123;</span><br><span class="line">	            	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"登陆失败"</span>+ae.get<span class="constructor">Message()</span>);</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line">	     </span><br><span class="line">		return <span class="string">"redirect:/list.jsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>realm的实现–继承AuthenticatingRealm</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ShrioRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">AuthenticationInfo</span> doGetAuthenticationInfo(<span class="type">AuthenticationToken</span> token) <span class="keyword">throws</span> <span class="type">AuthenticationException</span> &#123;</span><br><span class="line">		<span class="comment">// 1. 把AuthenticationToken 转为 UsernamePasswordToken</span></span><br><span class="line">		<span class="type">UsernamePasswordToken</span> upToken = (<span class="type">UsernamePasswordToken</span>)token;</span><br><span class="line">		<span class="comment">// 2. 通过UsernamePasswordToken获取用户名和密码</span></span><br><span class="line">		<span class="type">String</span> username = upToken.getUsername();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 3.调用数据库的方法 查询对用的记录</span></span><br><span class="line">		<span class="type">System</span>.out.println(<span class="string">"调用数据库获得username："</span>+username+<span class="string">"所对应的数据库信息"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 4. 如果用户不存在 则抛出UnknownAccountException异常</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"unknow"</span>.equals(username)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UnknownAccountException</span>(<span class="string">"用户不存在"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 5. 根据用户情况决定是否抛出其他AuthenticationException异常</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"bad"</span>.equals(username)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">LockedAccountException</span>(<span class="string">"非法用户，被锁定"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 6. 根据用户情况 构建AuthenticationInfo返回 通常使用SimpleAuthenticationInfo</span></span><br><span class="line">			<span class="comment">//以下信息在实际开发中是在数据库中获取的</span></span><br><span class="line">			<span class="comment">//1) principal:认证的实体信息 可以是username 也可以是数据库表对应的实体类对象</span></span><br><span class="line">			<span class="type">Object</span> principal = username;</span><br><span class="line">			<span class="comment">//2) credentials : 密码</span></span><br><span class="line">			<span class="type">String</span> credentials = <span class="string">"123456"</span>;</span><br><span class="line">			<span class="comment">//3)realmName :当前Realm对象的name ,调用父类的getName方法获取</span></span><br><span class="line">			<span class="type">String</span> realmName = getName();</span><br><span class="line">			</span><br><span class="line">		<span class="type">SimpleAuthenticationInfo</span> info = <span class="keyword">new</span> <span class="type">SimpleAuthenticationInfo</span>(principal, credentials, realmName);</span><br><span class="line">				</span><br><span class="line">		<span class="keyword">return</span> info;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>到现在已经可以实现简单的认证了，但还有问题：</li>
</ul>
<ol>
<li><p>shrio是如何实现密码的比对</p>
</li>
<li><p>使用明文进行密码的存储显然是不安全的 那么如何实现对密码的加密呢</p>
</li>
</ol>
<h2 id="密码的加密"><a href="#密码的加密" class="headerlink" title="密码的加密"></a>密码的加密</h2><h3 id="shrio是如何实现加密的"><a href="#shrio是如何实现加密的" class="headerlink" title="shrio是如何实现加密的"></a>shrio是如何实现加密的</h3><p>shrio在构建realm中AuthenticationInfo的时候会调用具体的匹配器(credentialsMatcher).</p>
<p>调用具体的匹配器的时候会比对原token和构建的token的密码</p>
<h3 id="shrio具体是如何实现加密"><a href="#shrio具体是如何实现加密" class="headerlink" title="shrio具体是如何实现加密?"></a>shrio具体是如何实现加密?</h3><p>通过在spring的配置文件中配置具体凭证验证器、加密算法、加密次数。。。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.ShrioRealm"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定凭证匹配器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 指定加密算法 --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 指定加密的次数 --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>作用：当配置了具体的加密算法后,shrio在进行密码比对之前就会先将用户的原密码(封装在token中)进行加密，然后再比对。</p>
<p>实际上是调用了SimpleHash进行加密</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span> result = <span class="keyword">new</span> SimpleHash(<span class="string">"MD5"</span>, <span class="string">"123456"</span>, <span class="keyword">null</span>, <span class="number">1024</span>)</span><br></pre></td></tr></table></figure>
<h3 id="shrio如何实现盐值加密"><a href="#shrio如何实现盐值加密" class="headerlink" title="shrio如何实现盐值加密"></a>shrio如何实现盐值加密</h3><h4 id="什么是盐值加密"><a href="#什么是盐值加密" class="headerlink" title="什么是盐值加密?"></a>什么是盐值加密?</h4><p>就是使用一个”固定且唯一的东西”比如说用户名作为”盐”，让相同的密码在加密后不同</p>
<h4 id="如何做到盐值加密"><a href="#如何做到盐值加密" class="headerlink" title="如何做到盐值加密?"></a>如何做到盐值加密?</h4><ul>
<li>在doGetAuthenticationInfo方法创建AuthenticationInfo返回值的时候使用new SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName)来构造</li>
<li>使用ByteSource.Util.bytes()来创建盐值</li>
<li>盐值需要唯一 一般使用随机字符串或者user id</li>
<li>使用 new SimpleHashRequest(algorithmName, source, salt, iterations)来计算盐值加密后的密文</li>
</ul>
<h2 id="多Realm认证"><a href="#多Realm认证" class="headerlink" title="多Realm认证"></a>多Realm认证</h2><h3 id="如何实现多Realm认证"><a href="#如何实现多Realm认证" class="headerlink" title="如何实现多Realm认证?"></a>如何实现多Realm认证?</h3><p>在spring配置文件添加多个realm,注入到ModularRealmAuthenticator中，在通过配置securityManager进行管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	1.配置securityManager </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	多Realm验证</span></span><br><span class="line"><span class="comment">	配置认证器</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	3.配置Realm </span></span><br><span class="line"><span class="comment">		直接使用实现了Realm接口的bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.ShrioRealm"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定凭证匹配器 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">     	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">     		<span class="comment">&lt;!-- 指定加密算法 --&gt;</span></span><br><span class="line">     		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     		<span class="comment">&lt;!-- 指定加密的次数 --&gt;</span></span><br><span class="line">     		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.SecondRealm"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定凭证匹配器 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">     	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">     		<span class="comment">&lt;!-- 指定加密算法 --&gt;</span></span><br><span class="line">     		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     		<span class="comment">&lt;!-- 指定加密的次数 --&gt;</span></span><br><span class="line">     		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="认证策略"><a href="#认证策略" class="headerlink" title="认证策略"></a>认证策略</h3><p><img src="https://s2.ax1x.com/2020/01/25/1eCw7Q.png" alt="image"></p>
<h3 id="认证策略的更改"><a href="#认证策略的更改" class="headerlink" title="认证策略的更改"></a>认证策略的更改</h3><p>通过认证器的authenticationStrategy属性进行更改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!--指定认证策略--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AllSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><h2 id="权限的拦截"><a href="#权限的拦截" class="headerlink" title="权限的拦截"></a>权限的拦截</h2><h3 id="如何实现权限的拦截"><a href="#如何实现权限的拦截" class="headerlink" title="如何实现权限的拦截?"></a>如何实现权限的拦截?</h3><ol>
<li>注意： 实现权限拦截realm要注入到securityManager的reamls属性</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"> &lt;bean <span class="built_in">id</span>=<span class="string">"securityManager"</span> <span class="built_in">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"cacheManager"</span> <span class="keyword">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span><br><span class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"authenticator"</span> <span class="keyword">ref</span>=<span class="string">"authenticator"</span> /&gt;</span><br><span class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"realms"</span>&gt;</span><br><span class="line">        	&lt;<span class="built_in">list</span>&gt;</span><br><span class="line">	 			&lt;<span class="keyword">ref</span> bean=<span class="string">"jdbcRealm"</span>/&gt;</span><br><span class="line">	 			&lt;<span class="keyword">ref</span> bean=<span class="string">"secondRealm"</span>/&gt;</span><br><span class="line">	 		&lt;/<span class="built_in">list</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">---- realm在实现多realm认证的时候配置在ModularRealmAuthenticator中，但实现授权的时候通知要注入到securityManager的realms属性中</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在ShiroFilterFactoryBean中配置相应的权限拦截</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    	配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">    	1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">    	2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">    	3) logout 登出</span></span><br><span class="line"><span class="comment">    	4) rloes 权限拦截器  必须有相应权限才能通过</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /login.jsp = anon</span><br><span class="line">            /login.do = anon</span><br><span class="line">            /logout = logout</span><br><span class="line">            <span class="comment">&lt;!--权限拦截--&gt;</span></span><br><span class="line">            /user.jsp = roles[user]</span><br><span class="line">            /admin.jsp = roles[admin]</span><br><span class="line">            </span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="授权的实现"><a href="#授权的实现" class="headerlink" title="授权的实现"></a>授权的实现</h2><h3 id="如何实现授权"><a href="#如何实现授权" class="headerlink" title="如何实现授权?"></a>如何实现授权?</h3><ol>
<li><p>授权的realm需要继承AuthorizingRealm类并实现doGetAuthorizationInfo抽象方法</p>
</li>
<li><p>推荐：realm直接继承AuthorizingRealm类并实现doGetAuthorizationInfo和doGetAuthenticationInfo抽象方法就可直接实现认证和授权操作</p>
</li>
</ol>
<p>ps:AuthorizingRealm是AuthenticatingRealm的子类</p>
<h3 id="具体实现授权"><a href="#具体实现授权" class="headerlink" title="具体实现授权?"></a>具体实现授权?</h3><p>shrio会回调realm实现的doGetAuthorizationInfo方法进行授权</p>
<p>spring配置了权限拦截</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        	配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">        	1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        	2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">        	3) logout 登出</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login.do = anon</span><br><span class="line">                /logout = logout</span><br><span class="line">                /user.jsp = roles[user]</span><br><span class="line">                /admin.jsp = roles[admin]</span><br><span class="line">                </span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>realm实现了具体授权</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于授权 shrio 会回调</span></span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span>(<span class="params">PrincipalCollection principals</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 1. 从PrincipalCollection 中获取用户登陆信息</span></span><br><span class="line">	Object principal = principals.getPrimaryPrincipal();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 2. 利用用户的登陆信息来授予用户 的权限或者角色(可能需要查询数据库)</span></span><br><span class="line">	Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">	roles.<span class="keyword">add</span>(<span class="string">"user"</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="string">"lyb"</span>.<span class="keyword">equals</span>(principal)) &#123;</span><br><span class="line">		roles.<span class="keyword">add</span>(<span class="string">"admin"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 3. 创建 SimpleAuthorizationInfo 对象 ，并设置roles属性----授权</span></span><br><span class="line">	SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo(roles);</span><br><span class="line">	<span class="comment">// 4. 返回SimpleAuthorizationInfo对象</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<p>上面的代码根据用户的principal信息进行具体的授权，这个principal信息就是在realm认证的时候设置的。注意当实现多realm认证时，在授权获取到的principal会受到realm认证顺序和认证策略的影响。</p>
<h2 id="权限注解"><a href="#权限注解" class="headerlink" title="权限注解"></a>权限注解</h2><p><img src="https://s2.ax1x.com/2020/01/25/1eCDts.png" alt="image"></p>
<p>例子:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(<span class="meta-string">"shrioService"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShrioService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequiresRoles(<span class="meta-string">"admin"</span>)</span> <span class="comment">//必须拥有admin角色才能访问</span></span><br><span class="line">	<span class="keyword">public</span> void testMethod() &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"service 测试"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="授权相关拦截器"><a href="#授权相关拦截器" class="headerlink" title="授权相关拦截器"></a>授权相关拦截器</h2><h3 id="授权相关拦截器-1"><a href="#授权相关拦截器-1" class="headerlink" title="授权相关拦截器"></a>授权相关拦截器</h3><p><img src="https://s2.ax1x.com/2020/01/25/1eCWBF.png" alt="image"></p>
<h3 id="授权相关的拦截器"><a href="#授权相关的拦截器" class="headerlink" title="授权相关的拦截器"></a>授权相关的拦截器</h3><p><img src="https://s2.ax1x.com/2020/01/25/1eCf74.png" alt="image"></p>
<h1 id="从数据表中初始化资源"><a href="#从数据表中初始化资源" class="headerlink" title="从数据表中初始化资源"></a>从数据表中初始化资源</h1><ul>
<li><p>问题：当前对于权限拦截的配置是直接配置在文件中，对于大量拦截配置这样是不方便的，如何解决?</p>
</li>
<li><p>解决：采用从数据表中初始化资源，因为shrio底层是读取配置的字符串形成一个LinkedHashMap，所以我们直接创建一个LinkedMap注入到ShiroFilterFactoryBean的filterChainDefinitionMap属性</p>
</li>
</ul>
<p>原先是采用直接配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        	配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">        	1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        	2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">        	3) logout 登出</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">         </span><br><span class="line">	        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">	                /login.jsp = anon</span><br><span class="line">	                /login.do = anon</span><br><span class="line">	                /logout = logout</span><br><span class="line">	                /user.jsp = roles[user]</span><br><span class="line">	                /admin.jsp = roles[admin]</span><br><span class="line">	                </span><br><span class="line">	                /** = authc</span><br><span class="line">	            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改后：采用初始化资源获取一个LinkedHashMap注入到filterChainDefinitionMap属性</p>
<ol>
<li>创建一个实例工厂用于获取LinkedHashMap</li>
</ol>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChainDefinitionMapFactory</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> LinkedHashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; buildFilterChainDefinitionMap()&#123;</span><br><span class="line">		</span><br><span class="line">		LinkedHashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; map = <span class="keyword">new</span> <span class="type">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//通过数据表获取初始化资源</span></span><br><span class="line">		<span class="comment">//map.put("/login.jsp","anon") ----通过键值对的形式</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在spring中配置这个工厂bean</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--j将获取的LinkedHashMap注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">ref</span>=<span class="string">"filterChainDefinitionMap"</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置一个bean ，该bean实际上是一个Map 通过实例工厂的方式 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMap"</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">factory-bean</span>=<span class="string">"filterChainDefinitionMapFactory"</span> <span class="attr">factory-method</span>=<span class="string">"buildFilterChainDefinitionMap"</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMapFactory"</span> <span class="attr">class</span>=<span class="string">"com.lyb.factory.FilterChainDefinitionMapFactory"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h1><p>SessionDAO</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">配置示例</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Session ID生成器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionIdGenerator"</span></span></span></span><br><span class="line"><span class="xml">class="orq.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Session DAO. 继承EnterpriseCachesessionDAO--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionDAO"</span></span></span></span><br><span class="line"><span class="xml">class="com.atguiqgu.shiro.realms.MysessionDao"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"activeSessionsCacheName"</span> <span class="attr">value</span>=<span class="string">"shiro-activeSessionCache"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionIdGenerator"</span> <span class="attr">ref</span>=<span class="string">"sessionIdGenerator"</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--会话管理a--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.session.mgt. DefaultSessionManager"</span>&lt;<span class="attr">property</span> <span class="attr">name</span>=<span class="string">"globalSessionTimeout"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deleteInvalidSessions"</span> <span class="attr">values</span>"<span class="attr">true</span>"/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionvalidationSchedulerEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionDAo"</span> <span class="attr">ref</span>=<span class="string">"sessionDAO"</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Shrio</tag>
      </tags>
  </entry>
  <entry>
    <title>struts2学习笔记</title>
    <url>/2020/01/24/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、Struts2入门"><a href="#一、Struts2入门" class="headerlink" title="一、Struts2入门"></a>一、Struts2入门</h1><a id="more"></a>

<h2 id="搭建struts2项目的步骤"><a href="#搭建struts2项目的步骤" class="headerlink" title="搭建struts2项目的步骤"></a>搭建struts2项目的步骤</h2><ol>
<li>新建web项目</li>
<li>导入所需的jar包</li>
<li>配置web.xml文件（配置struts2的核心控制器）</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">filter</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;struts2&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;org.apache.struts2.dispatcher.ng.<span class="keyword">filter</span>.StrutsPrepareAndExecuteFilter&lt;/<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;//注意如果struts2的版本是<span class="number">2.5</span>要去掉.ng</span><br><span class="line">&lt;/<span class="keyword">filter</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">filter</span>-<span class="keyword">mapping</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;struts2&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>在src下新建struts2的配置文件（<strong>struts.xml</strong>）<blockquote>
<p>XML文件的头文件可以直接在一个struts.xml文件里面拷贝，也可以在struts-core包下面的struts-default.xml里面拷贝</p>
</blockquote>
</li>
</ol>
<p>==注意：到这里struts框架已经搭建完成==</p>
<ol start="5">
<li>编写Action类 </li>
</ol>
<ul>
<li><p>在servlet中默认执行service方法，在struts中默认执行execute方法</p>
</li>
<li><p>在servlet中默认执行service方法，在struts中默认执行execute方法</p>
</li>
<li><p>在servlet的service方法中的参数是HttpServletRequest和HttpServletResponse，无返回值</p>
</li>
<li><p>在struts2中的方法都是public的，且无参数，返回值都为String</p>
</li>
</ul>
<ol start="6">
<li>在struts.xml中配置action类<blockquote>
<p>struts2是基于包来管理的，同样也是基于包来进行配置</p>
</blockquote>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- extends必须写，直接或间接继承struts-default，name自定义  namespace为命名空间--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">“/”</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- name写请求名称 ;class是对应action的完全限定名--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.action.HelloAction"</span> &gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- result是结果集 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- name与对应action中方法的返回值匹配，默认为success --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="struts2执行流程"><a href="#struts2执行流程" class="headerlink" title="struts2执行流程"></a>struts2执行流程</h2><blockquote>
<p>当用户提交一个请求，服务器接收，并交给struts2的核心过滤器来进行处理，struts2的过滤器调用struts2的一系列处理器来处理（如解析struts2.xml配置文件；和用户请求进行比对），直到调用对应的action类中的方法执行，执行完后再进行一系列处理到核心过滤器。由核心过滤器返回给服务器，服务器对浏览器进行响应。</p>
</blockquote>
<h2 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h2><p><img src="https://note.youdao.com/yws/public/resource/95dc5fd583515e098ac1c0633b7c4216/xmlnote/116E3C76607848498F473A995E5CC6FB/4699" alt="image"></p>
<h2 id="用struts2搭建一个简单登陆案例"><a href="#用struts2搭建一个简单登陆案例" class="headerlink" title="用struts2搭建一个简单登陆案例"></a>用struts2搭建一个简单登陆案例</h2><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Struts2Demo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>struts.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- extends必须写，直接或间接继承struts-default，name自定义 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- name写请求名称 ;class是对应action的完全限定名--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login1"</span> <span class="attr">class</span>=<span class="string">"com.lyb.action.LoginAction"</span> &gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- result是结果集 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- name与对应action中方法的返回值匹配，默认为success --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"failed"</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Action类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.lyb.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"lyb"</span>)&amp;&amp;pwd.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"failed"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pwd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>login.jsp</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login1.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>index.jsp</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">b</span>&gt;</span>登陆成功<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="二、struts2线程安全问题"><a href="#二、struts2线程安全问题" class="headerlink" title="二、struts2线程安全问题"></a>二、struts2线程安全问题</h1><h2 id="线程安全的概念"><a href="#线程安全的概念" class="headerlink" title="线程安全的概念"></a>线程安全的概念</h2><p>在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。</p>
<h2 id="struts2线程安全？"><a href="#struts2线程安全？" class="headerlink" title="struts2线程安全？"></a>struts2线程安全？</h2><p>每次请求都会重新创建action对象（多例），所以struts2是==线程安全==的</p>
<p>由于action对象是struts2反射生成的，所以action类要求要有一个公共的无参构造方法</p>
<h1 id="三、action的实现方式以及表单数据的处理"><a href="#三、action的实现方式以及表单数据的处理" class="headerlink" title="三、action的实现方式以及表单数据的处理"></a>三、action的实现方式以及表单数据的处理</h1><h2 id="action的三种实现方法"><a href="#action的三种实现方法" class="headerlink" title="action的三种实现方法"></a>action的三种实现方法</h2><ul>
<li>自定义一个pojo类</li>
</ul>
<p>好处：不具有侵入性，容易更改、测试</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span>&#123;</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printfln(<span class="string">"pojo execute!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>实现Action接口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">HelloAction</span> <span class="symbol">implement</span> <span class="symbol">Action</span>&#123; </span><br><span class="line">    <span class="keyword">public</span> String execute() throws Exception&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.printfln(<span class="string">"pojo execute!"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好处：使编码更加规范</p>
</li>
<li><p>继承ActionSupport</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123; </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好处：可以使用ActionSupport实现的功能 如：验证</p>
</li>
</ul>
<h2 id="以对象的方式处理表单数据"><a href="#以对象的方式处理表单数据" class="headerlink" title="以对象的方式处理表单数据"></a>以对象的方式处理表单数据</h2><h3 id="属性驱动"><a href="#属性驱动" class="headerlink" title="属性驱动"></a>属性驱动</h3><p>jsp页面</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">""</span> &gt;</span><br><span class="line">    姓名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"user.name"</span> /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    年龄：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=:text<span class="string">" name="</span>user.age" /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"确定"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure>
<p>vo类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>action类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAction</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> User user;<span class="comment">//注意这里的属性全部用小写，否则设置不会成功</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set get 方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模型驱动（ModelDriven）"><a href="#模型驱动（ModelDriven）" class="headerlink" title="模型驱动（ModelDriven）"></a>模型驱动（ModelDriven）</h3><p>jsp页面</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">""</span> &gt;</span><br><span class="line">    姓名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"name"</span> /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    年龄：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=:text<span class="string">" name="</span>age" /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"确定"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure>
<p>vo类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>action类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> UserAction implements ModelDriven&lt;<span class="keyword">User</span>&gt;&#123;</span><br><span class="line">    private <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">    </span><br><span class="line">    //<span class="keyword">get</span> <span class="keyword">set</span>方法</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> String <span class="keyword">execute</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">User</span> getModel()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、struts2配置文件详解"><a href="#四、struts2配置文件详解" class="headerlink" title="四、struts2配置文件详解"></a>四、struts2配置文件详解</h1><ul>
<li>配置文件名称</li>
</ul>
<p>struts2配置文件以struts.xml为名称，不能随意更改</p>
<ul>
<li>struts.xml头文件</li>
</ul>
<p>XML文件的头文件可以直接在一个struts.xml文件里面拷贝，也可以在struts-core包下面的struts-default.xml里面拷贝</p>
<p>下面为struts2 2.5版本的struts.xml的头文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="struts-xml的标签"><a href="#struts-xml的标签" class="headerlink" title="struts.xml的标签"></a>struts.xml的标签</h2><h3 id="1-constant标签"><a href="#1-constant标签" class="headerlink" title="1.constant标签"></a>1.constant标签</h3><p>作用：配置struts属性</p>
<ul>
<li>解决乱码问题（配置编码格式）</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.i18n.encoding" <span class="keyword">value</span>="UTF-8"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义扩展名</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.action.extension" <span class="keyword">value</span>="action,,lyb"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>设置开发者模式</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.devMode" <span class="keyword">value</span>="true"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure>
<p>但设置为true时，会启动错误友好提醒模式</p>
<ul>
<li>设置配置文件修改时自动加载 —推荐开发时使用<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.devMode" <span class="keyword">value</span>="true"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>注：上面常量配置的一种方式；也可以在src下新建==struts.properties==文件进行常量配置</p>
<h3 id="2-include标签"><a href="#2-include标签" class="headerlink" title="2.include标签"></a>2.include标签</h3><p>作用：引入文件，方便团队协作管理维护</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">include</span> <span class="keyword">file</span>=<span class="string">"com/lyb/struts/user.xml"</span> /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-package标签"><a href="#3-package标签" class="headerlink" title="3.package标签"></a>3.package标签</h3><ul>
<li><p>extends（继承）</p>
<blockquote>
<p>需要直接或者间接继承struts-default</p>
</blockquote>
</li>
<li><p>namespace（命名空间）</p>
<blockquote>
<p>例如当namespace=“/user”时，提交的路径需要以user/开头，并且当加上namespace时，结果集跳转路径不能省略/</p>
</blockquote>
<h2 id="action和result的配置详解"><a href="#action和result的配置详解" class="headerlink" title="action和result的配置详解"></a>action和result的配置详解</h2></li>
<li><p>name </p>
<blockquote>
<p>url的请求路径，不需要加后缀（.action）</p>
</blockquote>
</li>
<li><p>class </p>
<blockquote>
<p>url请求对应的java类（包名+类名）。该类由公共的无参构造方法创建（基于反射）</p>
</blockquote>
</li>
<li><p>method</p>
<blockquote>
<p>配置处理请求的方法，默认为execute 方法需要满足 【公共 无参 返回值为String】</p>
</blockquote>
</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;action <span class="built_in">name</span>=<span class="string">"login1"</span> <span class="built_in">class</span>=<span class="string">"com.lyb.action.LoginAction"</span> method=<span class="string">""</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> <span class="built_in">name</span>=<span class="string">"success"</span> type=<span class="string">""</span>&gt;index.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="built_in">name</span>=<span class="string">"failed"</span>&gt;login.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>name</p>
<blockquote>
<p>匹配请求处理方法的返回值 默认为success</p>
</blockquote>
</li>
<li><p>type</p>
<blockquote>
<p>结果处理类型 默认为dispather（转发）</p>
<p>具体类型有哪些可以在struts-default.xml里查找</p>
</blockquote>
</li>
<li><p>chain：action连接，连接下一个action，也就是值为action标签的name属性</p>
</li>
<li><p>dispather：转发，与servlet的转发一致，如果request的数据要到视图层显示，使用dispather</p>
</li>
<li><p>redirect：重定向  如果重定向到jsp页面可以直接重定向，如果重定向到另一个action则需要注意后缀名，如果需要后缀名则一定要添加后缀名</p>
</li>
<li><p>redirectAction：重定向到另一个action，不用加后缀名</p>
</li>
<li><p>stream：以流的形式显示——文件下载</p>
</li>
</ul>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><ul>
<li>配置全局结果集</li>
</ul>
<p>注意：全局结果集要在action前面</p>
<ul>
<li>配置默认class</li>
</ul>
<p>注意：不自行配置的话默认配置ActionSupport类</p>
<ul>
<li>配置默认的action</li>
</ul>
<p>注意：当请求的action不存在时，执行默认的action</p>
<ul>
<li>使用通配符简化action的配置<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">package</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span>//默认的action</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span>//默认class</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">global-results</span>&gt;</span>//全局结果集</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">result</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--通配符* method对应的是第几个*的值 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login1*"</span> <span class="attr">class</span>=<span class="string">"com.lyb.action.LoginAction"</span> <span class="attr">method</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> &gt;</span></span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">	//常规的action</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="配置文件的加载顺序"><a href="#配置文件的加载顺序" class="headerlink" title="配置文件的加载顺序"></a>配置文件的加载顺序</h2><p>struts-default.xml—–&gt;struts-plugin.xml—–&gt;struts.xml</p>
<hr>
<h1 id="五、ActionContext对象"><a href="#五、ActionContext对象" class="headerlink" title="五、ActionContext对象"></a>五、ActionContext对象</h1><h2 id="ActionContext介绍"><a href="#ActionContext介绍" class="headerlink" title="ActionContext介绍"></a>ActionContext介绍</h2><blockquote>
<p>struts1的Action必须依赖于web容器,他的execute方法会自动获得HttpservletReqest.HttpsevletResponse对象,从而可以跟web容器进行交互。</p>
<p>struts2的Action不用依赖于web容器,本身只是一个普通的java类而已。但是,在web开发中我们往往需要获得request, session、application等对象。这时候,可以通过ActionContext来处理。</p>
<p>ActionContext正如其名,是Action执行的上下文。他内部有个map属性,它存放了Action执行时需要用到的对象。</p>
<p>在每次执行Action之前都会创建新的Actioncontext对象,所以Actioncontext是线程安全的。新new的Actioncontext是保存在一个Threadlocal变量中,即采用Threadlocal.模式。Threadlocal变量为每个线程提供独立的变量值的副本,使每个线程都可以独立的使用自己的副本,而不会和其他线程发生冲突。</p>
<p>通过ActionContext获取的session 、request,application并不是真正的HttpServletRequest.HttpSerMletResponse, SerletContext对象,而是将这三个对象里面的值重新包装成了mapwn<br>对象。这样的封装,我们及获取了我们需要的值,同时避免了跟Web容器直接打交道,实现了完全的解耦</p>
</blockquote>
<ul>
<li><p>ActionContext是map结构的容器，是Action的上下文，存放了Action执行过程中的数据信息。</p>
</li>
<li><p>每次请求都会为当前线程创建一个新的ActionContext（采用ThreadLocal方式存储） ，所以ActionContext是线程安全的</p>
</li>
</ul>
<h2 id="ActionContext的获取"><a href="#ActionContext的获取" class="headerlink" title="ActionContext的获取"></a>ActionContext的获取</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ActionContext axt = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>;</span><br></pre></td></tr></table></figure>
<p>由于ActionContext是线程安全的同时也是通过静态方法获取的，所以本线程中的非action类也可以进行访问/使用。</p>
<p><code>注意：ActionContext是基于请求创建的，所以在非请求线程中无法获取到ActionContext。</code></p>
<h2 id="ThreadLocal模式"><a href="#ThreadLocal模式" class="headerlink" title="ThreadLocal模式"></a>ThreadLocal模式</h2><p>ActionContext采用ThreadLocal方式存储信息保证线程安全</p>
<p>测试用例：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//ThreadLocal是存放线程局部变量的容器</span></span><br><span class="line">	<span class="comment">//存放在ThreadLocal的变量线程安全</span></span><br><span class="line">	<span class="keyword">final</span> ThreadLocal&lt;<span class="keyword">String</span>&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">	tl.<span class="built_in">set</span>(<span class="string">"sss"</span>);</span><br><span class="line">	<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">		</span><br><span class="line">		@Override</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"Thread:"</span>+tl.<span class="built_in">get</span>());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;).start();</span><br><span class="line">	System.out.<span class="built_in">println</span>(tl.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ActionContext包含六大对象"><a href="#ActionContext包含六大对象" class="headerlink" title="ActionContext包含六大对象"></a>ActionContext包含六大对象</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.ax1x.com/2020/01/25/1epgCq.png" alt="image"></h2><h1 id="六、struts2获取ServletApi"><a href="#六、struts2获取ServletApi" class="headerlink" title="六、struts2获取ServletApi"></a>六、struts2获取ServletApi</h1><h2 id="通过解耦的方式获取ServlertApi"><a href="#通过解耦的方式获取ServlertApi" class="headerlink" title="通过解耦的方式获取ServlertApi"></a>通过解耦的方式获取ServlertApi</h2><ol>
<li>通过ActionContext获取</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取session</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get<span class="constructor">Session()</span>.put(String key,Object   value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取HttpServletRequest的Attributes</span></span><br><span class="line">Map&lt;String,Object&gt; request = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get(<span class="string">"request"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取request对象的parameters</span></span><br><span class="line">Map&lt;String,Object&gt; parameters = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get<span class="constructor">Parameters()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取apllication</span></span><br><span class="line">Map&lt;String,Object&gt; application = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get<span class="constructor">Application()</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过ActionContext直接获取HttpServletRequest</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get(StrutsStatics.HTTP_REQUEST);</span><br></pre></td></tr></table></figure>
<h2 id="通过耦合的方式获取ServletApi"><a href="#通过耦合的方式获取ServletApi" class="headerlink" title="通过耦合的方式获取ServletApi"></a>通过耦合的方式获取ServletApi</h2><ol>
<li>实现ServletRequestAware接口</li>
</ol>
<p>注：要获取response对象可以实现ServletResponseAware</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	HttpServletRequest request;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"hello struts"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest res)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.request = res;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>通过ServletActionContext获取</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = <span class="module-access"><span class="module"><span class="identifier">ServletActionContext</span>.</span></span>get<span class="constructor">Request()</span>;</span><br></pre></td></tr></table></figure>

<h1 id="七、值栈与Ognl表达式"><a href="#七、值栈与Ognl表达式" class="headerlink" title="七、值栈与Ognl表达式"></a>七、值栈与Ognl表达式</h1><h2 id="什么是值栈"><a href="#什么是值栈" class="headerlink" title="什么是值栈?"></a>什么是值栈?</h2><p>值栈（ValueStack）是ActionContext的一个对象。</p>
<p>值栈是栈结构，具有后进先出的特点</p>
<p>值栈存储的数据是Action对象</p>
<h2 id="Ognl表达式"><a href="#Ognl表达式" class="headerlink" title="Ognl表达式"></a>Ognl表达式</h2><p>全称： Object-Graph-Navigation-language(对象图导航语言)</p>
<p>原则：对象分成两类==常用的==和==不常用的==，常用的一般是小数据而不常用的一般是大数据</p>
<p>获取：常用的数据直接获取，不常用的数据加#获取</p>
<h3 id="ognl表达式的直接使用"><a href="#ognl表达式的直接使用" class="headerlink" title="ognl表达式的直接使用"></a>ognl表达式的直接使用</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws OgnlException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap();</span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">		Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">		stu.setName(<span class="string">"李四"</span>);</span><br><span class="line">	</span><br><span class="line">		Object obj = Ognl.getValue(<span class="string">"#name"</span>, <span class="built_in">map</span>, stu);<span class="comment">//getValue(String,Map,Object) ---ognl表达式、不常用数据、常用数据</span></span><br><span class="line">		System.out.<span class="built_in">println</span>(obj);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="struts2中使用ognl表达式"><a href="#struts2中使用ognl表达式" class="headerlink" title="struts2中使用ognl表达式"></a>struts2中使用ognl表达式</h3><p>用法：在struts2中通过标签使用ognl表达式</p>
<p>注意：在struts2中使用ognl表达式需要通过过滤器来启动，如果过滤器的配置为*.action结尾需要通过action来跳转不能直接访问jsp页面。</p>
<p>struts2推荐通过action来控制而不是直接访问jsp页面</p>
<p>使用： </p>
<ul>
<li>在jsp页面中导入标签库&lt;%@taglib prefix=”s” uri=”/struts-tags”%&gt;</li>
</ul>
<p>例子：</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="ruby">    pageEncoding=<span class="string">"utf-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">b</span>&gt;</span>登陆成功<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#session.user"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">-----</span></span><br><span class="line"><span class="xml">public class LoginAction &#123;</span></span><br><span class="line"><span class="xml">	private String name;</span></span><br><span class="line"><span class="xml">	private String pwd;</span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	public String execute() &#123;</span></span><br><span class="line"><span class="xml">		if(name.equals("lyb")&amp;&amp;pwd.equals("123")) &#123;</span></span><br><span class="line"><span class="xml">			ActionContext.getContext().getSession().put("user", name);</span></span><br><span class="line"><span class="xml">			return "success";</span></span><br><span class="line"><span class="xml">		&#125;else &#123;</span></span><br><span class="line"><span class="xml">			return "failed";</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>结论：action中的数据直接获取，ActionContext的数据加#获取</code></p>
<h1 id="八、类型转换"><a href="#八、类型转换" class="headerlink" title="八、类型转换"></a>八、类型转换</h1><ul>
<li><p>在servlet中，对于表单提供的非字符串类型需要手动进行类型转换</p>
</li>
<li><p>struts2能够对常用数据类型进行自动类型转换</p>
</li>
<li><p>对于自定义类型，struts2无法进行自动类型转换，那么需要手动进行转换。如果该类型转换的使用频率比较高则可以使用struts提供的类型转换器</p>
</li>
</ul>
<h2 id="类型转换器使用方法"><a href="#类型转换器使用方法" class="headerlink" title="类型转换器使用方法"></a>类型转换器使用方法</h2><ol>
<li>编写类型转换器—继承StrutsTypeConverter类</li>
<li>在src下编写xwork-conversion.properties的配置文件<ul>
<li>内容为：要转换的类型=类型转换器（类名+包名）</li>
</ul>
</li>
</ol>
<h3 id="编写类型转换器："><a href="#编写类型转换器：" class="headerlink" title="编写类型转换器："></a>编写类型转换器：</h3><p>当表单提交数据时，会调用<code>convertFromString</code>方法进行类型转换，该方法返回转换好的对象，并对action的对应属性进行赋值</p>
<p>当前台页面用ognl表达式输出action对应的属性时调用<code>convertToString</code>方法进行转换输出</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PoniterConverter</span> <span class="keyword">extends</span> <span class="title">StrutsTypeConverter</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * arg0 是ActionContext对象</span></span><br><span class="line"><span class="comment">	 * arg1 是要转换的字符串数组</span></span><br><span class="line"><span class="comment">	 * arg2是被转换的类型</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public <span class="type">Object</span> convertFromString(<span class="type">Map</span> arg0, <span class="type">String</span>[] arg1, <span class="type">Class</span> arg2) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将字符串转换为前台数据显示， ----通过ognl表达式为调用该方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public <span class="type">String</span> convertToString(<span class="type">Map</span> arg0, <span class="type">Object</span> arg1) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xwork-conversion.properties配置文件</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.lyb</span><span class="selector-class">.enty</span>.Poniter=com<span class="selector-class">.lyb</span><span class="selector-class">.converter</span>.PoniterConverter</span><br></pre></td></tr></table></figure>

<h1 id="九、struts2的验证机制"><a href="#九、struts2的验证机制" class="headerlink" title="九、struts2的验证机制"></a>九、struts2的验证机制</h1><h2 id="手动验证"><a href="#手动验证" class="headerlink" title="手动验证"></a>手动验证</h2><p>用法：action类需要继承ActionSupport类</p>
<p>作用：当继承ActionSupport类后，每一个请求来时会先执行==validate==验证方法,执行后才执行对应的调用方法。</p>
<h3 id="两种验证流程："><a href="#两种验证流程：" class="headerlink" title="两种验证流程："></a>两种验证流程：</h3><ol>
<li>请求的是execute方法</li>
</ol>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="function"><span class="title">request</span>--&gt;</span>validate方法</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--成功--&gt;</span>execue方法</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--失败--&gt;</span>input视图</span><br><span class="line"><span class="function"><span class="title">execue</span>方法--&gt;</span>respond</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>请求的是自定义的xxx方法</li>
</ol>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="function"><span class="title">request</span>--&gt;</span>validateXxx方法</span><br><span class="line"><span class="function"><span class="title">validateXxx</span>方法--成功--&gt;</span>validate方法</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--失败--&gt;</span>input视图</span><br><span class="line"><span class="function"><span class="title">validateXxx</span>方法--失败--&gt;</span>input视图</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--&gt;</span>xxx方法</span><br><span class="line"><span class="function"><span class="title">xxx</span>方法--&gt;</span>respond</span><br></pre></td></tr></table></figure>

<p><code>在jsp页面通过&lt;s:actionerror/actionmessge&gt;取出信息</code></p>
<h3 id="验证案例："><a href="#验证案例：" class="headerlink" title="验证案例："></a>验证案例：</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">action类 继承ActionSupport</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span>&#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(age&gt;<span class="number">120</span>||age&lt;<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.addActionError(<span class="string">"年龄不合法"</span>);<span class="comment">//会跳转到input，不会执行execute方法</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>struts.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"register"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.RegisterAction"</span> <span class="attr">method</span>=<span class="string">"age"</span>&gt;</span> </span><br><span class="line"> 				<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>index.jsp页面</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="ruby">    pageEncoding=<span class="string">"utf-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>验证<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">s:actionerror</span>/&gt;</span>//取出验证提示错误信息</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"register.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		用户ID：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>success.jsp页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	验证成功。</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="验证框架的使用"><a href="#验证框架的使用" class="headerlink" title="验证框架的使用"></a>验证框架的使用</h2><p>使用验证框架的步骤：</p>
<ol>
<li><p>Action类要继承ActionSupport类</p>
</li>
<li><p>在对应的action类的包下，建一个验证框架的配置文件，该配置文件的名称必须为==action类名-validation.xml==</p>
</li>
</ol>
<p>例如: 一个名为<strong>AddACtion</strong>的类，对应的验证框架配置文件为<strong>AddAction-validation.xml</strong></p>
<ol start="3">
<li>在配置文件里配置对应需验证属性的验证信息</li>
</ol>
<p>注意： 各种验证及其属性具体信息可以查看struts-core下xwork-validators的类</p>
<p>案例：</p>
<p>jsp页面</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;form action="register.action" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">		用户ID：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="id"/&gt;</span><br><span class="line">		密码：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="password" <span class="type">name</span>="password"/&gt;</span><br><span class="line">		年龄：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="age"/&gt;</span><br><span class="line">		&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"/&gt;</span><br><span class="line">	&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>Action类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterValidateAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span>&#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>action对应的验证框架</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">validators</span> <span class="meta-keyword">PUBLIC</span></span></span></span><br><span class="line"><span class="xml">   "-//Apache Struts//XWork Validator 1.0.3//EN"</span></span><br><span class="line"><span class="xml">   "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd"&gt; </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">validators</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span>//-----------name的值对应表单提交的name值</span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">"requiredstring"</span>&gt;</span>//------使用的验证器</span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"trim"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param</span>&gt;</span>//--------验证</span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">message</span>&gt;</span>id必须为空<span class="tag">&lt;/<span class="name">message</span>&gt;</span>//-----------验证失败添加信息，并跳转到input页面</span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span> 	</span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	</span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"min"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"max"</span>&gt;</span>120<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">message</span>&gt;</span>年龄不合理,范围在$</span><span class="template-variable">&#123;min&#125;</span><span class="xml">到$</span><span class="template-variable">&#123;max&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	</span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>struts.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"register"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.RegisterValidateAction"</span>&gt;</span> </span><br><span class="line"> 				<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h2 id="什么是拦截器、拦截器栈"><a href="#什么是拦截器、拦截器栈" class="headerlink" title="什么是拦截器、拦截器栈?"></a>什么是拦截器、拦截器栈?</h2><ul>
<li><p>Interceptor拦器类似于我们前面学过的过滤器,是可以在action执行前后执行的代 是我们做web开发时经常用的技术。比如:权限控制、日志等。我们也可以将多个Interceptor连在一起组成Interceptor 栈。</p>
</li>
<li><p>struts2拦截器,每个拦截器类只有一个对象实例,即采用==单例模式==,所有引用这个拦截器的Action都共享这一拦截器类的实例,因此,在拦截器中如果使用类变量,==要注意同步问题==。</p>
<ul>
<li><p>拦截器是在访问某个方法,字段之前或之后实施拦截。</p>
</li>
<li><p>拦截器是AOP的一种实现</p>
</li>
<li><p>拦截器栈(Interceptor stack)就是将拦截器按一定的顺序联结成一条链。<br>在访问被拦截的方法或字段时,拦截器链中的拦截器就会按其之前定义的顺序被调用。</p>
</li>
</ul>
</li>
</ul>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>struts2拦截器的实现原理相对简单,当请求struts2的action时, struts 2会查找配置文件,并根据其配密实例化相对应拦截器对象,然后串成一个列表,最后一个一个地调用列表中的拦截器</p>
<h2 id="拦截器作用"><a href="#拦截器作用" class="headerlink" title="拦截器作用"></a>拦截器作用</h2><p>一些action的公共代码可以放到拦截器里面</p>
<h2 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h2><ul>
<li>过滤器隶属web容器可以过滤一切请求（action、servlet、jsp、html）</li>
<li>拦截器隶属struts2,只能拦截action</li>
<li>过滤器内部使用函数回调实现、而拦截器采用动态代理实现<h2 id="拦截器实现步骤"><a href="#拦截器实现步骤" class="headerlink" title="拦截器实现步骤"></a>拦截器实现步骤</h2></li>
</ul>
<ol>
<li><p>编写拦截器类(实现Interceptor接口或者继承AbstractInterceptor类)</p>
</li>
<li><p>在struts.xml中配置拦截器</p>
</li>
<li><p>在action中引用拦截器</p>
</li>
</ol>
<p>案例：</p>
<p>拦截器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">		<span class="comment">//执行下一个拦截器，直到执行action获取action返回的结果</span></span><br><span class="line">		String result = invocation.invoke();</span><br><span class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">		System.out.println(<span class="string">"action共执行："</span>+(end-start)+<span class="string">"ms"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将结果返回给上一个拦截器</span></span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在struts.xml配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 拦截器配置在package标签下，可以配置多个拦截器 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"> 		</span><br><span class="line"> 		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line"> 			<span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="拦截器配置详解"><a href="#拦截器配置详解" class="headerlink" title="拦截器配置详解"></a>拦截器配置详解</h2><ul>
<li>当配置了自定义拦截器后，默认拦截器将不起作用</li>
<li>在struts-default.xml中，配置了默认拦截器，当不引用自定义拦截器，默认拦截器将起作用<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;interceptor-stack <span class="built_in">name</span>=<span class="string">"completeStack"</span>&gt;</span><br><span class="line">        &lt;interceptor-<span class="keyword">ref</span> <span class="built_in">name</span>=<span class="string">"defaultStack"</span>/&gt;</span><br><span class="line"> &lt;/interceptor-stack&gt;</span><br></pre></td></tr></table></figure></li>
<li>当引用了自定义拦截器后，想使用默认拦截器需要手动引用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>当action需要引用的拦截器较多时可以使用拦截器栈<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 拦截器配置在package标签下，可以配置多个拦截器 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line"> 			</span><br><span class="line"> 			<span class="comment">&lt;!-- 拦截器栈可以包含多个拦截器/拦截器栈 --&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line"> 				<span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 				<span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 			</span><br><span class="line"> 			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"> 		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>当包下所有的action都要使用某拦截器/拦截器栈时，可以将其定义为默认拦截器/拦截器栈</li>
</ul>
<p>==要注意位置：interceptoe—-defalut-interceptor—-action==</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截器配置在package标签下，可以配置多个拦截器 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 拦截器栈可以包含多个拦截器/拦截器栈 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--自定义默认拦截器/拦截器栈--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span><span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="方法拦截器"><a href="#方法拦截器" class="headerlink" title="方法拦截器"></a>方法拦截器</h2><p>作用：可以拦截指定的action执行方法</p>
<p>用法步骤：</p>
<ul>
<li>编写方法拦截器 继承==MethodFilterInterceptor==类</li>
<li>配置方法拦截器</li>
<li>引用方法拦截器</li>
</ul>
<p>案例：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">方法拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">String</span> doIntercept(<span class="type">ActionInvocation</span> invocation) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="type">System</span>.out.println(<span class="string">"方法拦截器被执行"</span>);</span><br><span class="line">		<span class="keyword">return</span> invocation.invoke();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置方法拦截器 </span></span><br><span class="line"><span class="comment">            通过includeMethods属性配置需要拦截的方法</span></span><br><span class="line"><span class="comment">            通过excludeMethods属性配置不需要拦截的方法 </span></span><br><span class="line"><span class="comment">            多个方法用逗号隔开</span></span><br><span class="line"><span class="comment">            --&gt;</span> 	    </span><br><span class="line"> 	    	<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"method"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.MethodInterceptor"</span>&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"includeMethods"</span>&gt;</span>list<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line"> 			<span class="comment">&lt;!-- 拦截器栈可以包含多个拦截器/拦截器栈 --&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line"> 				<span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"method"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 				<span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 			</span><br><span class="line"> 			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"> 		</span><br><span class="line"> 		<span class="tag">&lt;<span class="name">1--引用方法拦截器--</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="十一、文件上传"><a href="#十一、文件上传" class="headerlink" title="十一、文件上传"></a>十一、文件上传</h1><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><p>案例:</p>
<p>jsp页面</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">       注意</span></span><br><span class="line"><span class="comment">       1.entype属性改写成multipart/form-data，代表可以上传各种类型的文件</span></span><br><span class="line"><span class="comment">       2.必须要用post方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&lt;form action="upload.action" <span class="keyword">method</span>="post" enctype="multipart/form-data"&gt;</span><br><span class="line">	&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="file"/&gt;</span><br><span class="line">	&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="上传"/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>action类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span>&#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">File</span> file;<span class="comment">//接收表单上传的文件</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> fileFileName;<span class="comment">//文件的名称</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> fileContentType;<span class="comment">//文件的类型</span></span><br><span class="line">	</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">upload</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">			HttpServletRequest req = ServletActionContext.getRequest();</span><br><span class="line">			<span class="keyword">String</span> path = req.getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">			System.out.<span class="built_in">println</span>(path);</span><br><span class="line">			InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">			OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> <span class="built_in">File</span>(path,fileFileName));</span><br><span class="line">			<span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"> 			<span class="keyword">int</span> len;</span><br><span class="line"> 			<span class="keyword">while</span>((len=is.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line"> 				os.<span class="built_in">write</span>(<span class="built_in">buffer</span>);</span><br><span class="line"> 				os.<span class="built_in">flush</span>();</span><br><span class="line"> 			&#125;</span><br><span class="line">			os.<span class="built_in">close</span>();</span><br><span class="line">			is.<span class="built_in">close</span>();</span><br><span class="line">			<span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="comment">//get set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>多文件上传可以理解为上传到action类的是一个file数组</p>
<h1 id="十二、文件下载"><a href="#十二、文件下载" class="headerlink" title="十二、文件下载"></a>十二、文件下载</h1><p>文件下载案例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"download.action"</span>&gt;</span>下载思维导图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;action <span class="attribute">name</span>=<span class="string">"download"</span> <span class="attribute">class</span>=<span class="string">"cn.lyb.action.DownLoadAction"</span>&gt;&lt;/action&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> * @throws IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">	<span class="comment">//获取请求对象</span></span><br><span class="line">	HttpServletRequest req = ServletActionContext.getRequest();</span><br><span class="line">	<span class="comment">//获取响应对象</span></span><br><span class="line">	HttpServletResponse resp = ServletActionContext.getResponse();</span><br><span class="line">	<span class="comment">//获取资源文件路径</span></span><br><span class="line">	<span class="keyword">String</span> path = req.getRealPath(<span class="string">"/download"</span>);</span><br><span class="line">	<span class="comment">//获取取资源文件，此文件在path目录下</span></span><br><span class="line">	<span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(path,<span class="string">"CD.bmd"</span>);</span><br><span class="line">	<span class="comment">//设置响应信息</span></span><br><span class="line">	resp.setContentLength((<span class="keyword">int</span>)file.length());</span><br><span class="line">	resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">	resp.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=CD.bmd"</span>);</span><br><span class="line">	resp.setContentType(<span class="string">"application/octet-stream"</span>); <span class="comment">//applicatiga/octet-stream..application/x-madonlsed可选参数</span></span><br><span class="line">	<span class="comment">//创建输入输出流</span></span><br><span class="line">	InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">	OutputStream os = resp.getOutputStream();</span><br><span class="line">	<span class="comment">//准备缓冲数组</span></span><br><span class="line">	<span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//写出文件</span></span><br><span class="line">	<span class="keyword">while</span>((len=is.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">		os.<span class="built_in">write</span>(<span class="built_in">buffer</span>,<span class="number">0</span>,len);</span><br><span class="line">		os.<span class="built_in">flush</span>();</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="comment">//关闭流</span></span><br><span class="line">	os.<span class="built_in">close</span>();</span><br><span class="line">	is.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> null;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、strutsApi实现ajax"><a href="#十三、strutsApi实现ajax" class="headerlink" title="十三、strutsApi实现ajax"></a>十三、strutsApi实现ajax</h1><h2 id="使用原生struts2实现ajax"><a href="#使用原生struts2实现ajax" class="headerlink" title="使用原生struts2实现ajax"></a>使用原生struts2实现ajax</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3 .3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			$.post(<span class="string">"ajax.action"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">				</span><br><span class="line"><span class="javascript">				$(<span class="string">'#msg'</span>).html(data);</span></span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取ajax信息"</span> <span class="attr">id</span>=<span class="string">"btn"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxAction</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">		HttpServletResponse resp =  ServletActionContext.getResponse();</span><br><span class="line">		resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		resp.getWriter().<span class="built_in">write</span>(<span class="string">"暗淡青黄体性柔"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> null;</span><br><span class="line">				</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;action <span class="attribute">name</span>=<span class="string">"ajax"</span> <span class="attribute">class</span>=<span class="string">"cn.lyb.action.AjaxAction"</span>&gt;&lt;/action&gt;</span><br></pre></td></tr></table></figure>
<h2 id="使用struts2插件实现ajax-json格式-处理"><a href="#使用struts2插件实现ajax-json格式-处理" class="headerlink" title="使用struts2插件实现ajax(json格式)处理"></a>使用struts2插件实现ajax(json格式)处理</h2><p>使用struts2实现json需要导入下列的jar包</p>
<p><img src="https://s2.ax1x.com/2020/01/25/1e99IA.png" alt="image"></p>
<p>jsp页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			$.post(<span class="string">"json.action"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> html =<span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">			    	html+="<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].name+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].age+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>"</span></span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="javascript">				$(<span class="string">'#content'</span>).html(html);</span></span><br><span class="line"><span class="actionscript">			&#125;,<span class="string">'json'</span>);</span></span><br><span class="line">			</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取json信息"</span> <span class="attr">id</span>=<span class="string">"btn"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>struts.xml</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    注意</span></span><br><span class="line"><span class="comment">        1.要继承json-default</span></span><br><span class="line"><span class="comment">        2.结果集的类型要为json</span></span><br><span class="line"><span class="comment">        3.需要设置参数param的root</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;package <span class="built_in">name</span>=<span class="string">"default2"</span> extends=<span class="string">"json-default"</span> namespace=<span class="string">"/"</span>&gt;</span><br><span class="line">		&lt;<span class="built_in">action</span> <span class="built_in">name</span>=<span class="string">"json"</span> class=<span class="string">"cn.lyb.action.JosnAction"</span>&gt;</span><br><span class="line">			&lt;result <span class="built_in">type</span>=<span class="string">"json"</span>&gt;</span><br><span class="line">				&lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"root"</span>&gt;root&lt;/<span class="built_in">param</span>&gt;</span><br><span class="line">			&lt;/result&gt;</span><br><span class="line">		&lt;/<span class="built_in">action</span>&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/package&gt;</span><br></pre></td></tr></table></figure>
<p>action类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosnAction</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> JSONArray root;</span><br><span class="line">	<span class="comment">//如果是单个对象可以使用JSONObject</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		List&lt;User&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="built_in">list</span>.add(<span class="keyword">new</span> User(<span class="string">"小明"</span>,<span class="number">25</span>));</span><br><span class="line">		<span class="built_in">list</span>.add(<span class="keyword">new</span> User(<span class="string">"小宏"</span>,<span class="number">24</span>));</span><br><span class="line">		<span class="built_in">list</span>.add(<span class="keyword">new</span> User(<span class="string">"小阿三"</span>,<span class="number">23</span>));</span><br><span class="line">		root = JSONArray.fromObject(<span class="built_in">list</span>);<span class="comment">//将Object类型数据转换成json格式 </span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> JSONArray <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(JSONArray root)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.root = root;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习笔记</title>
    <url>/2020/01/24/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、MyBatis入门"><a href="#一、MyBatis入门" class="headerlink" title="一、MyBatis入门"></a>一、MyBatis入门</h1><a id="more"></a>

<ol>
<li>什么是MyBatis?</li>
</ol>
<p>MyBatis是一个基于java的持久层框架</p>
<ol start="2">
<li>MyBatis的作用?</li>
</ol>
<p>维护数据的持久化，帮助程序员将数据存入数据库，将数据从数据库取出封装成对象</p>
<h2 id="MyBatis的使用步骤"><a href="#MyBatis的使用步骤" class="headerlink" title="MyBatis的使用步骤"></a>MyBatis的使用步骤</h2><ol>
<li><p>导入mybatis相关的jar包+数据库驱动包</p>
</li>
<li><p>编写核心配置文件 </p>
</li>
</ol>
<p>实例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/cdleding?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/entiy/user.mapper.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>创建SqlSessionFactory ，以及获得SqlSession</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		String resource = <span class="string">"mybatis-config.xml"</span>; <span class="comment">//读取mybatis配置文件</span></span><br><span class="line">		InputStream inputStream = Resources.getResourceAsStream(resource); </span><br><span class="line">		SqlSessionFactory sqlSessionFactory =  <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">SqlSession <span class="title">getSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">		<span class="function"><span class="keyword">return</span> sqlSessionFactory.<span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里mybatis就可以使用了<br>4. 创建实体类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>编写sql映射语句</li>
</ol>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"cn.lyb.entiy.User"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">		select * from user where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>测试</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws IOException &#123;</span><br><span class="line">		//获得SqlSession</span><br><span class="line">		SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">		//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line">		<span class="keyword">User</span> <span class="keyword">user</span> = <span class="keyword">session</span>.selectOne("cn.lyb.user.Mapper.selectUser", <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、MyBatis增删改查"><a href="#二、MyBatis增删改查" class="headerlink" title="二、MyBatis增删改查"></a>二、MyBatis增删改查</h1><h2 id="sql映射配置文件"><a href="#sql映射配置文件" class="headerlink" title="sql映射配置文件"></a>sql映射配置文件</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"cn.lyb.entiy.User"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">		select * from user2 where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lyb.entiy.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		insert into user2 (name,age) values(#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;age&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lyb.entiy.User"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		update user2 set name=#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,age=#</span><span class="template-variable">&#123;age&#125;</span><span class="xml"> where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		delete from user2 where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="dao层示例"><a href="#dao层示例" class="headerlink" title="dao层示例"></a>dao层示例</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserDao &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">User</span> getUserById(<span class="type">int</span> id) throws IOException &#123;</span><br><span class="line">		//获得SqlSession</span><br><span class="line">		SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">		//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line">		<span class="keyword">User</span> <span class="keyword">user</span> = <span class="keyword">session</span>.selectOne("cn.lyb.user.Mapper.selectUser", id);</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">user</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> addUser(<span class="keyword">User</span> <span class="keyword">user</span>) throws IOException &#123;</span><br><span class="line">		//获得SqlSession</span><br><span class="line">		SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">		//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line">		<span class="type">int</span> result = <span class="keyword">session</span>.<span class="keyword">insert</span>("cn.lyb.user.Mapper.addUser", <span class="keyword">user</span>);</span><br><span class="line">		//添加信息是一种事务，需要手动提交</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> updateUser(<span class="keyword">User</span> <span class="keyword">user</span>) throws IOException &#123;</span><br><span class="line">		//获得SqlSession</span><br><span class="line">		SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">		//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line">		<span class="type">int</span> result = <span class="keyword">session</span>.<span class="keyword">update</span>("cn.lyb.user.Mapper.updateUser", <span class="keyword">user</span>);</span><br><span class="line">		//更新信息是一种事务，需要手动提交</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> deleteUserById(<span class="type">int</span> id) throws IOException &#123;</span><br><span class="line">		//获得SqlSession</span><br><span class="line">		SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">		//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line">		<span class="type">int</span> result = <span class="keyword">session</span>.<span class="keyword">delete</span>("cn.lyb.user.Mapper.deleteUser", id);</span><br><span class="line">		//删除信息是一种事务，需要手动提交</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、配置文件的解析和优化"><a href="#三、配置文件的解析和优化" class="headerlink" title="三、配置文件的解析和优化"></a>三、配置文件的解析和优化</h1><h2 id="1-mybatis配置文件的解析"><a href="#1-mybatis配置文件的解析" class="headerlink" title="1.mybatis配置文件的解析"></a>1.mybatis配置文件的解析</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		环境管理</span></span><br><span class="line"><span class="comment">		1.environments指MyBatis可以配置多个环境，default指向默认环境</span></span><br><span class="line"><span class="comment">		2。每个SqlSessionFactory对应一个环境</span></span><br><span class="line"><span class="comment">	  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">				事务管理</span></span><br><span class="line"><span class="comment">				 �  JDBC- 这个类型直接全部使用 JDBC 的提交和回滚功能。它依靠使用连接的数据源来管理事务的 作用域。</span></span><br><span class="line"><span class="comment">				 �  MANAGED- 这个类型什么不做，它从不提交、回滚和关闭连接。而是让窗口来管理事务的全部生 命周期。（</span></span><br><span class="line"><span class="comment">				 	比如说Spring 或者 JAVAEE 服务器）</span></span><br><span class="line"><span class="comment">			 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">				  数据源</span></span><br><span class="line"><span class="comment">				 UNPOOLED - 这个数据源实现只是在每次请求的时候简单的打开和关闭一个连接。</span></span><br><span class="line"><span class="comment">				 POOLED - 这个数据源缓存 JDBC 连接对象用于避免每次都要连接和生成连接实例而需要的验证时间。</span></span><br><span class="line"><span class="comment">				 		     对于并发WEB 应用，这种方式非常流行因为它有最快的响应时间。</span></span><br><span class="line"><span class="comment">				 JNDI- 这个数据源实现是为了准备和Spring 或应用服务一起使用，可以在外部也可以在内部配置这个 数据源，</span></span><br><span class="line"><span class="comment">				 </span></span><br><span class="line"><span class="comment">			 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 定义映射语句的文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/entiy/user.mapper.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-mybatis配置文件的优化"><a href="#2-mybatis配置文件的优化" class="headerlink" title="2.mybatis配置文件的优化"></a>2.mybatis配置文件的优化</h2><h3 id="1-使用别名简化mapperr文件"><a href="#1-使用别名简化mapperr文件" class="headerlink" title="1.使用别名简化mapperr文件"></a>1.使用别名简化mapperr文件</h3><p>mybatis配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">1--</span></span></span><br><span class="line"><span class="tag">            为指定类型指定别名 使得在<span class="attr">mapper</span>映射文件中简化引用</span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>：原<span class="attr">leixing</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alias:</span>别名</span></span><br><span class="line"><span class="tag">         <span class="attr">--</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.lyb.entiy.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		     为指定包下所有的类指定别名，默认别名为对应的类名</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.entiy"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">	    ··································</span><br><span class="line">	    ··································</span><br><span class="line">	    ··································</span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-使用properties文件配置数据源"><a href="#2-使用properties文件配置数据源" class="headerlink" title="2.使用properties文件配置数据源"></a>2.使用properties文件配置数据源</h3><p>建立porperties文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/s_01?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;useSSL=<span class="literal">false</span></span><br><span class="line"><span class="attr">username</span>=root</span><br><span class="line"><span class="attr">password</span>=lyb980328</span><br></pre></td></tr></table></figure>
<p>mybatis配置文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">src</span>=<span class="string">"文件路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	   <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="四、属性名和字段名不一致的处理"><a href="#四、属性名和字段名不一致的处理" class="headerlink" title="四、属性名和字段名不一致的处理"></a>四、属性名和字段名不一致的处理</h1><p>数据库表字段</p>
<p><code>id , name , pwd</code></p>
<p>java实体类属性</p>
<p><code>id , name , password</code></p>
<p>使用查找语句</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">   &lt;select <span class="built_in">id</span>=<span class="string">"selectUser"</span> resultType=<span class="string">"User"</span>&gt; </span><br><span class="line">	select <span class="built_in">id</span>,<span class="built_in">name</span>,pwd <span class="keyword">from</span> user2 <span class="keyword">where</span> <span class="built_in">id</span>= <span class="comment">#&#123;id&#125;  </span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>出现的问题：密码无法设置</p>
</li>
<li><p>原因：mybatis会将列名转为小写，调用对应的实体类的set方法进行设置</p>
</li>
</ul>
<p>解决办法</p>
<p>1.使用别名</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">   &lt;select <span class="built_in">id</span>=<span class="string">"selectUser"</span> resultType=<span class="string">"User"</span>&gt; </span><br><span class="line">	select <span class="built_in">id</span>,<span class="built_in">name</span>,pwd password <span class="keyword">from</span> user2 <span class="keyword">where</span> <span class="built_in">id</span>= <span class="comment">#&#123;id&#125;  </span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>2.使用结果集</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"UserMapper"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">	select id,name,pwd from user2 where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.lyb.entiy.User"</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--id为主键--&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--column为数据库表列名，property为实体类属性名--&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="五、分页的实现"><a href="#五、分页的实现" class="headerlink" title="五、分页的实现"></a>五、分页的实现</h1><h2 id="通过Map结构实现分页"><a href="#通过Map结构实现分页" class="headerlink" title="通过Map结构实现分页"></a>通过Map结构实现分页</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--这里使用了MyBatis的自带别名Map ,代表一个Map类型--&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"User"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		select * from user2 limit #</span><span class="template-variable">&#123;startIndex&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pageSize&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    分页查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> currentPage,<span class="keyword">int</span> pageSize)</span> throws IOException </span>&#123;</span><br><span class="line">	</span><br><span class="line">		SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">		</span><br><span class="line">		Map&lt;<span class="keyword">String</span>,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		<span class="comment">//当前页-1乘每页数=数据数量等于开始下标</span></span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"startIndex"</span>,(currentPage<span class="number">-1</span>)*pageSize));</span><br><span class="line">		<span class="built_in">map</span>.pur(<span class="string">"pageSize"</span>,pageSize);</span><br><span class="line">		</span><br><span class="line">		List&lt;User&gt; <span class="built_in">list</span>= session.selecList(<span class="string">"cn.lyb.user.Mapper.selectUser"</span>, <span class="built_in">map</span>);</span><br><span class="line">		session.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过RowBounds实现分页"><a href="#通过RowBounds实现分页" class="headerlink" title="通过RowBounds实现分页"></a>通过RowBounds实现分页</h2><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;mapper <span class="keyword">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">select</span> id=<span class="string">"selectAll"</span> resultType=<span class="string">"User"</span> &gt;</span><br><span class="line">		<span class="keyword">select</span> * <span class="keyword">from</span> user2</span><br><span class="line">	&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    分页查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public User get<span class="constructor">UserById(<span class="params">int</span> <span class="params">currentPage</span>,<span class="params">int</span> <span class="params">pageSize</span>)</span> throws IOException &#123;</span><br><span class="line">	</span><br><span class="line">		SqlSession session = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">		<span class="comment">//通过RowBounds对象实现分页</span></span><br><span class="line">		RowBounds row = <span class="keyword">new</span> <span class="constructor">RowBounds((<span class="params">currentPage</span>-1)</span>*pageSize),pageSize);</span><br><span class="line">	    </span><br><span class="line">		List&lt;User&gt; <span class="built_in">list</span>= session.selec<span class="constructor">List(<span class="string">"cn.lyb.user.Mapper.selectUser"</span>, <span class="params">null</span>,<span class="params">row</span>)</span>;</span><br><span class="line">		session.close<span class="literal">()</span>;</span><br><span class="line">		return <span class="built_in">list</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、使用注解实现MyBatis"><a href="#六、使用注解实现MyBatis" class="headerlink" title="六、使用注解实现MyBatis"></a>六、使用注解实现MyBatis</h1><p>1.编写dao层接口</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">UserDao</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    使用注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	@Select(<span class="string">"select * from user2"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.修改mybatis配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 定义dao层的文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.UserDao"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.调用</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws IOException &#123;</span><br><span class="line">	</span><br><span class="line">	SqlSession session = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	    传入dao接口类型，mybatis会通过动态代理</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	UserDao dao = session.get<span class="constructor">Mapper(UserDao.<span class="params">class</span>)</span>;</span><br><span class="line">	List&lt;User&gt; <span class="built_in">list</span> = dao.get<span class="constructor">List()</span>;</span><br><span class="line">	for(User u:<span class="built_in">list</span>) &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、联表处理"><a href="#七、联表处理" class="headerlink" title="七、联表处理"></a>七、联表处理</h1><h2 id="多对一的处理"><a href="#多对一的处理" class="headerlink" title="多对一的处理"></a>多对一的处理</h2><p>数据库设计</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">教师表 <span class="keyword">create</span> <span class="keyword">table</span> teacher (<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increament,</span><br><span class="line">                             <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                             primary <span class="keyword">key</span>(<span class="keyword">id</span>),</span><br><span class="line">                            );</span><br><span class="line">学生表 <span class="keyword">create</span> <span class="keyword">table</span> student (<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increament,</span><br><span class="line">                             <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                             tid <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                             primary <span class="keyword">key</span>(<span class="keyword">id</span>),</span><br><span class="line">                             <span class="keyword">foreign</span> <span class="keyword">key</span> (tid) <span class="keyword">references</span> teacher(<span class="keyword">id</span>),</span><br><span class="line">                            );</span><br></pre></td></tr></table></figure>
<p>实体类设计</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> Teacher teacher;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> teacher;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>对于多对一联表处理有两种实现方式</p>
<ul>
<li>按结果嵌套处理</li>
<li>按查询嵌套处理<h3 id="按结果嵌套处理"><a href="#按结果嵌套处理" class="headerlink" title="按结果嵌套处理"></a>按结果嵌套处理</h3></li>
</ul>
<p>编写映射文件(重点)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 按结果嵌套处理 --&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllStudent"</span> <span class="attr">resultMap</span>=<span class="string">"studentType"</span>&gt;</span></span><br><span class="line">		select s.id sid,s.name sname,s.tid stid,t.id tid,t.name tname from student s,teacher t where s.tid=t.id</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"studentType"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 关联对象property在Student中的属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span>//property就是实体类中的属性，javaType是属性的类型</span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="按查询嵌套处理"><a href="#按查询嵌套处理" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h3><p>编写映射文件(重点)</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 按查询嵌套处理 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"studentType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		select * from student</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"studentType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span>//将查询结果中的tid作为参数，调用另一个select语句查询教师信息</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		select * from teacher where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>dao层</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> StudentDao &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> List&lt;Student&gt; getAllStudent() throws IOException &#123;</span><br><span class="line">		SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">		List&lt;Student&gt; list = <span class="keyword">session</span>.selectList("cn.lyb.student.Mapper.getAllStudent");</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws IOException </span>&#123;</span><br><span class="line">	StudentDao dao  = <span class="keyword">new</span> StudentDao();</span><br><span class="line">	List&lt;Student&gt; <span class="built_in">list</span> = dao.getAllStudent(); </span><br><span class="line">	<span class="keyword">for</span>(Student s:<span class="built_in">list</span>) &#123;</span><br><span class="line">		System.out.<span class="built_in">println</span>(s);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一对多的处理"><a href="#一对多的处理" class="headerlink" title="一对多的处理"></a>一对多的处理</h2><p>实体类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Student&gt; <span class="built_in">list</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Student&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>对于一对多联表处理同样有两种实现方式</p>
<ul>
<li>按结果嵌套处理</li>
<li>按查询嵌套处理<h3 id="按结果嵌套处理-1"><a href="#按结果嵌套处理-1" class="headerlink" title="按结果嵌套处理"></a>按结果嵌套处理</h3></li>
</ul>
<p>编写映射文件(重点)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 按结果嵌套处理 --&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"teacherType"</span>&gt;</span></span><br><span class="line">		select s.id sid,s.name sname,s.tid stid,t.id tid,t.name tname from student s,teacher t where s.tid=t.id</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Teacher"</span> <span class="attr">id</span>=<span class="string">"teacherType"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">collections</span> <span class="attr">property</span>=<span class="string">"list"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span>&gt;</span>//property就是实体类中的属性，ofType是属性的类型</span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">collections</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="按查询嵌套处理-1"><a href="#按查询嵌套处理-1" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h3><p>编写映射文件(重点)</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 按查询嵌套处理 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"teacherType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		select * from teacher</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Teacher"</span> <span class="attr">id</span>=<span class="string">"teacherType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">collections</span> <span class="attr">property</span>=<span class="string">"list"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">odType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudent"</span>&gt;</span><span class="tag">&lt;/<span class="name">collections</span>&gt;</span>//将查询结果中的id作为参数，调用另一个select语句查询教师信息</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		select * from student where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="八、动态sql"><a href="#八、动态sql" class="headerlink" title="八、动态sql"></a>八、动态sql</h1><p>根据不同的查询条件，生成不同的sql语句 </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id="" result="User" paramterType="Map"&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> </span><br><span class="line">    &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test="name!=null"&gt;</span><br><span class="line">            <span class="type">name</span> = #&#123;<span class="type">name</span>&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="九-、逆向工程"><a href="#九-、逆向工程" class="headerlink" title="九 、逆向工程"></a>九 、逆向工程</h1><p>1.引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2 在工程下建立mbg.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> </span></span><br><span class="line"><span class="tag">    	<span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/s_02?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"lyb980328"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 指定javaBean生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> </span></span><br><span class="line"><span class="tag">    	<span class="attr">targetPackage</span>=<span class="string">"com.lyb.bean"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 指定sql映射文件生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> </span></span><br><span class="line"><span class="tag">    	<span class="attr">targetPackage</span>=<span class="string">"mapper"</span>  <span class="attr">targetProject</span>=<span class="string">".\src\main\resources"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 指定dao接口生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> </span></span><br><span class="line"><span class="tag">    	<span class="attr">targetPackage</span>=<span class="string">"com.lyb.dao"</span>  <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 指定每个表的生成策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tbl_emp"</span> <span class="attr">domainObjectName</span>=<span class="string">"Employee"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tbl_dept"</span> <span class="attr">domainObjectName</span>=<span class="string">"Department"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws SQLException, IOException, InterruptedException, InvalidConfigurationException, XMLParserException &#123;</span><br><span class="line">	   List&lt;<span class="keyword">String</span>&gt; warnings = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">	   boolean overwrite = <span class="literal">true</span>;</span><br><span class="line">	   File configFile = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">"mbg.xml"</span>);</span><br><span class="line">	   ConfigurationParser cp = <span class="keyword">new</span> <span class="type">ConfigurationParser</span>(warnings);</span><br><span class="line">	   Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">	   DefaultShellCallback callback = <span class="keyword">new</span> <span class="type">DefaultShellCallback</span>(overwrite);</span><br><span class="line">	   MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> <span class="type">MyBatisGenerator</span>(config, callback, warnings);</span><br><span class="line">	   myBatisGenerator.generate(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、映射文件标签引用"><a href="#十、映射文件标签引用" class="headerlink" title="十、映射文件标签引用"></a>十、映射文件标签引用</h1><h3 id="SQL文件顶级标签"><a href="#SQL文件顶级标签" class="headerlink" title="SQL文件顶级标签"></a>SQL文件顶级标签</h3><ul>
<li>cache  -  给定命名空间的缓存配置</li>
<li>cache-ref   -  其他空间命名缓存配置的引用</li>
<li>resultMap - 是最复杂也是最强大的元素， 用来描述如何从数据库结果集中来加载对象。</li>
<li>sql - 可被其他语句引用的可重用语句块</li>
<li>insert - 映射插入语句</li>
<li>update - 映射更新语句</li>
<li>delete - 映射删除语句</li>
<li>select - 映射查询语句</li>
</ul>
<hr>
<h3 id="顶级标签详解"><a href="#顶级标签详解" class="headerlink" title="顶级标签详解"></a>顶级标签详解</h3><h4 id="1-Select"><a href="#1-Select" class="headerlink" title="1.Select"></a>1.Select</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id = <span class="string">"select"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"hashmap"</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> id = <span class="meta">#&#123;id&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样的写法的意思是接受一个int（或Integer）类型的参数，并返回一个HashMap类型的对象，其中的键是列名，值便是结果行中的对应值，注意参数符号： #{id}</p>
</blockquote>
<p>子级标签</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;select</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"selectPerson"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"int"</span></span><br><span class="line">  <span class="attribute">parameterMap</span>=<span class="string">"deprecated"</span></span><br><span class="line">  <span class="attribute">resultType</span>=<span class="string">"hashmap"</span></span><br><span class="line">  <span class="attribute">resultMap</span>=<span class="string">"personResultMap"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"false"</span></span><br><span class="line">  <span class="attribute">useCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"10000"</span></span><br><span class="line">  <span class="attribute">fetchSize</span>=<span class="string">"256"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">resultSetType</span>=<span class="string">"FORWARD_ONLY"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>① id ： 在命名空间中唯一的标识符， 可以被用来引用这条语句</p>
<p> ② parameterType ： 将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为mybatis可以通过TypeHandler推断出具体传入语句的参数，默认为unset</p>
<p>③ resultType： 返回期望的类型的类的完全限定名或别名。 注意如果是集合情形，那应该是集合可以包含的类型，而不是集合本身。 使用resultType 或 resultMap， 但不能同时使用</p>
<p>④ resultMap ： 返回的map集合类型，使用resultType 或 resultMap， 但不能同时使用</p>
<p>⑤ flushCache： 将其设置为true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值为 false</p>
<p>⑥ useCache： 将其设置为true，将会导致本条语句的结果被二级缓存，默认值：对select标签元素设置为true</p>
<p>⑦ timeout： 这个设置是抛出异常之前，驱动程序等待数据库返回请求结果的秒数，默认值为unset（依赖驱动）</p>
<p>⑧ fetchSize：这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等</p>
<p>⑨ statementType： statement， prepared或callable的一个。</p>
<p>⑩ resultSetType：forward_only， scroll_sensitive或scroll_insensitive</p>
<hr>
<h4 id="2-Insert、-update、-和-delete语句"><a href="#2-Insert、-update、-和-delete语句" class="headerlink" title="2. Insert、 update、 和 delete语句"></a>2. Insert、 update、 和 delete语句</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;insert</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"insertAuthor"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"domain.blog.Author"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">keyProperty</span>=<span class="string">""</span></span><br><span class="line">  <span class="attribute">keyColumn</span>=<span class="string">""</span></span><br><span class="line">  <span class="attribute">useGeneratedKeys</span>=<span class="string">""</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"20"</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;update</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"updateAuthor"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"domain.blog.Author"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"20"</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;delete</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"deleteAuthor"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"domain.blog.Author"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"20"</span>&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="3-cache和cache-ref元素"><a href="#3-cache和cache-ref元素" class="headerlink" title="3.cache和cache-ref元素"></a>3.cache和cache-ref元素</h4><h5 id="1、-cache元素"><a href="#1、-cache元素" class="headerlink" title="1、 cache元素"></a>1、 cache元素</h5><blockquote>
<p>Mybatis 包含一个强大的、可配置并可定制的查询缓存机制。Mybatis3 的缓存实现有了许多的改进，使其更强大更容易配置。 默认情况下， 缓存是没有开启的，出了会话缓存以外。 会话缓存可以提高性能，且能解决循环依赖。 开启二级缓存，只需要在SQL映射文件中加入简单的一行。</p>
</blockquote>
<p> <cache /> 这句简单的语句作用如下：</p>
<p> ① 所有映射文件里的select语句的结果都会被缓存</p>
<p> ② 所有映射文件里的insert、update和delete语句执行都会清空缓存</p>
<p> ③ 缓存使用最近最少使用算法(LRU)来回收</p>
<p> ④ 缓存不会被设定的时间所清空</p>
<p> ⑤ 每个缓存可以存储1024个列表或对象的引用</p>
<p> ⑥ 缓存作为“读/写”缓存，意味着检索的对象不是共享的且可以被调用者安全地修改，而不会被其他调用者或线程干扰</p>
<p> 所有这些特性都可以通过cache元素进行修改</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;cache</span><br><span class="line">  <span class="attribute">eviction</span>=<span class="string">"FIFO"</span></span><br><span class="line">  <span class="attribute">flushInterval</span>=<span class="string">"60000"</span></span><br><span class="line">  <span class="attribute">size</span>=<span class="string">"512"</span></span><br><span class="line">  <span class="attribute">readOnly</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h5 id="2、cache-ref元素"><a href="#2、cache-ref元素" class="headerlink" title="2、cache-ref元素"></a>2、cache-ref元素</h5><blockquote>
<p>除了在某一个命名空间里使用cache元素配置或者刷新缓存。但有可能在不同的命名空间里共享同一个缓存配置或者实例。在这种情况下，则可以使用cache-ref元素来引用另一个缓存：</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;cache-<span class="keyword">ref</span> <span class="keyword">namespace</span>=<span class="string">""</span> /&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="4-Result-Map"><a href="#4-Result-Map" class="headerlink" title="4. Result Map"></a>4. Result Map</h4><blockquote>
<p>resultMap 元素的作用是将数据集的列映射到Map结果集，例   ：</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> hashedPassword;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(<span class="keyword">String</span> username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.username = username;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getHashedPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hashedPassword;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHashedPassword</span><span class="params">(<span class="keyword">String</span> hashedPassword)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hashedPassword = hashedPassword;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"selectUsers"</span> resultMap=<span class="string">"userResultMap"</span>&gt;</span><br><span class="line">  select user_id, user_name, hashed_password</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意返回的类型是一个Map ： userResultMap， 下面我们来定义一个resultMap</span></span><br><span class="line">&lt;resultMap id=<span class="string">"userResultMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">  &lt;id property=<span class="string">"id"</span> column=<span class="string">"user_id"</span> /&gt;</span><br><span class="line">  &lt;result property=<span class="string">"username"</span> column=<span class="string">"user_name"</span>/&gt;</span><br><span class="line">  &lt;result property=<span class="string">"password"</span> column=<span class="string">"hashed_password"</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<h5 id="ResultMap-元素内置标签"><a href="#ResultMap-元素内置标签" class="headerlink" title="ResultMap 元素内置标签"></a>ResultMap 元素内置标签</h5><p>1、 constructor - 用于在实例化类时，注入结果到构造方法中</p>
<p> ① idArg - ID 参数标记出作为ID 的结果可以帮助提高整体性能</p>
<p> ② arg - 将被注入到构造方法的一个普通结果</p>
<p> 2、 id - 一个ID结果，标记出作为ID的结果可以帮助提高整体性能</p>
<p> 3、 result - 注入到字段或javaBean属性的普通结果</p>
<p> 4、 association - 一个复杂类型的关联；许多结果将包装成这个类型</p>
<p> 嵌套结果映射 - 集合可以指定为一个resultMap元素，或者引用一个</p>
<p> 5、 collection - 一个复杂类型的集合</p>
<p> 嵌套结果映射 - 集合可以指定一个resultMap元素，或者引用一个</p>
<p> 6、 discriminator - 使用结果值来决定使用那个resultMap</p>
<p>case - 基于某些值的结果映射</p>
<p>  嵌套结果映射 - 一个case 也是一个映射它本身的结果，因此可以包含很多相同的元素，或者它可以参照一个外部的resultMap</p>
<h5 id="ResultMap-元素标签属性"><a href="#ResultMap-元素标签属性" class="headerlink" title="ResultMap 元素标签属性"></a>ResultMap 元素标签属性</h5><p>1、 id - 当前命名空间的一个唯一的标识，用于表示一个result map</p>
<p>2、 type - 类的完全限定名，或者一个类型别名</p>
<p>3、 autoMapping - 如果设置这个属性，Mybatis将会为这个ResultMap开启或者关闭自动映射，这个覆盖全局的属性默认值：unset</p>
<hr>
<h1 id="博客推荐连接"><a href="#博客推荐连接" class="headerlink" title="博客推荐连接"></a>博客推荐连接</h1><p><a href="https://blog.csdn.net/wfq784967698/article/details/78785398" target="_blank" rel="noopener">MyBatis框架核心之(一)基本使用</a></p>
<p><a href="https://blog.csdn.net/wfq784967698/article/details/78785458" target="_blank" rel="noopener">MyBatis框架核心之(二)Mapper配置文件使用接口映射</a></p>
<p><a href="https://blog.csdn.net/wfq784967698/article/details/78785576" target="_blank" rel="noopener">MyBatis框架核心之(三)注解使用接口映射</a></p>
<p><a href="https://blog.csdn.net/wfq784967698/article/details/78785598" target="_blank" rel="noopener">MyBatis框架核心之(四)Mapper文件使用resultMap及多表查询</a></p>
<p><a href="https://blog.csdn.net/wfq784967698/article/details/78786001" target="_blank" rel="noopener">MyBatis框架核心之(五)注解使用resultMap及多表查询</a></p>
<p><a href="https://blog.csdn.net/wfq784967698/article/details/78786021" target="_blank" rel="noopener">MyBatis框架核心之(八)Mybatis一级缓存与二级缓存以及自定义缓存</a></p>
<p><a href="https://blog.csdn.net/wfq784967698/article/details/78828776" target="_blank" rel="noopener">MyBatis框架核心之(十)Mybatis generator(MBG)代码生成工具</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMvc学习笔记</title>
    <url>/2020/01/23/SpringMvc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、-搭建"><a href="#一、-搭建" class="headerlink" title="一、 搭建"></a>一、 搭建</h1><a id="more"></a>

<h2 id="1-导入相关jar包"><a href="#1-导入相关jar包" class="headerlink" title="1.导入相关jar包"></a>1.导入相关jar包</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">commons-logging-1</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jstl-1</span><span class="selector-class">.2</span> (1)<span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aop-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-beans-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-core-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-expression-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-web-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-webmvc-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure>

<h2 id="2-配置web-xml"><a href="#2-配置web-xml" class="headerlink" title="2.配置web.xml"></a>2.配置web.xml</h2><blockquote>
<p>配置核心分发器</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-添加springmvc的配置文件"><a href="#3-添加springmvc的配置文件" class="headerlink" title="3.添加springmvc的配置文件"></a>3.添加springmvc的配置文件</h2><p>默认在WEB-INF 下添加[DispatcherServlet Name]-servlet.xml文件</p>
<p>ps：按照上面的配置就应该添加springmvc-servlet.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：也可以通过web.xml的参数配置将springmvc的配置文件和路径指定为其他</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-编写controller的java类"><a href="#4-编写controller的java类" class="headerlink" title="4.编写controller的java类"></a>4.编写controller的java类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		<span class="comment">//封装数据</span></span><br><span class="line">		mv.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>);</span><br><span class="line">		<span class="comment">//设置视图名</span></span><br><span class="line">		mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-编写springmvc的配置文件"><a href="#5-编写springmvc的配置文件" class="headerlink" title="5.编写springmvc的配置文件"></a>5.编写springmvc的配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置handelMapping --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置handelAdapter --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span> =<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置渲染器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">	    	<span class="comment">&lt;!-- 结果视图的前缀 --&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">	    	<span class="comment">&lt;!-- 结果视图的后缀 --&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置请求和处理器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="二、使用注解开发"><a href="#二、使用注解开发" class="headerlink" title="二、使用注解开发"></a>二、使用注解开发</h1><h2 id="1-导入相关jar包-1"><a href="#1-导入相关jar包-1" class="headerlink" title="1.导入相关jar包"></a>1.导入相关jar包</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">commons-logging-1</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jstl-1</span><span class="selector-class">.2</span> (1)<span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aop-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-beans-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-core-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-expression-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-web-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-webmvc-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure>

<h2 id="2-配置web-xml-1"><a href="#2-配置web-xml-1" class="headerlink" title="2.配置web.xml"></a>2.配置web.xml</h2><p><code>配置核心分发器</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-添加springmvc的配置文件-1"><a href="#3-添加springmvc的配置文件-1" class="headerlink" title="3.添加springmvc的配置文件"></a>3.添加springmvc的配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-编写controller的java类-1"><a href="#4-编写controller的java类-1" class="headerlink" title="4.编写controller的java类"></a>4.编写controller的java类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.stereotype.Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		<span class="comment">//封装数据</span></span><br><span class="line">		mv.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>);</span><br><span class="line">		<span class="comment">//设置视图名</span></span><br><span class="line">		mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-编写springmvc的配置文件"><a href="#4-编写springmvc的配置文件" class="headerlink" title="4.编写springmvc的配置文件"></a>4.编写springmvc的配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置渲染器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">	    	<span class="comment">&lt;!-- 结果视图的前缀 --&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">	    	<span class="comment">&lt;!-- 结果视图的后缀 --&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、Controller相关配置"><a href="#三、Controller相关配置" class="headerlink" title="三、Controller相关配置"></a>三、Controller相关配置</h1><h2 id="1-通过url对应bean"><a href="#1-通过url对应bean" class="headerlink" title="1. 通过url对应bean"></a>1. 通过url对应bean</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置handelMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置请求和处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上配置会通过/hello.do去寻找匹配id为hello.do的bean，这种配置适用于小型系统</p>
<h2 id="2-为url分配bean"><a href="#2-为url分配bean" class="headerlink" title="2. 为url分配bean"></a>2. 为url分配bean</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- key为请求url value为对应处理器的id --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/hello.do"</span>&gt;</span>HelloController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"HelloController"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>此配置还可以使用通配符，访问/hello.do时spring会把请求交给id为HelloController的bean处理</p>
<h2 id="3-url匹配bean-了解"><a href="#3-url匹配bean-了解" class="headerlink" title="3. url匹配bean(了解)"></a>3. url匹配bean(了解)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 请求为hello*.do都将被匹配 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloController"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-注解"><a href="#4-注解" class="headerlink" title="4. 注解"></a>4. 注解</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四-、结果跳转的方式"><a href="#四-、结果跳转的方式" class="headerlink" title="四 、结果跳转的方式"></a>四 、结果跳转的方式</h1><ol>
<li>设置ModelAndView对象根据视图解析器的前缀+view name+后缀跳转到指定的页面</li>
</ol>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">      ModelAndView <span class="keyword">mv</span> = <span class="keyword">new</span> ModelAndView()<span class="comment">;</span></span><br><span class="line"><span class="comment">//封装数据</span></span><br><span class="line"><span class="keyword">mv</span>.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>)<span class="comment">;</span></span><br><span class="line"><span class="comment">//设置视图名</span></span><br><span class="line"><span class="keyword">mv</span>.setViewName(<span class="string">"hello"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>通过servlet Api来实现跳转(不需要视图解析器)</li>
</ol>
<ul>
<li>通过HttpServletResponse的输出流</li>
<li>通过HttpServletResponse的重定向</li>
<li>通过HttpServletRequse实现请求转发</li>
</ul>
<ol start="3">
<li>通过spring mvc来实现请求转发和重定向(没有视图解析器)</li>
</ol>
<ul>
<li>转发的实现 1</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>转发的实现 2</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重定向的实现</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>通过spring mvc来实现请求转发和重定向(使用视图解析器)</li>
</ol>
<ul>
<li>转发的实现</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：重定向不需要视图解析器</p>
</blockquote>
<h1 id="五-、数据的处理"><a href="#五-、数据的处理" class="headerlink" title="五 、数据的处理"></a>五 、数据的处理</h1><h2 id="1-提交数据的处理"><a href="#1-提交数据的处理" class="headerlink" title="1.提交数据的处理"></a>1.提交数据的处理</h2><ul>
<li>提交的域名称与方法参数名称一样</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/springMvc/hello.<span class="keyword">do</span>?<span class="type">name</span>=lyb</span><br><span class="line"></span><br><span class="line">@RequesMapping("/hello")</span><br><span class="line"><span class="built_in">public</span> String hello(String <span class="type">name</span>)&#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span>);</span><br><span class="line">    <span class="keyword">return</span> "index.jsp";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>提交的域名称与方法参数名称不一样</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/springMvc/hello.<span class="keyword">do</span>?uname=lyb</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello(<span class="meta">@RequesParam(<span class="meta-string">"uname"</span>)</span>String name)&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果提交的是一个对象，要求表单属性名与对象参数名一致，方法参数用对象名</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    privaye <span class="keyword">String</span> pwd;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/springMvc/<span class="keyword">login</span>.<span class="keyword">do</span>?<span class="type">name</span>=lyb&amp;pwd=<span class="number">0328</span></span><br><span class="line"></span><br><span class="line">@RequesMapping("/login")</span><br><span class="line"><span class="built_in">public</span> String <span class="keyword">login</span>(<span class="keyword">User</span> <span class="keyword">user</span>)&#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">    <span class="keyword">return</span> "index.jsp";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-将数据提交到UI层"><a href="#2-将数据提交到UI层" class="headerlink" title="2.将数据提交到UI层"></a>2.将数据提交到UI层</h2><ul>
<li>1.通过ModelAndView—需要视图解析器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		<span class="comment">//封装数据</span></span><br><span class="line">		<span class="comment">//相当于req.setAttribute("msg", "hello springmvc");</span></span><br><span class="line">		mv.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>);</span><br><span class="line">		<span class="comment">//设置视图名</span></span><br><span class="line">		mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>2.通过ModelMap—不需要视图解析器(ModelMap需要作为方法参数)</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span>&#123;</span></span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">hello</span><span class="params">(<span class="keyword">String</span> name,ModelMap model)</span> throws Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//封装数据</span></span><br><span class="line">		model.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、-乱码的解决和Restful"><a href="#六、-乱码的解决和Restful" class="headerlink" title="六、 乱码的解决和Restful"></a>六、 乱码的解决和Restful</h1><h2 id="1-乱码的解决"><a href="#1-乱码的解决" class="headerlink" title="1.  乱码的解决"></a>1.  乱码的解决</h2><p>通过过滤器来解决<code>post提交方式</code>产生的乱码，springMvc提供了<code>CharacterEncodingFilter</code>来解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/*配置在web.xml里面，要在servlet之前配置*/</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span></span></span><br></pre></td></tr></table></figure>
<p>get方式通过自定义过滤器解决</p>
<h2 id="2-Restful风格url"><a href="#2-Restful风格url" class="headerlink" title="2. Restful风格url"></a>2. Restful风格url</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http://localhost:8080/springMvc/lyb/123/delete.do</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/&#123;name&#125;/&#123;id&#125;/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String name ,@PathVariable <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index.jsp"</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七-、文件上传"><a href="#七-、文件上传" class="headerlink" title="七 、文件上传"></a>七 、文件上传</h1><h2 id="1-导入相关jar包-2"><a href="#1-导入相关jar包-2" class="headerlink" title="1 .导入相关jar包"></a>1 .导入相关jar包</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*struts2的jar包*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">commons-fileupload-1</span><span class="selector-class">.4</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">commons-io-2</span><span class="selector-class">.6</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure>
<h2 id="2-在springMvc里配置解析器"><a href="#2-在springMvc里配置解析器" class="headerlink" title="2. 在springMvc里配置解析器"></a>2. 在springMvc里配置解析器</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"multipartResolver"</span> <span class="built_in">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;   </span><br><span class="line">      &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"maxUploadSize"</span> value =<span class="string">"10485760000"</span>&gt;&lt;/<span class="keyword">property</span>&gt; </span><br><span class="line">      &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"maxInMemorySize"</span> value =<span class="string">"40960"</span>&gt;&lt;/<span class="keyword">property</span>&gt; </span><br><span class="line">      &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"defaultEncoding"</span> value=<span class="string">"utf-8"</span>&gt;&lt;/<span class="keyword">property</span>&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-编写controller代码"><a href="#3-编写controller代码" class="headerlink" title="3. 编写controller代码"></a>3. 编写controller代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> &#123;</span></span><br><span class="line">	@RequestMapping(<span class="string">"/upload"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)CommonsMultipartFile file,HttpServletRequest req)</span> throws IOException</span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取文件名</span></span><br><span class="line">		<span class="keyword">String</span> fileName = file.getOriginalFilename();</span><br><span class="line">		<span class="comment">//获取上传路径</span></span><br><span class="line">		<span class="keyword">String</span> path = req.getRealPath(<span class="string">"/fileUpload"</span>);</span><br><span class="line">		<span class="comment">//获取文件输入流</span></span><br><span class="line">		BufferedInputStream bis =null;</span><br><span class="line">		<span class="comment">//上传文件路径流</span></span><br><span class="line">		BufferedOutputStream bos = null; </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">-1</span>;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			bis = <span class="keyword">new</span> BufferedInputStream(file.getInputStream());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> <span class="built_in">File</span>(path,fileName)));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">while</span>((len=bis.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">			bos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, len);</span><br><span class="line">			bos.<span class="built_in">flush</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		bis.<span class="built_in">close</span>();</span><br><span class="line">		bos.<span class="built_in">close</span>();</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-编写上传页面"><a href="#4-编写上传页面" class="headerlink" title="4. 编写上传页面"></a>4. 编写上传页面</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;form action="upload.do" <span class="keyword">method</span>="post" enctype="multipart/form-data"&gt;</span><br><span class="line">	&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="file"/&gt;</span><br><span class="line">	&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="上传"/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h1 id="八-、ajax-和-json的处理"><a href="#八-、ajax-和-json的处理" class="headerlink" title="八 、ajax 和 json的处理"></a>八 、ajax 和 json的处理</h1><h2 id="1-用HttpServletResponse处理ajax请求"><a href="#1-用HttpServletResponse处理ajax请求" class="headerlink" title="1 .用HttpServletResponse处理ajax请求"></a>1 .用HttpServletResponse处理ajax请求</h2><p>jsp页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">"#but"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			$.post(<span class="string">"ajax.do"</span>,&#123;<span class="string">'name'</span>:$(<span class="string">"#tx"</span>).val()&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">				</span><br><span class="line">				alert(data);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"tx"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> <span class="attr">id</span>=<span class="string">"but"</span>/&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>controller代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> &#123;</span></span><br><span class="line">	@RequestMapping(<span class="string">"/ajax"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ajax</span><span class="params">(<span class="keyword">String</span> name,HttpServletResponse resp)</span> throws IOException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"lyb"</span>))&#123;</span><br><span class="line">			resp.getWriter().<span class="built_in">println</span>(<span class="string">"true"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			resp.getWriter().<span class="built_in">println</span>(<span class="string">"false"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-springMvc处理json"><a href="#2-springMvc处理json" class="headerlink" title="2. springMvc处理json"></a>2. springMvc处理json</h2><ol>
<li><p>导入jackson jar包</p>
<p>导入jackson jar包</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">jackson-annotations-2</span><span class="selector-class">.9</span><span class="selector-class">.8</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jackson-core-2</span><span class="selector-class">.9</span><span class="selector-class">.8</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jackson-databind-2</span><span class="selector-class">.9</span><span class="selector-class">.8</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置json转换器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于将对象转成json--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stringConverter"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jsonConverter"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>controller代码</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> JsonController &#123;</span><br><span class="line">	</span><br><span class="line">	@RequestMapping("/json")</span><br><span class="line">	@ResponseBody <span class="comment">------------------注意加上这个注解，代表返回一个实体对象</span></span><br><span class="line">	<span class="built_in">public</span> List&lt;<span class="keyword">User</span>&gt; <span class="type">json</span>()&#123;</span><br><span class="line">		</span><br><span class="line">		List&lt;<span class="keyword">User</span>&gt; list = <span class="built_in">new</span> ArrayList&lt;<span class="keyword">User</span>&gt;();</span><br><span class="line">		list.<span class="keyword">add</span>(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">1</span>,"lyb","123"));</span><br><span class="line">		list.<span class="keyword">add</span>(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">2</span>,"mike","456"));</span><br><span class="line">		list.<span class="keyword">add</span>(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">3</span>,"nick","789"));</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>jsp页面代码</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">"#but"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			$.post(<span class="string">"json.do"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> con = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">					con+="<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].id+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].name+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].pwd+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>"</span></span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="javascript">				$(<span class="string">"#context"</span>).html(con);</span></span><br><span class="line">				</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"but"</span> <span class="attr">value</span>=<span class="string">"获取名单"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"context"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-HttpMessageConverter原理"><a href="#3-HttpMessageConverter原理" class="headerlink" title="3. HttpMessageConverter原理"></a>3. HttpMessageConverter原理</h2><p>HttpMessageConverter是spring 3.0新增加的一个接口，负责将请求转换成一个对象（类型为T）,将对象(类型为T)转换成一个响应消息</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">S<span class="function"><span class="title">pringMvc</span>--java对象--&gt;</span>HttpMessageConverter</span><br><span class="line">H<span class="function"><span class="title">ttpMessageConverter</span>--&gt;</span>HttpOutputMessage</span><br><span class="line">H<span class="function"><span class="title">ttpOutputMessage</span>--&gt;</span>响应报文</span><br><span class="line">请求报文--&gt;HttpInputMessage</span><br><span class="line">H<span class="function"><span class="title">ttpInputMessage</span>--&gt;</span>HttpMessageConverter</span><br><span class="line">H<span class="function"><span class="title">ttpMessageConverter</span>--java对象--&gt;</span>SpringMvc</span><br></pre></td></tr></table></figure>
<p>为了达到转换的效果，Spring提供了两种途径</p>
<ul>
<li>使用@RequestBody/@ResponseBody对目标方法进行标注</li>
<li>使用HttpEntity<T>/ResponseEntity<T>作为入参或者返回值</li>
</ul>
<p>Spring会根据请求头或者响应头的Accpet属性进行匹配HttpMessageConverter，进而根据参数的类型或者泛型的类型过滤得到匹配的HttpMessageConverter，若找不到将报错</p>
<p>下面是使用ResponseEntity<T>来做文件下载的例子：</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@RequestMapping</span>(<span class="string">"/getFile"</span>)</span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; getFile(HttpSession session) throws IOException&#123;</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		ServletContext context = session.getServletContext();</span><br><span class="line">		InputStream <span class="keyword">is</span> = context.getResourceAsStream(<span class="string">"/file/abc.txt"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">byte</span>[] <span class="keyword">body</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">is</span>.available()];</span><br><span class="line">		<span class="keyword">is</span>.read(<span class="keyword">body</span>);</span><br><span class="line">		</span><br><span class="line">		HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">		headers.add(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=abc.txt"</span>);</span><br><span class="line">		</span><br><span class="line">		HttpStatus status =  HttpStatus.OK;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; response = <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">body</span>, headers, status);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="九、拦截器"><a href="#九、拦截器" class="headerlink" title="九、拦截器"></a>九、拦截器</h1><h2 id="1-实现拦截器"><a href="#1-实现拦截器" class="headerlink" title="1. 实现拦截器"></a>1. 实现拦截器</h2><ol>
<li>实现HandlerInterceptor接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在请求处理器处理之前执行</span></span><br><span class="line">	<span class="comment">//当返回false则不会执行下一个interceptor ,反之执行下一个interceptor</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"请求处理之前"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//在请求处理器处理之后执行</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"请求处理之后"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//在DispatchServlet处理之后执行 -------清理工作</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在springmvc配置文件里配置拦截器</li>
</ol>
<blockquote>
<p>ps:要添加mvc头文件</p>
</blockquote>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"</span></span><br><span class="line">        http:<span class="comment">//www.springframework.org/schema/mvc</span></span><br><span class="line">        http:<span class="comment">//www.springframework.org/schema/mvc/spring-mvc.xsd"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			/** 代表路径及其子路径</span></span><br><span class="line"><span class="comment">			/admin/* 代表拦截/admin/a  /admin/b.....</span></span><br><span class="line"><span class="comment">			/admin/** 代表拦截/admin/a  /admin/a/b/c....	</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>		</span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-如果被拦截要指定页面"><a href="#2-如果被拦截要指定页面" class="headerlink" title="2. 如果被拦截要指定页面"></a>2. 如果被拦截要指定页面</h2><p>可以使用HttpServletRequest和HttpServletResponse实现转发或者重定向</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在请求处理器处理之前执行</span></span><br><span class="line"><span class="comment">//当返回false则不会执行下一个interceptor ,反之执行下一个interceptor</span></span><br><span class="line">@Override</span><br><span class="line">public boolean pre<span class="constructor">Handle(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>, Object <span class="params">arg2</span>)</span> throws Exception &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请求处理之前"</span>);</span><br><span class="line">	resp.send<span class="constructor">Redirect(<span class="params">req</span>.<span class="params">getContextPath</span>()</span>+<span class="string">"/index.jsp"</span>);</span><br><span class="line">	return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十-整合-Spring、SpringMvc、MyBatis"><a href="#十-整合-Spring、SpringMvc、MyBatis" class="headerlink" title="十 整合 Spring、SpringMvc、MyBatis"></a>十 整合 Spring、SpringMvc、MyBatis</h1><ol>
<li><p>导入相关依赖</p>
</li>
<li><p>编写配置文件</p>
</li>
</ol>
<ul>
<li>web.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring_SpringMvc_MyBatis<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- springMvc配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>	</span><br><span class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>mvc.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 扫描包下的注解 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>applicationContext.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置dataSource --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.cfg.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 声明式事务 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 将事务通知切入方法 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution (* com.lyb.service.iml.*.* (..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>mybatis.cfg.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  </span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  </span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.lyb.vo"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 填写mapper文件的所在位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/lyb/vo/user.mapper.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>具体代码</li>
</ol>
<ul>
<li>实体类</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.lyb.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pwd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>mapper文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  </span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lyb.vo.user.mapper"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">		select * from user</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>dao层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span>  <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> getSqlSession().selectList(<span class="string">"com.lyb.vo.user.mapper.list"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>service层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userdao;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserdao</span><span class="params">(UserDao userdao)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userdao = userdao;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> userdao.list();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>controller</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	@Autowired</span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userService = userService;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@RequestMapping(<span class="string">"/list"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">list</span><span class="params">(ModelMap <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		List&lt;User&gt; <span class="built_in">list</span> = userService.<span class="built_in">list</span>();</span><br><span class="line">		<span class="built_in">map</span>.addAttribute(<span class="string">"user"</span>, <span class="built_in">list</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>jsp页面</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="utf-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user &#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"bean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;bean.id &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;bean.name &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;bean.pwd &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>项目结构</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/23/1Vy8y9.png" alt="image"></p>
<h1 id="十一、-异常处理"><a href="#十一、-异常处理" class="headerlink" title="十一、 异常处理"></a>十一、 异常处理</h1><ol>
<li>springMvc 是使用<code>HandlerExceptionResolver</code>接口来处理异常</li>
</ol>
<hr>
<ol start="2">
<li>springMvc 是如何装配异常？</li>
</ol>
<ul>
<li>DispatcherServlet默认装配HandlerExceptionResolver</li>
</ul>
<p>1) 没有使用&lt;mvc:annotation-driven /&gt;配置 会装配以下实现类</p>
<ul>
<li>AnnotationMethodHandlerExceptionResolver(过期)</li>
<li>ResponseStatusExceptionResolver</li>
<li>DefaultHandlerExceptionResolver</li>
</ul>
<p>2) 使用&lt;mvc:annotation-driven /&gt;配置【推荐】 会装配以下实现类</p>
<ul>
<li><p>HandlerExceptionResolverComposite</p>
</li>
<li><p>ResponseStatusExceptionResolver</p>
</li>
<li><p>DefaultHandlerExceptionResolver</p>
</li>
</ul>
<hr>
<ol start="3">
<li>通过注解实现异常处理</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 1 @ExceptionHandler 在方法参数中可以加入Exception类型参数 及对应的异常对象</span></span><br><span class="line"><span class="comment">	 * 2 在方法入参中不能使用map 、 ModelMap做为参数. 如果要返回异常对象到页面可以使用ModelAndView</span></span><br><span class="line"><span class="comment">	 * 3 @ExceptionHandler 处理异常有优先级的问题，会优先匹配离所抛异常近的处理方法</span></span><br><span class="line"><span class="comment">	 * @param e</span></span><br><span class="line"><span class="comment">	 * @return</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	@<span class="constructor">ExceptionHandler(&#123;ArithmeticException.<span class="params">class</span>&#125;)</span></span><br><span class="line">	public ModelAndView <span class="keyword">exception</span><span class="constructor">Deal(Exception <span class="params">e</span>)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"出异常了"</span>+e.get<span class="constructor">Message()</span>);</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"exception"</span>, <span class="params">e</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"error"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span></span><br><span class="line">	public String test<span class="constructor">Exception(<span class="params">int</span> <span class="params">num</span>,ModelMap <span class="params">map</span>)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		map.add<span class="constructor">Attribute(<span class="string">"res"</span>, 10<span class="operator">/</span><span class="params">num</span>)</span>;	</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"result:"</span>+<span class="number">10</span>/num);</span><br><span class="line">		</span><br><span class="line">		return <span class="string">"forward:/success.jsp"</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>以上异常处理方法只能与抛异常的方法处于同一个类，那么如何实现全局的异常处理呢?</p>
<p>实现全局异常处理</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*创建一个类使用@ControllerAdvice注解即可 实现全局异常处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@ControllerAdvice</span><br><span class="line">public <span class="keyword">class</span> TestExceptionHandler &#123;</span><br><span class="line">	</span><br><span class="line">	@<span class="constructor">ExceptionHandler(&#123;ArithmeticException.<span class="params">class</span>&#125;)</span></span><br><span class="line">	public ModelAndView <span class="keyword">exception</span><span class="constructor">Deal(Exception <span class="params">e</span>)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"出异常了"</span>+e.get<span class="constructor">Message()</span>);</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"exception"</span>, <span class="params">e</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"error"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ol start="4">
<li>@ResponseStatus的使用</li>
</ol>
<ul>
<li>注解到类上面 </li>
</ul>
<p>这个注解可以用来定制异常的相应状态码和响应消息,当抛出下面这个异常时会携带响应的状态码(403)和响应消(用户名和密码不匹配)</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(value=<span class="type">HttpStatus</span>.<span class="type">FORBIDDEN</span>,reason=<span class="string">"用户名和密码不匹配"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserNameNotMatchPwdException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *      </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注解到方法上面 </li>
</ul>
<p>注解到方法上和注解到类上面的使用方式是一样的</p>
<ol start="5">
<li>SimpleMappingExceptionResolver的使用</li>
</ol>
<p>使用SimpleMappingExceptionResolver来实现出现异常时页面的跳转</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mvc配置文件</span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置SimpleMappingExceptionResolver来映射异常 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置异常对象名 可以用于页面el表达式的获取 ，默认值：exception --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionAttribute"</span> <span class="attr">value</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置具体异常映射页面 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">props</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.ArrayIndexOutOfBoundsException"</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="十二、-springMvc的运行流程"><a href="#十二、-springMvc的运行流程" class="headerlink" title="十二、 springMvc的运行流程"></a>十二、 springMvc的运行流程</h1><p><img src="https://s2.ax1x.com/2020/01/23/1V27gU.png" alt=""></p>
<h1 id="十三、对REST风格的支持"><a href="#十三、对REST风格的支持" class="headerlink" title="十三、对REST风格的支持"></a>十三、对REST风格的支持</h1><ul>
<li>HiddenHttpMethodFilter</li>
</ul>
<p>浏览器的form表单只支持get、post请求。而delete、put等method不支持。Spring3.0添加了一个过滤器，可以将这些请求转换为标准的http方法。</p>
<hr>
<p>使用HiddenHttpMethodFilter过滤器转换请求格式</p>
<ol>
<li>在web.xml文件里配置过滤器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  		配置org.springframework.web.filter.HiddenHttpMethodFilter </span></span><br><span class="line"><span class="comment">  		作用：可以将post请求转换为delete、put方式请求</span></span><br><span class="line"><span class="comment">  	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>学习表单的写法</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="comment">-- </span></span><br><span class="line">		将post请求转为put请求</span><br><span class="line">		<span class="number">1</span> 表单请求方法设置为post</span><br><span class="line">		<span class="number">2</span> 设置隐藏域  <span class="type">name</span>="_method" <span class="keyword">value</span>="PUT"</span><br><span class="line">	 <span class="comment">--&gt;</span></span><br><span class="line">	&lt;form action="test/1" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">		&lt;<span class="keyword">input</span> <span class="keyword">type</span>="hidden" <span class="type">name</span>="_method" <span class="keyword">value</span>="PUT"&gt;</span><br><span class="line">		&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试put方法" /&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!<span class="comment">-- </span></span><br><span class="line">		将post请求转为<span class="keyword">delete</span>请求</span><br><span class="line">		<span class="number">1</span> 表单请求方法设置为post</span><br><span class="line">		<span class="number">2</span> 设置隐藏域  <span class="type">name</span>="_method" <span class="keyword">value</span>="DELETE"</span><br><span class="line">	 <span class="comment">--&gt;</span></span><br><span class="line">	&lt;form action="test/1" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">		&lt;<span class="keyword">input</span> <span class="keyword">type</span>="hidden" <span class="type">name</span>="_method" <span class="keyword">value</span>="DELETE"&gt;</span><br><span class="line">		&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试delete方法" /&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;form action="test" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">		&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试post方法" /&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	&lt;form action="test/1" <span class="keyword">method</span>="get"&gt;</span><br><span class="line">		&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试put方法" /&gt;</span><br><span class="line">	&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>REST风格与传统风格对比</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">      REST                 传统</span><br><span class="line">新增 <span class="built_in">/user </span>   POST       /user</span><br><span class="line">删除 /user/1  DELETE     /delete?<span class="attribute">id</span>=1</span><br><span class="line">修改 /user/1  PUT        /update?<span class="attribute">id</span>=1</span><br><span class="line">查询 /user/1  <span class="builtin-name">GET</span>        /select?<span class="attribute">id</span>=1</span><br></pre></td></tr></table></figure>

<p>使用REST风格后对应的业务用表单提交方式区分，springMvc使用@RequestMapping(RequsetMethod=””)进行区分处理</p>
<h1 id="十四、常用注解"><a href="#十四、常用注解" class="headerlink" title="十四、常用注解"></a>十四、常用注解</h1><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@RequestParam</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>作用：绑定参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>1 value:      设置参数名对应表单上传的属性名，没有设置的或表单属性名需要与方法参数名相同</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>2 required：  设置参数是否必须存在，默认为true</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>3 defaultValue： 设置默认值，可以解决基本数据类型的传参不存在问题</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line">public <span class="built_in">String</span> testParam(</span><br><span class="line">    <span class="meta">@RequestParam</span>(value=<span class="string">"id"</span>,required=<span class="keyword">false</span>,defaultValue=<span class="string">"0"</span>) <span class="built_in">int</span> id) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">   <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    * </span>@RequestHeader</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>作用：绑定请求头参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>用法：同requestParam用法一致</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param lang</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">public <span class="built_in">String</span> testHeader(<span class="meta">@RequestHeader</span>(value=<span class="string">"Accept-Language"</span>) <span class="built_in">String</span> lang) &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@CookieValue</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>作用：获取指定的cookie值</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>用法：同requestParam用法一致</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@param lang</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	public <span class="built_in">String</span> testCookie(<span class="meta">@CookieValue</span>(<span class="string">"JSESSIONID"</span>) <span class="built_in">String</span> lang) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@SessionAttributes</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>作用:将指定的数据存放在Session域里(注意：也会同时存放在request域里),便于多个请求共享参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>1 value: 指定属性名</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>2 type:  指定属性的类型</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@author liuyoubin</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value= &#123;<span class="string">"name"</span>&#125;,types= &#123;<span class="built_in">String</span><span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Controller</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">	public <span class="built_in">String</span> handleRequest(<span class="built_in">String</span> name,ModelMap model) throws Exception &#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ModelAtrribute"><a href="#ModelAtrribute" class="headerlink" title="@ModelAtrribute"></a>@ModelAtrribute</h2><p> 方法POJO参数获取的实现流程</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>被@ModelAttribute标记的方法，会在在每个目标方法执行之前被SpringMvc调用</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param id</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param map</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line">public <span class="keyword">void</span> getUser(<span class="meta">@RequestParam</span>(value=<span class="string">"id"</span>,required=<span class="keyword">false</span>) Integer id,</span><br><span class="line">		<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; map) &#123;</span><br><span class="line">	System.err.println(<span class="string">"getUser 方法被调用"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//模拟数据库查询</span></span><br><span class="line">	<span class="keyword">if</span>(id!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		System.err.println(<span class="string">"用户查询"</span>);</span><br><span class="line">		User user = <span class="keyword">new</span> User(id, <span class="string">"lyb"</span>, <span class="string">"0328"</span>);</span><br><span class="line">		map.put(<span class="string">"user"</span>, user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>运行流程</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>1 执行@ModelAttribute标记的方法，从数据库中取出对象，把对象放到Map中 键为 user</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>2 SpringMvc 从Map 中取出User对象，接收从表单提交过来的数据，并把表单数据赋给User对象的对应属性</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>3 SpringMvc 把User对象传到目标方法参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>注意：@ModelAttribute标记的方法中，对象放到Map时键名必须时目标方法类型第一个字母小写一致。 例如：User-&gt;user</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>源码分析流程</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>1 调用@ModelAttribute注解修饰的方法，实际上是把@ModelAttribute方法中Map中的数据放到implicitModel中</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>2 解析请求处理器的目标参数，实际上该目标参数来源于WebDataBinder对象的target属性</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 		</span>1) 创建WebDataBinder对象</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 			</span>① 确定objectName属性 ：</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 					</span>&gt;若传入的attrName 为空串，则为类名第一个字母小写。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 					</span>&gt;若目标方法的POJO属性使用了@ModelAttribute来修饰，则attrName为该注解的value值</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 			</span>② 确定target属性：</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 					</span>&gt;在implicitModel中查找attrName对应的属性值，若存在，则ok</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 					</span>&gt;若不存在则验证当前的controller类是否使用了@SessionAttributes修饰，</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 						</span>如果是则尝试从Session中获取attrName对应的属性值。 如果获取不到则会抛出异常</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 					</span>&gt;如果controller类没有使用@SessionAttributes修饰 或者 @SessionAttributes 没有使用value值指定的键和attrName匹配</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 						</span>则通过反射创建了POJO对象	</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 		</span>2) SpringMvc把表单的请求参数赋给 WebDataBinder对象的target对应的属性</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 		</span>3) SpringMvc会把WebDataBinder的 sttrName 和 target 给到 implicitModel 。进而传到request域中</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * 		</span>4) 把WebDataBinder 的target作为参数传递给目标方法入参</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param user</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updataUser"</span>)</span><br><span class="line">public <span class="built_in">String</span> upddataUser(User user) &#123;</span><br><span class="line">	System.out.println(user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">   &lt;form action="updataUser.do" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">	id: &lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="id" <span class="keyword">value</span>="2"/&gt;</span><br><span class="line">	用户名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="name" <span class="keyword">value</span>="ss"/&gt;</span><br><span class="line">	&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<h2 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h2><p>由@InitBinder标识的方法，可以对WebDataBinder对象进行初始化。WebDataBinder是DataBinder的子类，用于完成表单字段到javaBean属性的绑定</p>
<ul>
<li>@InitBinder方法不能有返回值，必须声明为void</li>
<li>@InitBinder方法的参数通常是WebDataBinder</li>
</ul>
<h2 id="DateTimeFormat-pattern-””"><a href="#DateTimeFormat-pattern-””" class="headerlink" title="@DateTimeFormat(pattern=””)"></a>@DateTimeFormat(pattern=””)</h2><p>将注解到Date属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为birth的字符串按照yyyy-MM-dd的格式转换为Date类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @<span class="constructor">DateTimeFormat(<span class="params">pattern</span>=<span class="string">"yyyy-MM-dd"</span>)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>
<h2 id="NumberFormat-pattern-””"><a href="#NumberFormat-pattern-””" class="headerlink" title="@NumberFormat(pattern=””)"></a>@NumberFormat(pattern=””)</h2><p>将注解到Number子类属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为salary的字符串按照#,###,###.#的格式转换为float类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@<span class="constructor">NumberFormat(<span class="params">pattern</span>=<span class="string">"#,###,###.#"</span>)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">float</span> salary;</span><br></pre></td></tr></table></figure>

<h1 id="十五-视图"><a href="#十五-视图" class="headerlink" title="十五 视图"></a>十五 视图</h1><p><img src="https://s2.ax1x.com/2020/01/23/1VhGad.png" alt="image"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.ax1x.com/2020/01/23/1VhtPI.png" alt="image"></h2><h4 id="InternalResourceViewResolver"><a href="#InternalResourceViewResolver" class="headerlink" title="InternalResourceViewResolver"></a>InternalResourceViewResolver</h4><ul>
<li>如果项目中使用了JSTL，则SpringMvc会自动把InternalResourceView转为JstlView</li>
<li>若使用了JSTL中的fmt标签则需要在SpringMvc的配置文件中配置==国际化资源文件==<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 国际化资源文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
例子<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">fmt:message</span> <span class="attr">key</span>=<span class="string">"i18n.username"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">fmt:message</span> <span class="attr">key</span>=<span class="string">"i18n.password"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>
springMvc会去src下找[i18n+对应的语言缩写.porperties]文件<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[i18n_zh_CN.properties]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">i18n.username</span>=\u7528\u6237\u540D</span><br><span class="line"><span class="attr">i18n.password</span>=\u5BC6\u7801</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="mvc-view-controller标签"><a href="#mvc-view-controller标签" class="headerlink" title="mvc_view_controller标签"></a>mvc_view_controller标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置直接转发的页面，不需要经过具体的handler --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/success"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在实际开发中要配置以下标签使用，否则注解mapping映射会失败--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="十六、-form表单"><a href="#十六、-form表单" class="headerlink" title="十六、 form表单"></a>十六、 form表单</h1><p>可以使用SpringMvc提供的form表单进行表单页面的快速开发</p>
<ul>
<li>引入资源文件<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>注意form表单需要handler提供一个bean模型用于存放表单属性<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value=<span class="string">"/emp"</span>,method=RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">inputPage</span><span class="params">(Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"departments"</span>, departmentDao.getAllDepartments());</span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"employee"</span>, <span class="keyword">new</span> Employee()); <span class="comment">//提供表单bean模型</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"input"</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">		1.使用form标签可以进行表单的快速开发</span></span><br><span class="line"><span class="xml">	    2. 注意：可以通过modelAttribute属性指定模型属性</span></span><br><span class="line"><span class="xml">	    	     如果没有指定属性，则默认从request对象中读取command的表单bean</span></span><br><span class="line"><span class="xml">	    	     如果再没有的话，则会发生错误</span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	 --&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">form:form</span> <span class="attr">action</span>=<span class="string">"emp"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">modelAttribute</span>=<span class="string">"employee"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- path属性对应html标签的name属性 --&gt;</span></span></span><br><span class="line"><span class="xml">		用户名：<span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"lastName"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">br</span>&gt;</span> </span></span><br><span class="line"><span class="xml">		email:<span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"email"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript">			HashMap&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span></span><br><span class="line"><span class="vbscript">			map.put(<span class="string">"男"</span>, <span class="string">"男"</span>);</span></span><br><span class="line"><span class="vbscript">			map.put(<span class="string">"女"</span>, <span class="string">"女"</span>);</span></span><br><span class="line"><span class="vbscript">			<span class="built_in">request</span>.setAttribute(<span class="string">"map"</span>, map);</span></span><br><span class="line"><span class="vbscript">		%&gt;</span></span><br><span class="line"><span class="xml">		性别：<span class="tag">&lt;<span class="name">form:radiobuttons</span> <span class="attr">path</span>=<span class="string">"gener"</span> <span class="attr">items</span>=<span class="string">"$&#123;map &#125;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		部门：<span class="tag">&lt;<span class="name">form:select</span> <span class="attr">path</span>=<span class="string">"department.id"</span> <span class="attr">items</span>=<span class="string">"$&#123;departments &#125;"</span></span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">			itemLabel="departmentName" itemValue="id"&gt;<span class="tag">&lt;/<span class="name">form:select</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"添加"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="十七、-类型转换器"><a href="#十七、-类型转换器" class="headerlink" title="十七、 类型转换器"></a>十七、 类型转换器</h1><h2 id="ConversionSerivce"><a href="#ConversionSerivce" class="headerlink" title="ConversionSerivce"></a>ConversionSerivce</h2><ul>
<li><h4 id="ConversionService是Spring类型转换体系的核心接口"><a href="#ConversionService是Spring类型转换体系的核心接口" class="headerlink" title="ConversionService是Spring类型转换体系的核心接口"></a>ConversionService是Spring类型转换体系的核心接口</h4></li>
<li><h4 id="可以利用ConversionServiceFeactoryBean在Spring-Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换"><a href="#可以利用ConversionServiceFeactoryBean在Spring-Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换" class="headerlink" title="可以利用ConversionServiceFeactoryBean在Spring Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换"></a>可以利用ConversionServiceFeactoryBean在Spring Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换</h4></li>
<li><h4 id="可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器"><a href="#可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器" class="headerlink" title="可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器"></a>可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器</h4></li>
</ul>
<h2 id="Spring支持的转换器"><a href="#Spring支持的转换器" class="headerlink" title="Spring支持的转换器"></a>Spring支持的转换器</h2><ul>
<li>Spring定义了三种类型的转换器接口，实现任意一种都可以作为自定义转换器注册到CoversionServiceFactoryBean<ul>
<li>Converter&lt;S,T&gt; :将S类型转换为T类型</li>
<li>CoverterFactory ：将相同系列的多个同质封装在一起。如果希望将一种类型转换为另一种类型及其子类</li>
<li>GenericConverter：会根据源类对象及目标对象所在宿主类中的上下文信息进行类型转换</li>
</ul>
</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &lt;mvc:annotation-driven <span class="keyword">conversion</span>-service="conversionService"/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id="conversionService" <span class="keyword">class</span>="org.springframework.format.support.FormattingConversionServiceFactoryBean"&gt;</span><br><span class="line">	&lt;property <span class="type">name</span>="converters"&gt;</span><br><span class="line">		&lt;<span class="keyword">set</span>&gt;</span><br><span class="line">			&lt;<span class="keyword">ref</span> bean=""/&gt;//此处是填写自定义的类型转换器，类型转换器的bean必须交给spring ioc容器进行管理</span><br><span class="line">		&lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="类型转换出错的处理"><a href="#类型转换出错的处理" class="headerlink" title="类型转换出错的处理"></a>类型转换出错的处理</h2><p>类型转换出错会将错误信息放在一个BindingResult的实例中，可以在handler处理方法中传入一个这样的参数进行处理</p>
<ul>
<li>@DateTimeFormat(pattern=””)</li>
</ul>
<p>将注解到Date属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为birth的字符串按照yyyy-MM-dd的格式转换为Date类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @<span class="constructor">DateTimeFormat(<span class="params">pattern</span>=<span class="string">"yyyy-MM-dd"</span>)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>
<ul>
<li>@NumberFormat(pattern=””)</li>
</ul>
<p>将注解到Number子类属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为salary的字符串按照#,###,###.#的格式转换为float类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@<span class="constructor">NumberFormat(<span class="params">pattern</span>=<span class="string">"#,###,###.#"</span>)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">float</span> salary;</span><br></pre></td></tr></table></figure>

<h1 id="十八、-数据校验-JSR-303"><a href="#十八、-数据校验-JSR-303" class="headerlink" title="十八、 数据校验(JSR 303)"></a>十八、 数据校验(JSR 303)</h1><h2 id="如何进行数据校验？"><a href="#如何进行数据校验？" class="headerlink" title="如何进行数据校验？"></a>如何进行数据校验？</h2><ul>
<li>使用注解进行校验</li>
</ul>
<h2 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR 303"></a>JSR 303</h2><ul>
<li><h4 id="JSR-303是java为Bean数据合法性校验提供的标准框架，包含在java-EE-6-0中"><a href="#JSR-303是java为Bean数据合法性校验提供的标准框架，包含在java-EE-6-0中" class="headerlink" title="JSR 303是java为Bean数据合法性校验提供的标准框架，包含在java EE 6.0中"></a>JSR 303是java为Bean数据合法性校验提供的标准框架，包含在java EE 6.0中</h4></li>
<li><h4 id="JSR-303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证"><a href="#JSR-303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证" class="headerlink" title="JSR 303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证"></a>JSR 303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证</h4></li>
</ul>
<table>
<thead>
<tr>
<th>注解</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>被注释的元素必须为null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>被注释的元素必须不为null</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>被注释的元素必须为true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>被注释的元素必须为false</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@Size(max,min)</td>
<td>被注释的元素大小必须在指定的范围内</td>
</tr>
<tr>
<td>@Digits(Integer,fraction)</td>
<td>被注释的元素必须是一个数字,其值必须在可接受的范围内</td>
</tr>
<tr>
<td>@Past</td>
<td>被注释的元素必须是一个过去的日期</td>
</tr>
<tr>
<td>@Future</td>
<td>被注释的元素必须是一个未来的日期</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>被注释的元素必须符合指定的正则表达式</td>
</tr>
</tbody></table>
<p>Hibernate Validator是JSR 303的一个参考实现，除支持所有标准的注解校验外还支持以下的扩展注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Email</td>
<td>被注解的元素必须是电子邮箱</td>
</tr>
<tr>
<td>@Length</td>
<td>被注解的字符串大小必须在指定范围</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>被注解的元素必须非空</td>
</tr>
<tr>
<td>@Range</td>
<td>被注解的元素必须在指定范围</td>
</tr>
</tbody></table>
<h2 id="具体实现校验"><a href="#具体实现校验" class="headerlink" title="具体实现校验"></a>具体实现校验</h2><ul>
<li><p>Spring在进行数据绑定的时候，可以同时调用数据框架完成校验工作。==在SpringMvc中可以直接通过注解驱动的方式进行数据校验==</p>
</li>
<li><p>Spring的LocalVaildatorFactoryBean既实现了Spring的Vaildator接口，也实现了JSR 303的Vaildator接口，这要在Spring容器中定义==LocalVaildatorFactoryBean==，即可将其注入到所需要校验数据的bean中</p>
</li>
<li><p>Spring本身没有提供JSR 303的实现，所以必须将JSR 303的实现jar导入工程文件中</p>
</li>
<li><p>&lt;mvc:annocation-driven /&gt;会默认装配一个LocalVaildatorFactoryBean，通过处理方法入参上标注@Vaild注解即可让springMvc在完成入参绑定hou执行数据校验操作</p>
<ol>
<li>使用JSR 303 校验标准</li>
<li>加入hibernate validator验证框架</li>
<li>配置&lt;mvc:annocation-driven /&gt;</li>
<li>在bean属性上加上对应的校验注解</li>
<li>在目标方法bean类型的前面添加@Vaild注解</li>
</ol>
</li>
<li><p>如何将校验出错的结果返回到页面?</p>
</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> * 代表所有出错信息</span><br><span class="line"><span class="bullet">* </span>可以使用bean属性名指定具体属性的校验出错信息</span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong">&lt;form:errors path="*</span>" /&gt;</span><br></pre></td></tr></table></figure>
<h2 id="提示消息的国际"><a href="#提示消息的国际" class="headerlink" title="提示消息的国际"></a>提示消息的国际</h2><ul>
<li>每个属性在数据绑定和数据校验出错时，会生成一个对应的FieldError对象</li>
</ul>
<ul>
<li>当一个属性校验失败后，校验框架会为每一个属性生成4个消息代码，这些代码==以校验注解类名为前缀==、结合modelAttribute、属性名、属性类型名生成多个消息代码。<ul>
<li>例如：User类中的password属性标注一个@Pattern注解，当校验出错时会产生以下4个代码</li>
<li>Pattern.user.password</li>
<li>Pattern.password</li>
<li>Pattern.java.lang.String</li>
<li>Pattern</li>
</ul>
</li>
<li>当SpringMvc标签显示错误消息时，SpringMvc会查看WEB上下文是否装配对应的国际消息，如果没有则显示默认消息</li>
</ul>
<h2 id="国际化资源文件的实现"><a href="#国际化资源文件的实现" class="headerlink" title="国际化资源文件的实现"></a>国际化资源文件的实现</h2><ul>
<li>在SpringMvc里配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 国际化资源文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在src下建立国际化资源文件</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名：i18n.properties</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NotNull</span>.</span></span>employee.lastName=lastName不能为空</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Email</span>.</span></span>employee.email=email必须为一个合法的邮箱地址</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Past</span>.</span></span>employee.birth=出生日期必须为过去日期</span><br></pre></td></tr></table></figure>
<p>这里以下面的pojo为例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> lastName;</span><br><span class="line"><span class="meta">@Email</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> email;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> gener;</span><br><span class="line"><span class="keyword">private</span> Department department;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Past</span></span><br><span class="line"><span class="meta">@DateTimeFormat</span>(iso=ISO.DATE)</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">Date</span> birth;</span><br></pre></td></tr></table></figure>

<h1 id="十九-、国际化问题"><a href="#十九-、国际化问题" class="headerlink" title="十九 、国际化问题"></a>十九 、国际化问题</h1><ul>
<li>问题：在页面上能根据浏览器语言设置的情况对文本 时间 数值进行本地化处理</li>
</ul>
<p>解决:使用fmt标签</p>
<ul>
<li>问题：可以在bean中获取国际化资源文件Local的对应消息</li>
</ul>
<p>解决:在bean中注入ResourceBundleMessageSource ,使用对应的getMessage方法</p>
<ul>
<li>问题：通过超链接切换Local，而不依赖资源文件</li>
</ul>
<p>解决： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在超链接加上local参数，比如:</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"aa?local=ch_ZH"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">添加配置文件</span><br><span class="line"><span class="comment">&lt;!-- 配置SessionLocaleResolver --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionLocaleResolver"</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.SessionLocaleResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置 LocaleChangeInterceptor--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2020/01/23/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、-Spring主要内容"><a href="#一、-Spring主要内容" class="headerlink" title="一、 Spring主要内容"></a>一、 Spring主要内容</h1><a id="more"></a>

<p><img src="https://s2.ax1x.com/2020/01/23/1Vkd81.png" alt="image"></p>
<h1 id="二-、IOC"><a href="#二-、IOC" class="headerlink" title="二 、IOC"></a>二 、IOC</h1><ul>
<li><p>inversion of control 控制反转</p>
<ul>
<li><p>对象由原来本身去创建，变成程序去接收对象</p>
</li>
<li><p>主要精力放在业务的实现</p>
</li>
<li><p>实现了service和dao的解耦</p>
</li>
</ul>
</li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>1.导入jar包到lib</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">commons-logging-<span class="number">1.2</span>.jar /<span class="regexp">/这个jar包在struts2中</span></span><br><span class="line"><span class="regexp">spring-aop-4.3.9.RELEASE.jar</span></span><br><span class="line"><span class="regexp">spring-aspects-4.3.9.RELEASE.jar</span></span><br><span class="line"><span class="regexp">lib/spring</span>-beans-<span class="number">4.3</span>.<span class="number">9</span>.RELEASE.jar</span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">context</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">context</span>-<span class="title">support</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">core</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">expression</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">jdbc</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">orm</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">tx</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">web</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">webmvc</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br></pre></td></tr></table></figure>
<p>2.编写spring配置文件(名称可以自定义)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- bean就是java对象 ，由spring容器进行创建和管理 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.Hello"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.bean类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.测试</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//解析beans.xml文件，生成管理相应的bean对象</span></span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">		Hello hello = (Hello) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">		System.out.<span class="built_in">println</span>(hello);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.总结</p>
<ul>
<li><p>对象由spring创建，对象的属性由spring设置，这个过程就叫控制反转+</p>
</li>
<li><p>控制的内容：指谁来控制对象的创建，传统的应用程序对象由程序本身来创建，现在控制对象创建的权限交给spring。</p>
</li>
<li><p>反转:指原来程序本身创建对象，变为被动的接收对象</p>
</li>
</ul>
<p>控制的内容：指谁来控制对象的创建，传统的应用程序对象由程序本身来创建，现在控制对象创建的权限交给spring。</p>
<p>反转:指原来程序本身创建对象，变为被动的接收对象</p>
<ul>
<li>控制反转也叫依赖注入(denpendcy in inject)</li>
</ul>
<h3 id="1-通过无参构造方法创建"><a href="#1-通过无参构造方法创建" class="headerlink" title="1.通过无参构造方法创建"></a>1.通过无参构造方法创建</h3><p>java类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>beans.xml</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">name</span>=<span class="string">"hello"</span> <span class="built_in">class</span>=<span class="string">"cn.lyb.bean.Hello"</span>&gt;</span><br><span class="line">  	&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"name"</span> value=<span class="string">"张三"</span>/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-通过带参构造方法创建"><a href="#2-通过带参构造方法创建" class="headerlink" title="2.通过带参构造方法创建"></a>2.通过带参构造方法创建</h3><p>java类</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class<span class="built_in"> User </span>&#123;</span><br><span class="line">	private int id;</span><br><span class="line">	</span><br><span class="line">	public User(int id) &#123;</span><br><span class="line">		this.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-1-根据参数的下标来设置"><a href="#2-1-根据参数的下标来设置" class="headerlink" title="2.1 根据参数的下标来设置"></a>2.1 根据参数的下标来设置</h4><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--index是构造方法的参数下标从零开始  --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-2-根据参数的名字来设置"><a href="#2-2-根据参数的名字来设置" class="headerlink" title="2.2 根据参数的名字来设置"></a>2.2 根据参数的名字来设置</h4><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-3-根据参数的类型来设置"><a href="#2-3-根据参数的类型来设置" class="headerlink" title="2.3 根据参数的类型来设置"></a>2.3 根据参数的类型来设置</h4><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-通过工厂创建"><a href="#3-通过工厂创建" class="headerlink" title="3.通过工厂创建"></a>3.通过工厂创建</h3><h4 id="3-1静态工厂"><a href="#3-1静态工厂" class="headerlink" title="3.1静态工厂"></a>3.1静态工厂</h4><p>静态工厂类</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class Userfactory &#123;	</span><br><span class="line">	public static<span class="built_in"> User </span>getUserInstance(int id) &#123;</span><br><span class="line">		return new User(id);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--class对应工厂类 factory-method是工厂静态方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.factory.Userfactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserInstance"</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"15"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-1动态工厂"><a href="#3-1动态工厂" class="headerlink" title="3.1动态工厂"></a>3.1动态工厂</h4><p>动态工厂类</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class UserDynamicFactory &#123;</span><br><span class="line">	public<span class="built_in"> User </span>getUserInstance(int id) &#123;</span><br><span class="line">		return new User(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态工厂的bean--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userFactory"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.factory.UserDynamicFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--factory-bean引用动态工厂--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">factory-bean</span>=<span class="string">"userFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserInstance"</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三-、配置文件参数"><a href="#三-、配置文件参数" class="headerlink" title="三 、配置文件参数"></a>三 、配置文件参数</h1><ul>
<li>alias 为bean设置别名，可以设置多个别名</li>
</ul>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">alias</span> <span class="title">name</span>=<span class="string">""</span> <span class="keyword">alias</span>=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>bean的配置</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>是bean的标识符 要唯一。 如果没有配置<span class="built_in">id</span>则<span class="built_in">name</span>默认为标识符；</span><br><span class="line">如果配置了<span class="built_in">id</span>，则<span class="built_in">name</span>为别名可以配置多个，分隔符可以位为 逗号 分号 空格</span><br><span class="line"></span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"h1"</span> <span class="built_in">name</span>=<span class="string">"h2 h3,h4;h5"</span> &gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>团队协作通过import实现</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;import <span class="attribute">resource</span>=<span class="string">"cn/config/a.xml"</span>/&gt;</span><br></pre></td></tr></table></figure>

<h1 id="四、依赖注入"><a href="#四、依赖注入" class="headerlink" title="四、依赖注入"></a>四、依赖注入</h1><ul>
<li><p>依赖：bean对象的创建依赖容器    bean对象依赖资源</p>
</li>
<li><p>注入：bean对象所依赖的资源由容器设置和装配</p>
</li>
</ul>
<h2 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1.构造器注入"></a>1.构造器注入</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--index是构造方法的参数下标从零开始  --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-setter注入"><a href="#2-setter注入" class="headerlink" title="2.setter注入"></a>2.setter注入</h2><blockquote>
<p>要求被注入的属性必须有set方法。set方法名为set+属性名(首字母大写)</p>
<p>如果属性为boolean类型则没有get方法 为is方法</p>
</blockquote>
<ul>
<li>常量注入<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">""</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>bean注入<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"a"</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">""</span> <span class="keyword">ref</span>=<span class="string">"a"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>数组注入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>List注入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Map注入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span>  <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span>//注意这里的写法</span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Set注入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>null注入<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">""</span>&gt;&lt;null/&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>properties注入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                ·····························</span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>p命名空间注入</li>
</ul>
<p>配置文件的头文件需要添加下面路径</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span> p:属性<span class="number">1</span>=<span class="string">""</span> p:属性<span class="number">2</span>=<span class="string">""</span> ......&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>c命名空间注入</li>
</ul>
<ol>
<li>配置文件的头文件需要添加下面路径</li>
<li>bean类需要对应的构造方法<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">xmlns:<span class="keyword">c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span><br><span class="line">&lt;bean id=<span class="string">""</span> class=<span class="string">""</span> <span class="keyword">c</span>:属性<span class="number">1</span>=<span class="string">""</span> <span class="keyword">c</span>:属性<span class="number">2</span>=<span class="string">""</span> ......&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="五、bean的作用域以及自动装配"><a href="#五、bean的作用域以及自动装配" class="headerlink" title="五、bean的作用域以及自动装配"></a>五、bean的作用域以及自动装配</h1><h2 id="bean的作用域类型"><a href="#bean的作用域类型" class="headerlink" title="bean的作用域类型"></a>bean的作用域类型</h2><ul>
<li><code>singleton</code> 单例，整个容器只有一个对象实例</li>
<li><code>prototype</code> 原型，每次获取bean都产生一个新对象</li>
<li><code>request</code>   每次请求创建一个新对象</li>
<li><code>session</code>   会话范围内时一个对象</li>
<li><code>global session</code>    只在portlet下有用，表示applicable<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*例子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;bean id=<span class="string">""</span> <span class="keyword">class</span>=<span class="string">""</span> scope=<span class="string">"singleton"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h2><p>autowire自动装配，简化spring配置</p>
<p>注意：可以在头文件里设置 default-autowire来全局设置</p>
<ul>
<li>byName： 根据名称(set方法名称)去查找相应的bean，如果有则装配</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">*类里面的<span class="keyword">set</span>方法为setUser 则会自动装配<span class="built_in">id</span>=<span class="string">"user"</span>的bean</span><br><span class="line">*/</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"user"</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span> autowire=<span class="string">"byName"</span> /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>byType：根据类型去查找相应的bean，如果有则装配 慎用</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*类里面的属性为cn.user 则会自动装配bean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;bean <span class="keyword">class</span>=<span class="string">"cn.user"</span>&gt;</span><br><span class="line">&lt;bean id=<span class="string">""</span> <span class="keyword">class</span>=<span class="string">""</span> autowire=<span class="string">"byType"</span> /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>constructor：当使用构造器注入实例化bean时，使用此方法装配构造方法</li>
</ul>
<h1 id="六-、AOP"><a href="#六-、AOP" class="headerlink" title="六 、AOP"></a>六 、AOP</h1><p>Aop (aspect oriented programming)面向切面编程</p>
<p>Aop在spring中的作用</p>
<ul>
<li>提供声明式服务(声明式事务)</li>
<li>允许用户自定义切面</li>
</ul>
<p>Aop就是横向编程模式（代理）</p>
<p>Aop的好处</p>
<ul>
<li>使得真实角色处理的业务更加存粹，不再关注一些公共的业务</li>
<li>公共的业务由代理来完成—实现业务的分工</li>
<li>公共业务扩展时更加方便与集中<h2 id="使用Spring实现Aop"><a href="#使用Spring实现Aop" class="headerlink" title="使用Spring实现Aop"></a>使用Spring实现Aop</h2></li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.更改配置文件的命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.导入aop所需要的另外两个jar包</p>
<ul>
<li>aopalliance.jar</li>
<li>aspectjweaver.jar</li>
</ul>
<h3 id="案例（使用Spring-Api实现）"><a href="#案例（使用Spring-Api实现）" class="headerlink" title="案例（使用Spring Api实现）"></a>案例（使用Spring Api实现）</h3><ol>
<li>要实现切入的公共业务类需要继承接口</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> <span class="keyword">Log</span> implements MethodBeforeAdvice&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>(<span class="keyword">Method</span> arg0, <span class="keyword">Object</span>[] arg1, <span class="keyword">Object</span> arg2) throws Throwable &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("日志处理信息");</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>目标类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"添加用户"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询用户"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 .配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.service.UserServiceImp"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"log"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.log.Log"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">	&lt;!-- 切入点 --&gt;</span><br><span class="line">	&lt;aop:pointcut expression=<span class="string">"execution(* cn.lyb.service.UserServiceImp.add())"</span> id=<span class="string">"poi"</span>/&gt;</span><br><span class="line">	&lt;aop:advisor advice-ref=<span class="string">"log"</span> pointcut-ref=<span class="string">"poi"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/aop:config&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="案例（使用自定义类实现）"><a href="#案例（使用自定义类实现）" class="headerlink" title="案例（使用自定义类实现）"></a>案例（使用自定义类实现）</h3><ol>
<li>切入类(自定义，不需要实现接口)</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log2</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"自定义方法执行切入"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.service.UserServiceImp"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"log2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.log.Log2"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">	&lt;aop:aspect ref=<span class="string">"log2"</span>&gt;</span><br><span class="line">		&lt;aop:pointcut expression=<span class="string">"execution(* cn.lyb.service.UserServiceImp.delete())"</span> id=<span class="string">"poi2"</span>/&gt;</span><br><span class="line">		&lt;aop:before method=<span class="string">"before"</span> pointcut-ref=<span class="string">"poi2"</span>/&gt;</span><br><span class="line">	&lt;<span class="regexp">/aop:aspect&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>aop:config&gt;</span><br></pre></td></tr></table></figure>
<h3 id="使用注解实现"><a href="#使用注解实现" class="headerlink" title="使用注解实现"></a>使用注解实现</h3><p>在配置文件加上</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-<span class="built_in">auto</span>proxy /&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log2</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* cn.lyb.service.UserServiceImp.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"自定义方法执行切入"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>在切入点表达式中我们可以利用【*】去进行模糊匹配。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(* com.wf.springaopImpl.ArithmeticCalculatorImpl.*(..))</span><br><span class="line"><span class="comment">//第一个 * 代表任意修饰符及任意返回值. 第二个 * 代表任意方法. .. 匹配任意数量的参数. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若目标类与接口与该切面在同一个包中, 可以省略包名.</span></span><br><span class="line">execution（<span class="keyword">public</span> * ArithmeticCalculator.*(..))</span><br><span class="line"><span class="comment">// 匹配 ArithmeticCalculator 接口的所有公有方法.</span></span><br><span class="line"></span><br><span class="line">execution (<span class="keyword">public</span> <span class="keyword">double</span> ArithmeticCalculator.*(..))</span><br><span class="line"><span class="comment">//匹配 ArithmeticCalculator 中返回 double 类型数值的方法</span></span><br><span class="line"></span><br><span class="line">execution (<span class="keyword">public</span> <span class="keyword">double</span> ArithmeticCalculator.*(<span class="keyword">double</span>, ..))</span><br><span class="line"><span class="comment">// 匹配第一个参数为 double 类型的方法, .. 匹配任意数量任意类型的参数</span></span><br></pre></td></tr></table></figure>

<h1 id="七、Spring整合Mybatis"><a href="#七、Spring整合Mybatis" class="headerlink" title="七、Spring整合Mybatis"></a>七、Spring整合Mybatis</h1><h2 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h2><p>第一步.导入相关jar包</p>
<ul>
<li>spring的jar包（包括commons-logging.jar、aopalliance.jar和aspectjweaver.jar）</li>
<li>mybatis的jar包</li>
<li>jdbc的jar包</li>
<li>mybatis_spring.jar</li>
</ul>
<p>第二步.配置文件(将sqlSessionFactory、sqlSession交给Ioc管理)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionTemplate --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 通过构造器注入将sqlSessionFactory注入 --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.Imp.UserDaoImp"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mybati文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.vo"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 定义映射语句的文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/dao/Imp/user.mapper.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">		select * from user2</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过spring注入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	<span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> sqlSession.selectList(<span class="string">"cn.lyb.user.Mapper.getAll"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h2><ul>
<li>与第一种整合方式的区别是：dao层直接继承SqlSessionDaoSupport类(通过提供getSession方法获取sqlsession对象),不需要配置/注入SqlSessionTemplate对象</li>
</ul>
<p>dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*继承SqlSessionDaoSupport</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> getSession().selectList(<span class="string">"cn.lyb.user.Mapper.getAll"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http ://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  /***</span><br><span class="line">    不需要注入SqlSessionTemplate</span><br><span class="line">    直接注入sqlSessionFactory</span><br><span class="line">  **/</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.Imp.UserDaoImp"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第三种方案"><a href="#第三种方案" class="headerlink" title="第三种方案"></a>第三种方案</h2><ul>
<li>mybatis使用注解实现</li>
</ul>
<p>mapper接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>userMapper()&#123;</span><br><span class="line">    @select(<span class="string">"select * from user"</span>)</span><br><span class="line">    public List&lt;User&gt; getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>service层</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">userService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//mapper的set方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt;  getList()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">  *配置mapper对象</span><br><span class="line">  */</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapperFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"mapper接口的全限定名"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  //将userMapper注入service层的mapper对象</span><br></pre></td></tr></table></figure>
<p>mybatis配置文件 修改mappers</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.vo"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"mapper接口全限定名"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第四种方案"><a href="#第四种方案" class="headerlink" title="第四种方案"></a>第四种方案</h2><blockquote>
<p>不用mybatis配置文件</p>
<p>mapper.xml直接在spring中配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"cn/lyb/vo/*.mapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="八、声明式事务"><a href="#八、声明式事务" class="headerlink" title="八、声明式事务"></a>八、声明式事务</h1><p>添加头文件信息</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">xmlns:<span class="attribute">tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">  xsi:<span class="attribute">schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">                      http://www.springframework.org/schema/tx/spring-tx.xsd"</span></span><br></pre></td></tr></table></figure>
<p>案例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span> </span><br><span class="line">  	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 配置哪些方法使用什么样的事务，以及事务的传播特性 --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--通过aop将事务通知切入方法--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lyb.dao.Imp.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="九-、整合struts2、mybatis"><a href="#九-、整合struts2、mybatis" class="headerlink" title="九 、整合struts2、mybatis"></a>九 、整合struts2、mybatis</h1><h2 id="使用注解整合开发"><a href="#使用注解整合开发" class="headerlink" title="使用注解整合开发"></a>使用注解整合开发</h2><p>1.spring配置文件添加context命名空间</p>
<p>2.添加自动扫描标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span> </span><br><span class="line">  	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 配置哪些方法使用什么样的事务，以及事务的传播特性 --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lyb.dao.Imp.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- 自动扫描所配置包下的所有注解 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lyb"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>dao</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*如果不手动写userDao，id将默认为类名（UserDaoImpl）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="title">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public void setSqlSessionFactory(<span class="type">SqlSessionFactory</span> sqlSessionFactory) &#123;</span><br><span class="line">		<span class="keyword">super</span>.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public <span class="type">List</span>&lt;<span class="type">User</span>&gt; getAllUser() &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> getSqlSession().selectList(<span class="string">"cn.lyb.vo.user.mapper.getAll"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">（注意：如上配置相当于在spring配置文件中配）</span><br><span class="line"> &lt;bean id=<span class="string">"userDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.dao.impl.UserDaoImpl"</span>&gt;</span><br><span class="line">  	&lt;property name=<span class="string">"sqlSessionFactory"</span> ref=<span class="string">"sqlSessionFactory"</span>/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*如果不手动写userService，id将默认为类名（UserServiceImpl）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//自动装配不写id将默认id为属性名的bean装配</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.getAllUser();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>action</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@Scope(<span class="string">"portotype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt; <span class="built_in">list</span> = null;</span><br><span class="line">	</span><br><span class="line">	@Autowired</span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;User&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserService <span class="title">getUserService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userService;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userService = userService;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">list</span> = userService.getAllUser();</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="built_in">list</span>);</span><br><span class="line">		<span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合struts2和mybat"><a href="#整合struts2和mybat" class="headerlink" title="整合struts2和mybat"></a>整合struts2和mybat</h2><p>1.导入jar包</p>
<p>2.配置web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>spring_struts2_mybatis<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 配置spring --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 配置struts2 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span> </span><br><span class="line">  	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 配置哪些方法使用什么样的事务，以及事务的传播特性 --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lyb.dao.Imp.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.struts2的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"userAction"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.mybatis配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.vo"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 定义映射语句的文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/vo/user.mapper.xml"</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
