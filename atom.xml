<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何处似樽前</title>
  
  <subtitle>博观而约取，厚积而薄发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuyoubin.top/"/>
  <updated>2020-01-30T17:16:36.412Z</updated>
  <id>http://liuyoubin.top/</id>
  
  <author>
    <name>刘友滨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/29/backEnd/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/29/backEnd/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-29T15:36:02.000Z</published>
    <updated>2020-01-30T17:16:36.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么?"></a>Nginx是什么?</h1><p>​        Nginx是一个高性能的HTTP和反向代理的web服务器，具有轻量级、占用内存少、并发能力强的特点。</p><a id="more"></a><h1 id="Nginx的应用"><a href="#Nginx的应用" class="headerlink" title="Nginx的应用"></a>Nginx的应用</h1><ol><li><p>Nginx作为Web服务器</p><p>​        Nginx可以作为静态页面的web服务器、支持CGI协议的动态语言，例如：php。</p></li><li><p>正向代理</p><p>​        Nginx可以作正向代理来进行上网。正向代理:是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。正向代理中客户端对于目标服务器是透明的。</p></li></ol><p><img src="https://s2.ax1x.com/2020/01/30/1lS7wV.png" alt="image"></p><ol start="3"><li><p>反向代理</p><p>​        反向代理：我们只 需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返 回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器 地址，隐藏了真实服务器 IP 地址。反向代理中目标服务器对于客户端是透明的。</p></li></ol><p><img src="https://s2.ax1x.com/2020/01/30/1lpVld.png" alt="image"></p><ol start="4"><li><p>负载均衡</p><p>​        客户端发送多个请求到服务器，服务器处理请求，再将结果返回给客户端。这种传统架构随着信息数量的增长以及业务的日益复杂，服务器性能渐渐出现了瓶颈。为了缓解服务器的压力我们可以将同一应用部署到多个服务器上对外提供同一种服务，这就是集群的概念。而将大量的请求负载分发到不同服务器上，这就是负载均衡。</p></li></ol><p><img src="https://s2.ax1x.com/2020/01/30/1lp20x.png" alt="image"></p><ol start="5"><li><p>动静分离</p><p>为了加快网址的解析速度，可以把网站的动态页面和静态页面让不同服务器来解析。</p></li></ol><p><img src="https://s2.ax1x.com/2020/01/30/1l9iBq.png" alt="image"></p><h1 id="Nginx的安装与启动"><a href="#Nginx的安装与启动" class="headerlink" title="Nginx的安装与启动"></a>Nginx的安装与启动</h1><p>nginx有windows版本和linux版本，windows版本的安装比较简单，这里主要记录Linux版本的安装</p><ol><li>进入Nginx的官网<a href="http://nginx.org选择版本进行下载，我这里选择nginx-1.12.1稳定版本进行安装" target="_blank" rel="noopener">http://nginx.org选择版本进行下载，我这里选择nginx-1.12.1稳定版本进行安装</a></li></ol><p><img src="https://s2.ax1x.com/2020/01/30/1lCui8.png" alt="image"></p><ol start="2"><li>安装nginx所需要的依赖</li></ol><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc <span class="literal">zlib</span> <span class="literal">zlib</span>-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><ol start="3"><li>安装nginx</li></ol><ul><li>解压nginx-xxxx.tar.gz</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">nginx-1</span><span class="selector-class">.12</span><span class="selector-class">.2</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><ul><li>进入到nginx目录执行./configure命令 </li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./configure</span></span><br></pre></td></tr></table></figure><ul><li>执行安装命令</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><ol start="4"><li><p>检查是否安装成功</p><p>​    进入到/usr/local中查看，如果安装成功会在这个目录下看到nginx目录。</p></li><li><p>启动nginx</p><p>在/usr/local/nginx/sbin中会有一个<code>nginx</code>启动命令。我们在这个目录下执行下面的命令就可以启动nginx了</p></li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./nginx</span></span><br></pre></td></tr></table></figure><p>​        通过检查进程确定nginx是否正确启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> nginx</span><br></pre></td></tr></table></figure><h1 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h1><p>记住必须进入到/usr/local/nginx/sbin后才能使用nginx命令</p><ul><li><p>查看nginx版本号</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./nginx</span> -v</span><br></pre></td></tr></table></figure></li><li><p>启动nginx</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./nginx</span></span><br></pre></td></tr></table></figure></li><li><p>关闭nginx</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./nginx</span> -s stop 或者 <span class="string">./nginx</span> -s <span class="keyword">quit</span></span><br></pre></td></tr></table></figure></li><li><p>重加载</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./nginx</span> -s <span class="keyword">reload</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Nginx的配置文件"><a href="#Nginx的配置文件" class="headerlink" title="Nginx的配置文件"></a>Nginx的配置文件</h1><h4 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a><strong>配置文件位置</strong></h4><p><code>/usr/local/nginx/conf/nginx.conf</code></p><h4 id="配置文件的组成"><a href="#配置文件的组成" class="headerlink" title="配置文件的组成"></a><strong>配置文件的组成</strong></h4><blockquote><p>nginx配置文件由三部分组成：全局块、events块</p></blockquote><h5 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h5><p>​        从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配 置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以 及配置文件的引入等。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。也可以创建nginx用户指定用户。</span><br><span class="line">可以通过</span><br><span class="line"><span class="attribute">groupadd</span> home </span><br><span class="line">useradd -g home lyb</span><br><span class="line">来增加用户组和用户</span><br><span class="line">*/</span><br><span class="line">user  nobody;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是</span><br><span class="line">会受到硬件、软件等设备的制约</span><br><span class="line">*/</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</span><br><span class="line">*/</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log;</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log  <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log  <span class="literal">info</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">用来指定进程id的存储文件位置</span><br><span class="line">*/</span><br><span class="line"><span class="attribute">pid</span>   logs/nginx.pid;</span><br></pre></td></tr></table></figure><h5 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h5><p>​        events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。</span><br><span class="line"></span><br><span class="line">其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中,对于Linux系统，epoll工作模式是首选。</span><br><span class="line">*/</span><br><span class="line"><span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。</span><br><span class="line"></span><br><span class="line">最大客户端连接数由worker_processes和worker_connections决定，即Max_clients=worker_processes*worker_connections，</span><br><span class="line"></span><br><span class="line">在作为反向代理时，Max_clients变为：Max_clients = worker_processes * worker_connections/4</span><br><span class="line"></span><br><span class="line">进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效。</span><br><span class="line">*/</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h5><p>​        这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。 需要注意的是：http 块也可以包括 http 全局块、server 块</p><h6 id="http全局块"><a href="#http全局块" class="headerlink" title="http全局块"></a>http全局块</h6><p>​        http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">/**</span><br><span class="line">来用设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。</span><br><span class="line">*/</span><br><span class="line"><span class="attribute">include</span>       mime.types;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp的locate环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。</span><br><span class="line">*/</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    </span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">1024m</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来纪录这种类型。</span><br><span class="line">*/</span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="server块"><a href="#server块" class="headerlink" title="server块"></a>server块</h6><p>​        这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了 节省互联网服务器硬件成本。 每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。 而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p><ul><li><p>全局server块</p><p>​        最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置</p><ul><li><p>listen：用于指定虚拟主机的服务端口。</p></li><li><p>server_name：用来指定IP地址或者域名，多个域名之间用空格分开。</p></li><li><p>root ：表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来</p></li><li><p>index ：全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来。</p></li><li><p>charset：用于设置网页的默认编码格式。</p></li><li><p>access_log：用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">root</span>   /Users/app/lyb;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.php; </span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  logs/host.access.log  main;</span><br><span class="line">        <span class="attribute">aerror_log</span>  logs/host.<span class="literal">error</span>.log   main;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>location块</p><p>​        一个 server 块可以配置多个 location 块。 这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称 （也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓 存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p></li></ul><h1 id="Nginx配置实例"><a href="#Nginx配置实例" class="headerlink" title="Nginx配置实例"></a>Nginx配置实例</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><strong>实现效果：</strong>在浏览器中输入<a href="http://www.lyb.com,跳转到Linux上的tomcat主页面" target="_blank" rel="noopener">www.lyb.com,跳转到Linux上的tomcat主页面</a></p><p><strong>准备工作：</strong> 在Linux安装nginx和tomcat</p><p><strong>开始配置：</strong></p><ul><li><p>在本地的host文件中配置<a href="http://www.lyb.com映射到nginx所在服务器的ip" target="_blank" rel="noopener">www.lyb.com映射到nginx所在服务器的ip</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器<span class="selector-tag">ip</span> <span class="selector-tag">www</span><span class="selector-class">.lyb</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></li><li><p>在nginx中进行反向代理配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       listen       80; //监听的端口</span><br><span class="line">       server_name  **.**.**.**; //nginx所在服务器ip</span><br><span class="line">  </span><br><span class="line">       <span class="comment">#charset koi8-r;</span></span><br><span class="line">  </span><br><span class="line">       <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">  </span><br><span class="line">       <span class="attribute">location</span> / &#123;</span><br><span class="line">           <span class="attribute">root</span>   html;</span><br><span class="line">           proxy_pass http://127.0.0.1:8080; //设置代理转发                                         index  index.html index.htm;                                                       &#125;</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure></li><li><p>重启nginx即可实现反向代理转发</p></li></ul><p><strong>扩展：</strong></p><p>​        如果想实现根据不同的请求路径跳转到不同的服务可以设置多个location，例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       listen       80; //监听的端口</span><br><span class="line">       server_name  **.**.**.**; //nginx所在服务器ip</span><br><span class="line"></span><br><span class="line">       <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> <span class="regexp">~ /user/</span> &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:8080; //设置代理转发                                        &#125;</span><br><span class="line">           </span><br><span class="line">         <span class="attribute">location</span> <span class="regexp">~ /vod/</span> &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:8081; //设置代理转发                                        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /oss/</span> &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:8082; //设置代理转发                                        &#125;</span><br><span class="line">      ....</span><br></pre></td></tr></table></figure><p><strong>location指令说明：</strong></p><p>​        该指令用于匹配URL，语法如下 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~</span> ] URL&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配 成功，就停止继续向下搜索并立即处理该请求</p></li><li><p>~：用于表示 uri 包含正则表达式，并且区分大小写</p></li><li><p>~*：用于表示 uri 包含正则表达式，并且不区分大小写</p></li><li><p>^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字 符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配</p></li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p><strong>实现效果：</strong>在浏览器中输入http://服务器ip/vod/a.html,让这个请求分发到8080和8081两给tomcat上，实现轮询负载均衡</p><p><strong>准备工作：</strong>在服务器上开启两个tomcat，一个监听8080端口，一个监听8081端口。分别在两个tomat下部署vod应用，在应用下放置a.html文件用于测试。</p><p><strong>开始配置：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">   upstream myserver&#123; //配置负载均衡模块</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">47.105.165.248</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            proxy_pass http://myserver; //设置负载转发，这里填的是负载均衡模块的名字</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      .......</span><br></pre></td></tr></table></figure><p><strong>扩展：</strong></p><p>​        <strong>Nginx提供几种负载均衡策略</strong></p><ul><li><p>轮询（默认）</p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123; //配置负载均衡模块</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>weight</p><p>weight 代表权重默认为 1,权重越高被分配的客户端越多 指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> myserver&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.5.21</span> weight=<span class="number">1</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.5.22</span> weight=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ip_hash</p><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> server_pool&#123;</span><br><span class="line">ip_hash;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.5.21:80</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.5.22:80</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fair（第三方）</p><p>​        更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</p></li></ul><p>  <strong>负载均衡调度状态</strong></p><p>  ​        在upstream模块中。server指令除了可以设置服务器的ip和端口，也可以设置负载均衡调度状态。</p><ul><li>down  表示这台服务器不参与负载均衡</li><li>backup  表示这台服务器作为备用机器，当所有其他非备用机器故障或宕机时才启用</li><li>max_fails  允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误</li><li>fail_timeout： 在经历过max_fails 次失败后，暂停服务的时间</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> server_group &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:80</span> backup;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.2:80</span> down;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.3:8080</span>  max_fails=<span class="number">3</span>  fail_timeout=<span class="number">20s</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.4:8080</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p><strong>实现效果：</strong>访问/www/a.html可以访问到服务器上/data/www/a.html,访问/image/scroll.png可以访问到服务器上/data/image/scroll.png</p><p><strong>准备工作：</strong>在Linux的/目录下一个data目录，data目录下建立一个www和image文件夹用于存放静态资源</p><p><strong>开始配置：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  **.**.**.**;</span><br><span class="line"></span><br><span class="line">       <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> /www/ &#123;</span><br><span class="line">           <span class="attribute">root</span>   /data/;</span><br><span class="line">           <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> /image/ &#123;</span><br><span class="line">           <span class="attribute">root</span> /data/;</span><br><span class="line">           autoindex on; //列出当前文件夹中的资源</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx高可用集群"><a href="#Nginx高可用集群" class="headerlink" title="Nginx高可用集群"></a>Nginx高可用集群</h1><p><strong>准备工作：</strong></p><ul><li><p>准备两台Linux服务器</p></li><li><p>两台服务器安装好nginx，参考上面的配置</p></li><li><p>两台服务器安装好keepalived</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> keepalived -y</span><br></pre></td></tr></table></figure><p>安装好后可以在/etc/中找到keepalived</p></li></ul><p><strong>Keepalived+Nginx(主从模式)</strong></p><ul><li>修改keeyalived.conf文件(/etc/keeyalived.conf)  可以参考以下配置</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line"> notification_email &#123;</span><br><span class="line"> </span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">     notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">     smtp_server 192.168.17.129</span><br><span class="line">     smtp_connect_timeout 30</span><br><span class="line">     router_id LVS_DEVEL  #访问本机的名字，可以通过/etc/hots进行设置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"> script </span><span class="string">"/usr/local/src/nginx_check.sh"</span> #脚本文件</span><br><span class="line"></span><br><span class="line">     interval 2 #（检测脚本执行的间隔）</span><br><span class="line"></span><br><span class="line">     weight -20 # 权重的改变，当服务器挂掉时做出改变</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">     state BACKUP # 备份服务器上将 MASTER 改为 BACKUP</span><br><span class="line">    <span class="built_in"> interface </span>ens33 #网卡，可以通过ifconfig进行查看</span><br><span class="line">     virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同</span><br><span class="line">     priority 100 # 主、备机取不同的优先级，主机值较大，备份机值较小</span><br><span class="line">     advert_int 1  # 心跳检测时间</span><br><span class="line">     </span><br><span class="line">     authentication &#123; #权限验证</span><br><span class="line">         auth_type PASS</span><br><span class="line">         auth_pass 1111</span><br><span class="line">  &#125;</span><br><span class="line"> virtual_ipaddress &#123;</span><br><span class="line"> 192.168.17.50 #<span class="built_in"> VRRP </span>H 虚拟地址</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加nginx_check.sh 脚本文件，路径对应上面keeyalived.conf的配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C nginx –no-header |wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line"> /usr/<span class="built_in">local</span>/nginx/sbin/nginx  <span class="comment">#nginx启动脚本位置</span></span><br><span class="line"> sleep 2</span><br><span class="line"> <span class="keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line"> killall keepalived</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>启动Nginx和Keepalived</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br><span class="line">systemctl <span class="literal">start</span> keepalived.service</span><br></pre></td></tr></table></figure><h1 id="Nginx原理"><a href="#Nginx原理" class="headerlink" title="Nginx原理"></a>Nginx原理</h1><p><strong>master&amp;worker</strong></p><p>​        nginx服务有一个master进程和多个woker进程(通过worker_processes决定)。master进程负责管理、监控worker进程，而worker进程负责具体的请求处理。</p><p>​        请求首先发给master进程，由master通知worker进行争抢。</p><p><img src="https://s2.ax1x.com/2020/01/31/11csLq.png" alt="image"></p><p>*<em>master-workers 的机制的好处 *</em></p><ul><li>对于每一个worker来说，由于是独立的进程，不需要加锁，节省的加锁带来的开销，彼此之间互不影响。</li><li>每一个worker独立工作，当一个进程退出后，其他进程还可以继续工作，降低了风险。master 进程可以很快启动新的 worker 进程</li><li>有利于热加载的实现</li></ul><p><strong>需要设置多少个 worker</strong></p><p>​        Nginx 同 redis 类似都采用了 io 多路复用机制，每个 worker 都是一个独立的进程，但每个进 程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话 下。每个 worker 的线程可以把一个 cpu 的性能发挥到极致。所以 worker 数和服务器的 cpu 数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置 worker 数量。</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#work 绑定 cpu(4 work 绑定 4cpu)。</span></span><br><span class="line">worker_cpu_affinity <span class="number">0001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#work 绑定 cpu (4 work 绑定 8cpu 中的 4 个) 。</span></span><br><span class="line">worker_cpu_affinity <span class="number">0000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span></span><br></pre></td></tr></table></figure><p><strong>连接数 worker_connection</strong></p><p>​        这个值是表示每个 worker 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接 数，应该是 worker_connections * worker_processes。当然，这里说的是最大连接数，对于 HTTP 请 求 本 地 资 源 来 说 ， 能 够 支 持 的 最 大 并 发 数 量 是 worker_connections * worker_processes，如果是支持 http1.1 的浏览器每次访问要占两个连接，所以普通的静态访 问最大并发数是： worker_connections * worker_processes /2，而如果是 HTTP 作 为反向代 理来说，最大并发数量应该是 worker_connections * worker_processes/4。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服 务的连接，会占用两个连接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx是什么&quot;&gt;&lt;a href=&quot;#Nginx是什么&quot; class=&quot;headerlink&quot; title=&quot;Nginx是什么?&quot;&gt;&lt;/a&gt;Nginx是什么?&lt;/h1&gt;&lt;p&gt;​        Nginx是一个高性能的HTTP和反向代理的web服务器，具有轻量级、占用内存少、并发能力强的特点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Nginx" scheme="http://liuyoubin.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Spring扩展1----生命周期</title>
    <link href="http://liuyoubin.top/2020/01/29/backEnd/framework/Spring%E6%89%A9%E5%B1%951-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://liuyoubin.top/2020/01/29/backEnd/framework/Spring%E6%89%A9%E5%B1%951-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-01-29T07:47:29.000Z</published>
    <updated>2020-01-29T09:23:21.370Z</updated>
    
    <content type="html"><![CDATA[<p>​        在传统的java应用中，对象的生命周期是比较简单的，程序员通过new关键字就可以实例化一个对象进行使用了，当对象不再需要使用的时候，由JVM垃圾回收器进行回收就可以了。</p><p>​        相比之下，Spring容器管理之下的bean生命周期就复杂很多了。</p><a id="more"></a><p>​        先来看一副Bean生命周期图：</p><p><img src="https://s2.ax1x.com/2020/01/29/1QuVu8.png" alt="image"></p><p>​        上面就是SpringBean生命周期的基本流程，下面对每一个流程进行简单描述：</p><ol><li>在所有beanDenifition加载完成后，bean实例化之前执行这个方法。如果在beanFactory加载完所有bean后想修改某个bean或者对beanFactory做一些配置可以用这个方法。</li><li>通过beanDenifition实例化一个bean</li><li>按照Spring上下文对实例化的bean进行配置，处理自动注入</li><li>如果bean实现了BeanNameAware接口，则调用setBeanName()方法，设置bean的id</li><li>如果bean实现了BeanFactoryAware接口，则调用setBeanFactory()方法，设置Spring工厂自身</li><li>如果bean实现了ApplicationContextAware接口，则调用setApplicationAware()方法，设置Spring上下文</li><li>如果这个bean关联了BeanPostProcessor接口，则调用postProcessBeforeInitialization(Object bean, String beanName)方法</li><li>如果bean实现了InitializingBean接口,，则调用afterPropertiesSet()方法</li><li>如果配置文件或者@Bean中配置了init-method，则调用指定的初始化方法</li><li>如果这个bean关联了BeanPostProcessor接口，则调用postProcessAfterInitialization(Object bean, String beanName)方法</li><li>如果bean实现了DisposableBean接口,，则调用destroy()方法</li><li>如果配置文件或者@Bean中配置了destroy-method，则调用指定的销毁方法</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        在传统的java应用中，对象的生命周期是比较简单的，程序员通过new关键字就可以实例化一个对象进行使用了，当对象不再需要使用的时候，由JVM垃圾回收器进行回收就可以了。&lt;/p&gt;
&lt;p&gt;​        相比之下，Spring容器管理之下的bean生命周期就复杂很多了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="http://liuyoubin.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring中initializingBean、init-method、@PostConstruct执行顺序(源码分析)</title>
    <link href="http://liuyoubin.top/2020/01/28/backEnd/framework/Spring%E4%B8%ADinitializingBean%E3%80%81init-method%E3%80%81-PostConstruct%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://liuyoubin.top/2020/01/28/backEnd/framework/Spring%E4%B8%ADinitializingBean%E3%80%81init-method%E3%80%81-PostConstruct%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2020-01-28T09:29:30.000Z</published>
    <updated>2020-01-28T14:29:56.668Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>探究initializingBean、init-method、@PostConstruct的执行顺序 </p>          </div><a id="more"></a><p>​        在Spring容器中，Bean是有着完整的生命周期。Spring除了自定义了Bean实例化、初始化、销毁过程，还允许我们在Bean的初始化之后，销毁之前执行特定的操作来改变bean。常见的方式有三种</p><ul><li><p>实现<code>InitializingBean/DisposableBean</code> 的<code>afterPropertiesSet()/destroy()方法</code>来定制</p></li><li><p>通过在指定方法上添加<code>@PostConstruct</code>来实现</p></li><li><p>通过<code>init-method/destroy-method属性</code>来指定方法来定制</p><p>那么这三种方式定制的方法执行顺序是怎么样的呢？我们通过代码来验证。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>,<span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setName方法执行"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TestBean()&#123;</span><br><span class="line">        System.out.println(<span class="string">"TestBean构造方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  InitializingBean接口的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterPropertiesSet方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  DisposableBean接口的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroy方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过<span class="doctag">@PostConstruct</span>注解定制方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"@PostConstruct注解方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过initMethod指定的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"initMethod方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过destroyMethod指定的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroyMethod方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Bean</span>(initMethod = <span class="string">"initMethod"</span>,destroyMethod = <span class="string">"destroyMethod"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestBean <span class="title">createTestBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TestBean bean = <span class="keyword">new</span> TestBean();</span><br><span class="line">        bean.setName(<span class="string">"lyb"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        执行结果如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">静态代码块执行</span><br><span class="line">TestBean构造方法执行</span><br><span class="line">setName方法执行</span><br><span class="line">@PostConstruct注解方法执行</span><br><span class="line"><span class="keyword">after</span>PropertiesSet方法执行</span><br><span class="line">initMethod方法执行</span><br><span class="line"> </span><br><span class="line"> ........</span><br><span class="line"> </span><br><span class="line">destroy方法执行</span><br><span class="line">destroyMethod方法执行</span><br></pre></td></tr></table></figure><p>​        通过上面的结果就可以知道这三种方式定制的方法都是在<code>bean实例化之后</code>执行的,构造方法和属性设置已经完成了。顺序也就知道了：</p><p>Constructor &gt; <code>@PostConstruct &gt; InitialzingBean &gt; init-method</code> &gt; DisposableBean &gt; destroyMethod</p><p>​        那为什么是这个执行顺序呢?首先构造方法和属性注入先被执行是可以理解的。因为这三种方法都是在bean实例化执行用来修改定制bean的，所以构造方法和属性注入会被先执行完毕。</p><p>​        </p><p>​        @PostConstruct注解的方法为什么会先于InitalzingBean和init-method先执行呢，我们通过源码看看。</p><p>​        我们知道在Spring中产生一个bean要经过配置bean—&gt;生成bean元数据—&gt;生成bean这个过程。而bean的生成是通过BeanFactory中getBean()方法产生的。我们先通过BeanFactory找到其继承类AbstractAutowireCapableBeanFactory，并查看其中的getBean()方法。</p><p>​        通过getBean跟进到createBean()再跟进到doCreateBean()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">        BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">       </span><br><span class="line">    .....</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建bean的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instanceWrapper = <span class="keyword">this</span>.createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .......</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化一个bean</span></span><br><span class="line">        Object exposedObject = bean;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//处理bean的注入</span></span><br><span class="line">            <span class="keyword">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">            <span class="comment">//处理bean的初始化操作</span></span><br><span class="line">            exposedObject = <span class="keyword">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">            .....</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       .........</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        从这个方法可以看出doCreateBean()的三个核心逻辑：</p><ul><li><p>createBeanInstance方法实例化一个bean对象</p></li><li><p>处理bean之间的依赖注入，例如@Autowired注解</p></li><li><p>对bean进行初始化操作，例如@PostConstruct注解方法</p><p>​    继续进入initializeBean()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">       ......</span><br><span class="line"></span><br><span class="line">        Object wrappedBean = bean;</span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            <span class="comment">//初始化前置处理</span></span><br><span class="line">            wrappedBean = <span class="keyword">this</span>.applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用初始化方法</span></span><br><span class="line">            <span class="keyword">this</span>.invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">            </span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            <span class="comment">//初始化后置处理</span></span><br><span class="line">            wrappedBean = <span class="keyword">this</span>.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        @PostConstruct注解方法将在applyBeanPostProcessorsBeforeInitialization()方法中处理：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> applyBeanPostProcessorsBeforeInitialization(<span class="keyword">Object</span> existingBean, <span class="keyword">String</span> beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">Object</span> result = existingBean;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> current;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历所有的后置处理器</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator var4 = <span class="keyword">this</span>.getBeanPostProcessors().iterator(); var4.hasNext(); result = current) &#123;</span><br><span class="line">            BeanPostProcessor processor = (BeanPostProcessor)var4.next();</span><br><span class="line">            <span class="comment">// 调用初始化前置方法</span></span><br><span class="line">            current = processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        @PostConstruct注解的bean将会被其中一个BeanPostProcessor（bean的后置处理器）处理。</p><p>找到其实现类InitDestroyAnnotationBeanPostProcessor，从这个名字可以看出这是对bean初始化和销毁做处理的一个后置处理器。</p><p>​        跟进其postProcessBeforeInitialization()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata metadata = <span class="keyword">this</span>.findLifecycleMetadata(bean.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            metadata.invokeInitMethods(bean, beanName);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Invocation of init method failed"</span>, var5.getTargetException());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Failed to invoke init method"</span>, var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        findLifecycleMetadata()会解析元数据，所以@PostConstruct注解的方法将会被找到,分析下面两段段代码发现，在这里会去判断某方法有没有被initAnnotationType/destroyAnnotationType注解，如果有，则添加到init/destroy队列中，后续一一执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> InitDestroyAnnotationBeanPostProcessor.<span class="function">LifecycleMetadata <span class="title">findLifecycleMetadata</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.lifecycleMetadataCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.buildLifecycleMetadata(clazz);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata metadata = (InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata)<span class="keyword">this</span>.lifecycleMetadataCache.get(clazz);</span><br><span class="line">           <span class="keyword">if</span> (metadata == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">synchronized</span>(<span class="keyword">this</span>.lifecycleMetadataCache) &#123;</span><br><span class="line">                   </span><br><span class="line">                   metadata = (InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata)<span class="keyword">this</span>.lifecycleMetadataCache.get(clazz);</span><br><span class="line">                   <span class="keyword">if</span> (metadata == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="comment">//构建元数据</span></span><br><span class="line">                       metadata = <span class="keyword">this</span>.buildLifecycleMetadata(clazz);</span><br><span class="line">                       <span class="keyword">this</span>.lifecycleMetadataCache.put(clazz, metadata);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">return</span> metadata;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> metadata;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​        跟进buildLifecycleMetadata(),</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> InitDestroyAnnotationBeanPostProcessor.<span class="function">LifecycleMetadata <span class="title">buildLifecycleMetadata</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> debug = <span class="keyword">this</span>.logger.isDebugEnabled();</span><br><span class="line">       List&lt;InitDestroyAnnotationBeanPostProcessor.LifecycleElement&gt; initMethods = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       List&lt;InitDestroyAnnotationBeanPostProcessor.LifecycleElement&gt; destroyMethods = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       Class targetClass = clazz;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           List&lt;InitDestroyAnnotationBeanPostProcessor.LifecycleElement&gt; currInitMethods = <span class="keyword">new</span> ArrayList();</span><br><span class="line">           List&lt;InitDestroyAnnotationBeanPostProcessor.LifecycleElement&gt; currDestroyMethods = <span class="keyword">new</span> ArrayList();</span><br><span class="line">           </span><br><span class="line">           ReflectionUtils.doWithLocalMethods(targetClass, (method) -&gt; &#123;</span><br><span class="line">               <span class="comment">//判断是否被initAnnotationType注解</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.initAnnotationType != <span class="keyword">null</span> &amp;&amp; method.isAnnotationPresent(<span class="keyword">this</span>.initAnnotationType)) &#123;</span><br><span class="line">                   InitDestroyAnnotationBeanPostProcessor.LifecycleElement element = <span class="keyword">new</span> InitDestroyAnnotationBeanPostProcessor.LifecycleElement(method);</span><br><span class="line">                   currInitMethods.add(element);</span><br><span class="line">                   <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.logger.debug(<span class="string">"Found init method on class ["</span> + clazz.getName() + <span class="string">"]: "</span> + method);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">//判断是否被destroyAnnotationType注解</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.destroyAnnotationType != <span class="keyword">null</span> &amp;&amp; method.isAnnotationPresent(<span class="keyword">this</span>.destroyAnnotationType)) &#123;</span><br><span class="line">                   currDestroyMethods.add(<span class="keyword">new</span> InitDestroyAnnotationBeanPostProcessor.LifecycleElement(method));</span><br><span class="line">                   <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.logger.debug(<span class="string">"Found destroy method on class ["</span> + clazz.getName() + <span class="string">"]: "</span> + method);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">  </span><br><span class="line">           &#125;);</span><br><span class="line">           initMethods.addAll(<span class="number">0</span>, currInitMethods);</span><br><span class="line">           destroyMethods.addAll(currDestroyMethods);</span><br><span class="line">           targetClass = targetClass.getSuperclass();</span><br><span class="line">       &#125; <span class="keyword">while</span>(targetClass != <span class="keyword">null</span> &amp;&amp; targetClass != Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata(clazz, initMethods, destroyMethods);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​        那么initAnnotationType和destroyAnnotationType是什么呢？我们看InitDestroyAnnotationBeanPostProcessor的父类CommonAnnotationBeanPostProcessor的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CommonAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setOrder(<span class="number">2147483644</span>);</span><br><span class="line">      <span class="keyword">this</span>.setInitAnnotationType(PostConstruct<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">this</span>.setDestroyAnnotationType(PreDestroy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">this</span>.ignoreResourceType(<span class="string">"javax.xml.ws.WebServiceContext"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​    看到这就差不多了，<code>@PostConstruct注解的方法会在BeanPostProcess中被处理，所以要会先于InitializingBean和init-method执行</code>。</p></li></ul><p>​        那InitialzingBean为什么会先于init-method执行呢？还是看上面提过的AbstractAutowireCapableBeanFactory类中的invokeInitMethods方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeInitMethods</span><span class="params">(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isInitializingBean = bean <span class="keyword">instanceof</span> InitializingBean;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断bean是否实现了isInitializingBean接口，如果实现了isInitializingBean接口就调用afterPropertiesSet方法</span></span><br><span class="line">        <span class="keyword">if</span> (isInitializingBean &amp;&amp; (mbd == <span class="keyword">null</span> || !mbd.isExternallyManagedInitMethod(<span class="string">"afterPropertiesSet"</span>))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Invoking afterPropertiesSet() on bean with name '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">                        <span class="comment">//调用afterPropertiesSet方法</span></span><br><span class="line">                        ((InitializingBean)bean).afterPropertiesSet();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;, <span class="keyword">this</span>.getAccessControlContext());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PrivilegedActionException var6) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> var6.getException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//调用afterPropertiesSet方法</span></span><br><span class="line">                ((InitializingBean)bean).afterPropertiesSet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mbd != <span class="keyword">null</span> &amp;&amp; bean.getClass() != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            String initMethodName = mbd.getInitMethodName();</span><br><span class="line">            <span class="comment">//判断是否指定了initMethod方法，如果指定了则调用</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp; (!isInitializingBean || !<span class="string">"afterPropertiesSet"</span>.equals(initMethodName)) &amp;&amp; !mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">                <span class="comment">//反射调用指定的方法</span></span><br><span class="line">                <span class="keyword">this</span>.invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    </p><p>从上面可以看出<code>InitialzingBean会优先于init-method执行</code></p><p>总结:</p><ol><li>三种方式的执行时机都是在bean的初始化(initializeBean)中执行，<code>@PostConstruct &gt; InitialzingBean &gt; init-method</code></li><li>@PostConstruct的方法是通过一个BeanPostProcess进行处理</li><li>InitialzingBean和init-method则先后在invokeInitMethods()进行执行</li><li>InitialzingBean接口的方法是直接调用而init-method指定的方法通过反射调用，所以前者效率会高一些</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;探究initializingBean、init-method、@PostConstruct的执行顺序 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="http://liuyoubin.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议笔记</title>
    <link href="http://liuyoubin.top/2020/01/26/netWork/HTTP%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/26/netWork/HTTP%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-26T08:15:16.000Z</published>
    <updated>2020-01-26T15:50:19.692Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>HTTP相关知识 </p>          </div><a id="more"></a><h1 id="认识URL"><a href="#认识URL" class="headerlink" title="认识URL"></a>认识URL</h1><p><img src="https://s2.ax1x.com/2020/01/26/1nikMq.png" alt="image"></p><h1 id="Http协议简介"><a href="#Http协议简介" class="headerlink" title="Http协议简介"></a>Http协议简介</h1><p>​    http（Hyper Text Transfer Protocol）&lt;超文本传输协议&gt;</p><p>​    http协议就是一种客户端与服务端交互的通信格式</p><h1 id="Http报文"><a href="#Http报文" class="headerlink" title="Http报文"></a>Http报文</h1><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><h3 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请求行 【请求方式】【请求地址<span class="comment">(url)</span>】【http协议版本】<span class="comment">(回车符 空格符)</span></span><br><span class="line"></span><br><span class="line">请求头 【消息报头（一般用来说明客户端要使用的一些附加信息）】<span class="comment">(回车符 空格符)</span></span><br><span class="line"></span><br><span class="line">  【空行】<span class="comment">(请求行和请求实体之间必须空行)</span></span><br><span class="line"></span><br><span class="line">请求实体</span><br></pre></td></tr></table></figure><h3 id="请求头属性"><a href="#请求头属性" class="headerlink" title="请求头属性"></a>请求头属性</h3><p><img src="https://s2.ax1x.com/2020/01/26/1nk0qP.png" alt="image"></p><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ul><li>GET ：用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器</li><li>POST ：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。</li><li>PUT ：传输文件，报文主体中包含文件内容，保存到对应URI位置。</li><li>DELETE ： 删除文件，与PUT方法相反，删除对应URI位置的文件。</li><li>OPTION : 查询相应URI支持的HTTP方法。</li><li>HEAD : 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。</li></ul><h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">响应行 【http协议版本】【状态码】【状态消息】<span class="comment">(回车符 空格符)</span></span><br><span class="line"></span><br><span class="line">响应头 【响应报头】【客户端要使用的一些附加信息】<span class="comment">(回车符 空格符)</span></span><br><span class="line"></span><br><span class="line">  【空行】<span class="comment">(响应行和响应数据之间必须空行)</span></span><br><span class="line"></span><br><span class="line">响应实体：正文<span class="comment">(服务器给客户端的信息)</span></span><br></pre></td></tr></table></figure><h3 id="响应头属性"><a href="#响应头属性" class="headerlink" title="响应头属性"></a>响应头属性</h3><p><img src="https://s2.ax1x.com/2020/01/26/1nk2xs.png" alt="image"></p><h3 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h3><p><strong>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态代码</strong></p><ul><li><p>100  （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</p></li><li><p>101  （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</p></li></ul><hr><p><strong>2xx （成功） 表示成功处理了请求的状态代码</strong></p><ul><li><p>200  （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</p></li><li><p>201  （已创建）  请求成功并且服务器创建了新的资源。</p></li><li><p>202  （已接受）  服务器已接受请求，但尚未处理。</p></li><li><p>203  （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。</p></li><li><p>204  （无内容）  服务器成功处理了请求，但没有返回任何内容。</p></li><li><p>205  （重置内容） 服务器成功处理了请求，但没有返回任何内容。</p></li><li><p>206  （部分内容）客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。</p></li></ul><hr><p><strong>3xx （重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向</strong></p><ul><li><p>300  （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent)  选择一项操作，或提供操作列表供请求者选择。</p></li><li><p>301  （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p></li><li><p>302  （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p></li><li><p>303  （查看其他位置） 与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上</p></li><li><p>304  （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p></li><li><p>305  （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p></li><li><p>307  （临时重定向）与302类似，只是强制要求使用POST方法</p></li></ul><hr><p><strong>4xx（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理</strong></p><ul><li><p>400  （错误请求） 服务器不理解请求的语法。</p></li><li><p>401  （未授权） 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。</p></li><li><p>403  （禁止） 服务器拒绝请求。</p></li><li><p>404  （未找到） 服务器找不到请求的网页。</p></li><li><p>405  （方法禁用） 禁用请求中指定的方法。</p></li><li><p>406  （不接受） 无法使用请求的内容特性响应请求的网页。</p></li><li><p>407  （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</p></li><li><p>408  （请求超时）  服务器等候请求时发生超时。</p></li><li><p>409  （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p></li><li><p>410  （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。</p></li><li><p>411  （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</p></li><li><p>412  （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</p></li><li><p>413  （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p></li><li><p>414  （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</p></li><li><p>415  （不支持的媒体类型） 请求的格式不受请求页面的支持。</p></li><li><p>416  （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</p></li><li><p>417  （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p></li></ul><hr><p><strong>5xx（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错</strong></p><ul><li><p>500  （服务器内部错误）  服务器遇到错误，无法完成请求。</p></li><li><p>501  （尚未实施） 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</p></li><li><p>502  （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</p></li><li><p>503  （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</p></li><li><p>504  （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p></li><li><p>505  （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p></li></ul><h1 id="Http协议特点"><a href="#Http协议特点" class="headerlink" title="Http协议特点"></a>Http协议特点</h1><ul><li><p>无连接</p><p><strong>无状态协议对于事务处理没有记忆能力</strong>。<strong>缺少状态意味着如果后续处理需要前面的信息</strong>，样可能导致每次连接的传送的数据量增大。另一方面，每次服务器不需要面内容时答应快。</p></li><li><p>无状态</p><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户端的请求，并收到客户端的答应后，即断开连接，采用这种方法可以节省时间</p></li><li><p>灵活</p><p>http协议可以传输任意类型的数据，正在传输的数据类型由Context-Type标记</p></li><li><p>基于TCP</p></li></ul><h1 id="一次完整的HTTP请求所经历的7个步骤"><a href="#一次完整的HTTP请求所经历的7个步骤" class="headerlink" title="一次完整的HTTP请求所经历的7个步骤"></a>一次完整的HTTP请求所经历的7个步骤</h1><p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p><ul><li>建立TCP连接</li></ul><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建 Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。<strong>HTTP是比TCP更高层次的应用层协议，根据规则， 只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80。</strong></p><ul><li>Web浏览器向Web服务器发送请求行</li></ul><p>一旦建立了TCP连接，<strong>Web浏览器就会向Web服务器发送请求命令</strong>。例如：GET /sample/hello.jsp HTTP/1.1。</p><ul><li><p>Web浏览器发送请求头</p></li><li><ul><li>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，<strong>之后浏览器发送了一空白行来通知服务器</strong>，它已经结束了该头信息的发送。</li></ul></li><li><p>Web服务器应答</p></li><li><ul><li>客户机向服务器发出请求后，服务器会客户机回送应答， <strong>HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</strong></li></ul></li><li><p>Web服务器发送应答头</p></li><li><ul><li>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</li></ul></li><li><p>Web服务器向浏览器发送数据</p></li><li><ul><li>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，<strong>它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据</strong>。</li></ul></li><li><p>Web服务器关闭TCP连接</p><p><code>Connection:keep-alive</code></p></li><li><ul><li>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：</li></ul></li></ul><p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p><p>建立TCP连接-&gt;发送请求行-&gt;发送请求头-&gt;（到达服务器）发送状态行-&gt;发送响应头-&gt;发送响应数据-&gt;断TCP连接</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;HTTP相关知识 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="http" scheme="http://liuyoubin.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Java中的值传递与引用传递</title>
    <link href="http://liuyoubin.top/2020/01/25/backEnd/java/%E6%B5%85%E8%B0%88Java%E4%B8%AD%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>http://liuyoubin.top/2020/01/25/backEnd/java/%E6%B5%85%E8%B0%88Java%E4%B8%AD%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</id>
    <published>2020-01-25T13:17:36.000Z</published>
    <updated>2020-01-25T16:45:27.179Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>在Java中到底是值传递还是引用传递还是两者都有? </p>          </div><a id="more"></a><h4 id="Java到底是值传递与引用传递"><a href="#Java到底是值传递与引用传递" class="headerlink" title="Java到底是值传递与引用传递?"></a>Java到底是值传递与引用传递?</h4><p>​        对于这个问题，网上一直有很大的争议。有很多人认为只有值传递；也有很大一部分人认为Java既有值传递也有引用传递。认为Java既有值传递也有引用传递的人大都认为基本数据类型的传递是值传递，而引用类型的传递就是引用传递。</p><p><strong>对于这个问题我先给出结论:</strong></p><p>​     <strong>Java只有值传递没有引用传递</strong></p><hr><h4 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h4><p>先来看一下概念:</p><ul><li><p>值传递: 方法调用时，实参的数值被复制出另一个副本，然后传递副本</p></li><li><p>引用传递: 方法调用时,实参的地址直接传递到被调用的方法中</p></li></ul><table><thead><tr><th></th><th align="center">值传递</th><th align="center">引用传递</th></tr></thead><tbody><tr><td>本质区别</td><td align="center">方法调用时，实参复制副本进行传递</td><td align="center">方法调用时，实参地址直接进行传递</td></tr><tr><td>是否改变原来参数</td><td align="center">否</td><td align="center">是</td></tr></tbody></table><p>​      从上面可以看出值传递与引用传递的本质区别是: <code>方法调用时是传递了实参的副本还是实参的地址</code>,与实参的类型没有关系</p><hr><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><h5 id="验证基本数据类型"><a href="#验证基本数据类型" class="headerlink" title="验证基本数据类型"></a>验证基本数据类型</h5><ul><li>代码</li></ul><p><img src="https://s2.ax1x.com/2020/01/25/1eqMss.png" alt="image"></p><ul><li>运行结果</li></ul><p><a href="https://imgchr.com/i/1eqwLR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/25/1eqwLR.md.png" alt="1eqwLR.md.png"></a></p><ul><li>说明</li></ul><p><code>上面结果表明基本数据类型的传递是值传递，方法改变的是实参的副本，原来参数不会发生改变</code></p><h5 id="验证引用类型"><a href="#验证引用类型" class="headerlink" title="验证引用类型"></a>验证引用类型</h5><ul><li>代码</li></ul><p><img src="https://s2.ax1x.com/2020/01/26/1ejsnH.png" alt="image"></p><ul><li>结果</li></ul><p><img src="https://s2.ax1x.com/2020/01/26/1ejR4P.png" alt="image"></p><p>​      <strong>看到这里是不是有疑问,不是说值传递不会改变原来参数的值吗？这不就改变了吗，难道上面的结论是错的?</strong></p><p>​      其实结论并没有错，上面已经讲了值传递传递的是实参的副本，而我们在<code>传递引用类型的时候传递的并不是对象本身而是引用</code>。所以看是不是<code>值传递</code>就看这个引用到底有没有被复制。</p><p>​     看一下下面这张图就清楚了，上面的代码执行的时候发生了什么?</p><p><img src="https://s2.ax1x.com/2020/01/26/1exz79.png" alt="image"></p><p>​        对于引用类型来说，参数传递的过程中传递的不是对象本身而是引用。引用发生了复制，传递的是副本，引用指向了同一对象。这也是为什么对象信息会发生改变但又说是值传递的原因了。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;在Java中到底是值传递还是引用传递还是两者都有? &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
      <category term="Java" scheme="http://liuyoubin.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>排序算法整理</title>
    <link href="http://liuyoubin.top/2020/01/25/algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://liuyoubin.top/2020/01/25/algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</id>
    <published>2020-01-25T12:36:57.000Z</published>
    <updated>2020-01-25T12:46:23.457Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>常见排序算法整理 </p>          </div><a id="more"></a><h1 id="排序算法开篇"><a href="#排序算法开篇" class="headerlink" title="排序算法开篇"></a>排序算法开篇</h1><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：<strong>插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序</strong>等</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/732153/1579686757219-ff476e49-e2d7-4592-a35b-8a5e807d75bc.png" alt="微信图片_20200122175039.png"></p><h3 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h3><ul><li>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li><li>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序。</li><li>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。希尔排序。</li><li>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</li></ul><h3 id="关于稳定性"><a href="#关于稳定性" class="headerlink" title="关于稳定性"></a>关于稳定性</h3><ul><li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</li><li>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</li></ul><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><p>n：数据规模</p></li><li><p>k：“桶”的个数</p></li><li><p>In-place：占用常数内存，不占用额外内存</p></li><li><p>Out-place：占用额外内存</p></li><li><p>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</p></li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h3 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a>算法步骤：</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;array.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(array[j]&gt;array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = array[j];</span><br><span class="line">                    array[j]=array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h3 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h3><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h3 id="算法步骤：-1"><a href="#算法步骤：-1" class="headerlink" title="算法步骤："></a>算法步骤：</h3><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><h3 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//记录目前最小元素下标</span></span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;array.length;j++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(array[minIndex]&gt;array[j])&#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(minIndex!=i)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = array[i];</span><br><span class="line">                array[i] = array[minIndex];</span><br><span class="line">                array[minIndex] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h3 id="介绍：-2"><a href="#介绍：-2" class="headerlink" title="介绍："></a>介绍：</h3><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入</p><h3 id="算法步骤：-2"><a href="#算法步骤：-2" class="headerlink" title="算法步骤："></a>算法步骤：</h3><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ol><h3 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从下标1开始扫描,下标0的元素默认为有序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="comment">//记录待插入的元素</span></span><br><span class="line">            <span class="keyword">int</span> tmp = array[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; tmp&lt;array[j-<span class="number">1</span>])&#123;</span><br><span class="line">                array[j] = array[j-<span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//存在比其小的数，插入</span></span><br><span class="line">            <span class="keyword">if</span>(j!=i)&#123;</span><br><span class="line">                array[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;java</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;常见排序算法整理 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://liuyoubin.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://liuyoubin.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/25/backEnd/Tomcat%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/25/backEnd/Tomcat%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-25T12:29:08.000Z</published>
    <updated>2020-01-29T15:38:06.906Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>Tomcat相关知识笔记 </p>          </div><a id="more"></a><h2 id="Tomcat目录"><a href="#Tomcat目录" class="headerlink" title="Tomcat目录"></a>Tomcat目录</h2><ul><li><p>bin</p><p>bin目录主要是用来存放tomcat的命令，主要有两大类，一类是以.sh结尾的（linux命令），另一类是以.bat结尾的（windows命令）。</p></li><li><p>conf</p><p>conf目录主要是用来存放tomcat的一些配置文件。</p><p>server.xml可以设置端口号、设置域名或IP、默认加载的项目、请求编码<br>web.xml可以设置tomcat支持的文件类型<br>context.xml可以用来配置数据源之类的<br>tomcat-users.xml用来配置管理tomcat的用户与权限<br>在Catalina目录下可以设置默认加载的项目</p></li><li><p>lib</p><p>lib目录主要用来存放tomcat运行需要加载的jar包。</p></li><li><p>logs</p><p>logs目录用来存放tomcat在运行过程中产生的日志文件。</p><p>在windows环境中，控制台的输出日志在catalina.xxxx-xx-xx.log文件中</p><p>在linux环境中，控制台的输出日志在catalina.out文件中</p></li><li><p>temp</p><p>temp目录用户存放tomcat在运行过程中产生的临时文件。</p></li><li><p>webapps</p><p>webapps目录用来存放应用程序，当tomcat启动时会去加载webapps目录下的应用程序。可以以文件夹、war包、jar包的形式发布应用。<br>当然，你也可以把应用程序放置在磁盘的任意位置，在配置文件中映射好就行。</p></li><li><p>work</p><p>work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。</p></li></ul><h2 id="Tomcat结构"><a href="#Tomcat结构" class="headerlink" title="Tomcat结构"></a>Tomcat结构</h2><h3 id="Tomcat顶层架构"><a href="#Tomcat顶层架构" class="headerlink" title="Tomcat顶层架构"></a>Tomcat顶层架构</h3><p><img src="https://s2.ax1x.com/2020/01/07/l6vjQP.png" alt="l6vjQP.png"></p><p>Tomcat最顶层的容器是<strong>Server</strong>代表整个服务器,一个<strong>Server</strong>至少可以包含一个<strong>Service</strong>，用于提供具体服务</p><p><strong>Service</strong>主要包含两个部分：<strong>Connection</strong>和<strong>Container</strong></p><blockquote><p><code>Connector</code>: 连接器用于处理连接相关的事情，并提供<code>Socket</code>与<code>Request</code>和<code>Response</code>相关的转换；<code>Container</code>: 容器用于封装和管理<code>Servlet</code>，以及具体处理<code>Request</code>请求；</p></blockquote><h3 id="Connection和Container的关系"><a href="#Connection和Container的关系" class="headerlink" title="Connection和Container的关系"></a>Connection和Container的关系</h3><p>一个请求发送到<code>Tomcat</code>后，交给<code>Service</code>，<code>Service</code>会将请求交给<code>Connector</code>,<code>Connector</code>用于接收请求并将请求封装成<code>Request</code>对象交给<code>Container</code>处理，处理完后<code>Container</code>将<code>Response</code>交给<code>Connection</code>,<code>Connection</code>将结构通过Socket返回给客户端。</p><h3 id="Container架构"><a href="#Container架构" class="headerlink" title="Container架构"></a>Container架构</h3><p><img src="https://s2.ax1x.com/2020/01/07/lcCnPg.png" alt="lcCnPg.png"></p><blockquote><p>Engine：引擎，用来管理多站点，一个Service最多只有能有一个Engine;<br>Host：代表一个站点，也可以叫做虚拟主机，通过配置Host就可以添加站点；<br>Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面的web.xml文件；<br>Wrapper：每一个wrapper封装着一个Servlet;</p></blockquote><h2 id="Tomcat四种部署方式"><a href="#Tomcat四种部署方式" class="headerlink" title="Tomcat四种部署方式"></a>Tomcat四种部署方式</h2><ul><li>将应用文件夹部署到webapps下</li><li>将war包部署到webapps下</li><li>通过server.xml中的Context节点配置</li><li>通过描述符部署（\conf\Catalina)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;Tomcat相关知识笔记 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Tomcat" scheme="http://liuyoubin.top/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/25/backEnd/framework/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/25/backEnd/framework/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-25T09:18:26.000Z</published>
    <updated>2020-01-28T08:52:25.284Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>SpringBoot学习笔记的整理 </p>          </div><a id="more"></a><h1 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h1><p>如何将类的属性与yml配置文件中的指定参数进行绑定？</p><h2 id="ConfigurationProperties-Component"><a href="#ConfigurationProperties-Component" class="headerlink" title="@ConfigurationProperties+@Component"></a>@ConfigurationProperties+@Component</h2><pre><code>1 进行yml文件/properties文件配置2 在pom.xml中导入相关插件依赖3 使用@ConfigurationProperties和@Component注解类</code></pre><p>pojo类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyoubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 - 20:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 告诉SpringBoot将本类中的属性和配置文件中的相关配置一一绑定</span></span><br><span class="line"><span class="comment"> *  prefix 指定配置文件的绑定内容前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 将这个组件注册到容器中，才能使用容器提供的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(HashMap&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resource下的application.yml文件/properties文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">  name: lyb</span><br><span class="line">  age: 22</span><br><span class="line">  list:</span><br><span class="line">    - aaa</span><br><span class="line">    - bbb</span><br><span class="line">    - ccc</span><br><span class="line">  map: &#123;K1: v1,K2: v2&#125;</span><br><span class="line">  dog:</span><br><span class="line">    name: jm</span><br><span class="line">    age: 4</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">person.<span class="attribute">name</span>=lyb</span><br><span class="line">person.<span class="attribute">age</span>=22</span><br><span class="line">person.map.<span class="attribute">k1</span>=v1</span><br><span class="line">person.map.<span class="attribute">k2</span>=v2</span><br><span class="line">person.<span class="attribute">list</span>=z,s,a</span><br><span class="line">person.dog.<span class="attribute">name</span>=jm</span><br><span class="line">person.dog.<span class="attribute">age</span>=4</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Component-Value"><a href="#Component-Value" class="headerlink" title="@Component+@Value"></a>@Component+@Value</h2><p>第二种</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = "person")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Component</span>将组件加入到容器中，<span class="doctag">@Value</span>进行设值</span></span><br><span class="line"><span class="comment">     *      相当与&lt;bean class="Person"&gt;&lt;property name="?"&gt;&lt;/property&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span>支持 1、字面量 2、$&#123;key&#125;获取配置文件的值 3、#&#123;SpEL&#125;Spring表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;person.name&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"#&#123;11*2&#125;"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> int age;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    ·······<span class="keyword">set</span>、<span class="keyword">get</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置文件的引入"><a href="#配置文件的引入" class="headerlink" title="配置文件的引入"></a>配置文件的引入</h1><p>SpringBoot默认是不加载Spring配置文件的，那么如何解决呢？</p><p>一 通过@ImportResource(locations = {})</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：这个注解是导入外部的配置文件，并且必须加载配置类上(比如：启动类)</span><br><span class="line">示例：</span><br><span class="line">  <span class="keyword">@ImportResource</span>(locations = &#123;"<span class="selector-tag">classpath</span><span class="selector-pseudo">:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><p>二 通过配置类全注解的方式类代替配置文件，<code>推荐</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyoubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/10 - 10:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span> 指明当前类是一个配置类，用于代替之前的Spring文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此方法返回值将添加到容器中，容器中这个组件的id默认为方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h1><h2 id="使用日志配置文件"><a href="#使用日志配置文件" class="headerlink" title="使用日志配置文件"></a>使用日志配置文件</h2><p>可以在类路径下放上日志框架的配置文件，替换SpringBoot的默认配置</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">logback.xml示例</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="xml">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="xml">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/app/log"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"atguigu-springboot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        日志输出格式：</span></span><br><span class="line"><span class="xml">%d表示日期时间，</span></span><br><span class="line"><span class="xml">%thread表示线程名，</span></span><br><span class="line"><span class="xml">%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="xml">%logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="xml">%msg：日志消息，</span></span><br><span class="line"><span class="xml">%n是换行符</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [%thread] %-5level %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_HOME&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;appName&#125;</span><span class="xml">.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="xml">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            滚动时产生的文件的存放位置及文件名称 %d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">：按天进行日志滚动 </span></span><br><span class="line"><span class="xml">            %i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_HOME&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;appName&#125;</span><span class="xml">-%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，</span></span><br><span class="line"><span class="xml">            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，</span></span><br><span class="line"><span class="xml">            那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span>     </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [ %thread ] - [ %-5level ] [ %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="xml">name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="xml">level：要记录的日志级别，包括 TRACE <span class="tag">&lt; <span class="attr">DEBUG</span> &lt; <span class="attr">INFO</span> &lt; <span class="attr">WARN</span> &lt; <span class="attr">ERROR</span></span></span></span><br><span class="line"><span class="xml">additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="xml">false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="xml">表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.atguigu"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="xml">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 </span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="通过application-properties进行简单配置"><a href="#通过application-properties进行简单配置" class="headerlink" title="通过application.properties进行简单配置"></a>通过application.properties进行简单配置</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#指定日志级别</span><br><span class="line">logging.level.com.lyb=<span class="keyword">trace</span></span><br><span class="line"></span><br><span class="line">#不指定路径则在当前目录下生成日志文件</span><br><span class="line">#也可以指定路径</span><br><span class="line">logging.<span class="keyword">file</span>=sb.<span class="keyword">log</span></span><br><span class="line"></span><br><span class="line">#logging.path和logging.<span class="keyword">file</span>二选一</span><br><span class="line">#logging.path=/<span class="keyword">spring</span>/<span class="keyword">log</span>  在当前磁盘下的指定目录生成<span class="keyword">spring</span>.<span class="keyword">log</span>默认日志文件</span><br><span class="line"></span><br><span class="line">#在控制台输出的日志格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-<span class="number">5</span>level %logger&#123;<span class="number">50</span>&#125; -%msg%n</span><br><span class="line">#在指定文件中日志输出格式</span><br><span class="line">logging.pattern.<span class="keyword">file</span>=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-<span class="number">5</span>level ===%logger&#123;<span class="number">50</span>&#125; ===%msg%n</span><br></pre></td></tr></table></figure><h1 id="扩展SpringMvc"><a href="#扩展SpringMvc" class="headerlink" title="扩展SpringMvc"></a>扩展SpringMvc</h1><p>编写一个配置类继承WebMvcConfigurerAdapter，并且不能标注@EnableWebMvc</p><p><code>如果标注了@EnableWebMvc那么将全面接管SpringMvc，SpringBoot对于SpringMvc的自动配置将不起作用</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加视图映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//浏览器发送/add请求，转到success页面(不需要经过控制器)</span></span><br><span class="line">        registry.addViewController(<span class="string">"/add"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视图解析器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认jsp("/WEB-INF/", ".jsp")</span></span><br><span class="line">        registry.jsp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态资源访问 相当于&lt;mvc:default-servlet-handler/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><p>页面国际化的解决</p><h2 id="实现根据浏览器语言的设置实现国际化"><a href="#实现根据浏览器语言的设置实现国际化" class="headerlink" title="实现根据浏览器语言的设置实现国际化"></a>实现根据浏览器语言的设置实现国际化</h2><ol><li>编写国际化配置文件<br><img src="https://s2.ax1x.com/2020/01/25/1etPFH.png" alt="image"></li><li>在application.properties中设置国际化文件的路径，让springboot能查询到<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.messages.basename</span>=i18n.login</span><br></pre></td></tr></table></figure></li><li>在页面中通过thymeleaf的表达式获取，通过#{}获取配置文件的值<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.tip&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">th:placeholder</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">th:placeholder</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span> /&gt;</span> [[#</span><span class="template-variable">&#123;login.remeber&#125;</span><span class="xml">]]</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">     </span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.btn&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>现在的效果是：根据浏览器语言的设置实现国际化</li></ol><h2 id="点击按钮切换国际化"><a href="#点击按钮切换国际化" class="headerlink" title="点击按钮切换国际化"></a>点击按钮切换国际化</h2><p>除了以上的通用步骤之外</p><ol start="4"><li>设置按钮的请求信息,通过请求头的一个属性来区分<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login.html</span>(l='zh_CN')&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login.html</span>(l='en_US')&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>编写区域信息解析器<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author liuyoubin</span></span><br><span class="line"><span class="comment"> * @date 2019/8/16 - 9:53</span></span><br><span class="line"><span class="comment"> * 解析请求头的区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> MyLocalResolver implements LocaleResolver &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Locale resolve<span class="constructor">Locale(HttpServletRequest <span class="params">httpServletRequest</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//获取请求头的区域属性</span></span><br><span class="line">        String l = httpServletRequest.get<span class="constructor">Parameter(<span class="string">"l"</span>)</span>;</span><br><span class="line">        <span class="comment">//系统默认的区域信息</span></span><br><span class="line">        Locale locale = <span class="module-access"><span class="module"><span class="identifier">Locale</span>.</span></span>get<span class="constructor">Default()</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">l</span>)</span>)&#123;</span><br><span class="line">            String<span class="literal">[]</span> s = l.split(<span class="string">"_"</span>);</span><br><span class="line">            <span class="comment">//语言代码、国家代码</span></span><br><span class="line">            locale = <span class="keyword">new</span> <span class="constructor">Locale(<span class="params">s</span>[0],<span class="params">s</span>[1])</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void set<span class="constructor">Locale(HttpServletRequest <span class="params">httpServletRequest</span>, HttpServletResponse <span class="params">httpServletResponse</span>, Locale <span class="params">locale</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将区域信息解析器加到SpringMvc容器中<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocalResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="三大组件的注册"><a href="#三大组件的注册" class="headerlink" title="三大组件的注册"></a>三大组件的注册</h1><p>由于springboot是以jar包的形式存在的，没有web.xml配置文件。所以三大组件的配置要通过springboot的三个注册器注册到servlet容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册Servlet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//注册servlet并添加路径映射</span></span><br><span class="line">        ServletRegistrationBean&lt;Servlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet(),<span class="string">"/MyServlet"</span>);</span><br><span class="line">        <span class="comment">//registrationBean.setLoadOnStartup(1); 设置启动顺序</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//可以指定要过滤的Servlet、也可以指定要拦截的路径</span></span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">        registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/MyServlet"</span>));</span><br><span class="line">        <span class="keyword">return</span>  registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyListener());</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="servlet容器的定制"><a href="#servlet容器的定制" class="headerlink" title="servlet容器的定制"></a>servlet容器的定制</h1><h2 id="定制和修改Servlet容器的相关配置"><a href="#定制和修改Servlet容器的相关配置" class="headerlink" title="定制和修改Servlet容器的相关配置"></a>定制和修改Servlet容器的相关配置</h2><ol><li>修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">server</span>.port=<span class="number">8081</span></span><br><span class="line"><span class="keyword">server</span>.context-path=/crud</span><br><span class="line"></span><br><span class="line"><span class="keyword">server</span>.tomcat.uri-encoding=UTF<span class="number">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的Servlet容器设置</span></span><br><span class="line"><span class="keyword">server</span>.xxx</span><br><span class="line"><span class="comment">//Tomcat的设置</span></span><br><span class="line"><span class="keyword">server</span>.tomcat.xxx</span><br></pre></td></tr></table></figure><ol start="2"><li>编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切换成其他的嵌入式servlet容器"><a href="#切换成其他的嵌入式servlet容器" class="headerlink" title="切换成其他的嵌入式servlet容器"></a>切换成其他的嵌入式servlet容器</h2><h5 id="Tomcat（默认使用）"><a href="#Tomcat（默认使用）" class="headerlink" title="Tomcat（默认使用）"></a>Tomcat（默认使用）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除默认的tomcat容器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="undertow"><a href="#undertow" class="headerlink" title="undertow"></a>undertow</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--排除默认的tomcat容器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h1><p><code>SpringBoot默认处理是通过ErrorMvcAutoConfiguration自动配置类来实现的</code></p><h2 id="定制错误的页面"><a href="#定制错误的页面" class="headerlink" title="定制错误的页面"></a>定制错误的页面</h2><h3 id="有模板引擎的情况下"><a href="#有模板引擎的情况下" class="headerlink" title="有模板引擎的情况下"></a>有模板引擎的情况下</h3><ul><li>在模板引擎文件夹的error目录下存放<code>状态码.html</code>文件<br>比如：templates/error/404.html</li><li>发生此状态码的错误就会来到此页面</li><li>也可以将文件名修改成4xx.html、5xx.html来实现批量匹配、精确优先原则</li></ul><p>页面能获取的信息；</p><pre><code>timestamp：时间戳status：状态码error：错误提示exception：异常对象message：异常消息errors：JSR303数据校验的错误都在这里可以在错误页面使用[[${status}]]来获取</code></pre><h3 id="没有模板引擎的情况下"><a href="#没有模板引擎的情况下" class="headerlink" title="没有模板引擎的情况下"></a>没有模板引擎的情况下</h3><ul><li>错误页面放在静态资源下</li><li>以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面<h2 id="如何定制错误的json数据"><a href="#如何定制错误的json数据" class="headerlink" title="如何定制错误的json数据"></a>如何定制错误的json数据</h2></li></ul><ol><li>自定义异常处理&amp;返回定制json数据；</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line"><span class="keyword">public</span> class MyExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @ExceptionHandler(UserNotExistException.class)</span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt; handleException(Exception e)&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        <span class="built_in">map</span>.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有自适应效果...,这样做无论是浏览器还是其他客户端都会返回josn数据，而不是根据浏览器返回错误页面</span></span><br></pre></td></tr></table></figure><ol start="2"><li>转发到/error进行自适应响应效果处理</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> @ExceptionHandler(UserNotExistException.class)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">         .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将数据放在请求域中，后面利用自定义的ErrorAttributes来获取数据返回出去</span></span><br><span class="line">        request.setAttribute(<span class="string">"ext"</span>,<span class="built_in">map</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//转发到/error</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 将我们的定制数据携带出去</p><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）</p><ul><li>完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</li><li>页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；<br>容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</li></ul><p>自定义ErrorAttributes(采用第二种方式)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从请求域中获取需要定制的数据---0表示从请求域中获取，详见源码</span></span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; ext = (<span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt;)requestAttributes.getAttrbitues(<span class="string">"etx"</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回出去的数据将可以在页面获取[[$&#123;ext.XX&#125;]]</span></span><br><span class="line">        map.put(<span class="string">"ext"</span>,ext);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容</code></p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h2><ul><li>开启基于注解的缓存 @EnableCaching</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@MapperScan</span>(<span class="string">"com.lyb.cache.mapper"</span>)</span><br><span class="line"><span class="variable">@EnableCaching</span></span><br><span class="line">public class CacheApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>标注缓存注解  <ul><li>Cacheable</li><li>CacheEvice</li><li>CachePut</li><li>Caching(组合注解，用于定义复杂的缓存规则)</li><li>CacheConfig(注解于类上，用于全局的缓存配置)<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    * </span>@Cacheable 将方法的运行结果进行缓存，以后再要相同的数据直接从缓存中获取，不需要查询数据库</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *  </span>几个属性：</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>cacheNames/value：指定缓存组件的名字（CacheManager管理着多个缓存组件，每个缓存组件都有一个唯一的名字）、</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>key:缓存数据使用的key,如果不指定默认使用方法的参数.（支持SpEL表答式，具体可以看课件）</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>keyGenerator：key的生成器，可以自己指定key的生成器的组件id</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *          </span>key/keyGenerator二选一</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>cacheManager：指定缓存管理器</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>cacheResolver：指定获取解析器</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *          </span>cacheManager/cacheResolver二选一</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>condition：指定符合条件的情况下才缓存</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>unless：与condition相反</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *      </span>sync：是否使用异步缓存</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    */</span></span></span></span><br><span class="line">   <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"emp"</span>)</span><br><span class="line">   public Employee getEmployee(Integer id)&#123;</span><br><span class="line">       System.out.println(<span class="string">"查询"</span>+id+<span class="string">"员工"</span>);</span><br><span class="line">       <span class="keyword">return</span> employeeMapper.getEmployee(id);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    * </span>@CachePut 缓存更新</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *          </span>先调用方法，再将更新的对象放到指定的缓存中</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *              </span>注意：如果没有指定key，那么key将会是方法参数的组合形式</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    */</span></span></span></span><br><span class="line">   <span class="meta">@CachePut</span>(cacheNames = <span class="string">"emp"</span>,key = <span class="string">"#employee.id"</span>)</span><br><span class="line">   public Employee updateEmp(Employee employee)&#123;</span><br><span class="line">       employeeMapper.updateEmp(employee);</span><br><span class="line">       <span class="keyword">return</span> employee;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    * </span>@CacheEvict  缓存清除</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *       </span>几个属性:</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *           </span>allEntries:指定是否删除所有缓存，默认是false</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    *           </span>beforeInvocation：指定是否在方法执行之后清除缓存，默认是false</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    */</span></span></span></span><br><span class="line">   <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"emp"</span>,key=<span class="string">"#id"</span>)</span><br><span class="line">   public <span class="keyword">void</span> deleteEmp(Integer id)&#123;</span><br><span class="line">       employeeMapper.deleteEmp(id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>自定义keyGenerator示例</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义key的生成器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"myKeyGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.getName()+<span class="string">"["</span>+ Arrays.asList(params) +<span class="string">"]"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><ol><li><p>启动redis</p></li><li><p>引入cache模块以及redis的starter</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置redis</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.190</span></span><br></pre></td></tr></table></figure><ol start="4"><li>注入template进行操作</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>redis五大基本数据类型</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>字符串(String)   stringRedisTemplate.opsForValue();</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>列表(List)       stringRedisTemplate.opsForList();</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>集合(Set)        stringRedisTemplate.opsForSet();</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>散列(Hash)       stringRedisTemplate.opsForHash();</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>有序集合(ZSet)   stringRedisTemplate.opsForZSet();</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">public <span class="keyword">void</span> contextLoads() &#123;</span><br><span class="line">    Employee employee = employeeMapper.getEmployee(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//默认如果保存数据，使用jdk的序列化机制，将序列化后的数据保存在redis中</span></span><br><span class="line">    redisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">"emp01"</span>, employee);</span><br><span class="line">    <span class="comment">//如果要转成json格式----(1)自己将对象转成json (2)使用redisTemplate的序列化规则</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>对象的存储</li></ol><ul><li>默认如果保存数据，使用jdk的序列化机制，将序列化后的数据保存在redis中</li><li>如果要转成json格式<ul><li>自己将对象转成json</li><li>使用redisTemplate的序列化规则<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> RedisConfig &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义RedisTemplate的序列化器</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="built_in">public</span> RedisTemplate&lt;<span class="keyword">Object</span>, Employee&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory)&#123;</span><br><span class="line">        RedisTemplate&lt;<span class="keyword">Object</span>, Employee&gt; template = <span class="built_in">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="keyword">template</span>.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="built_in">new</span> Jackson2JsonRedisSerializer(Employee.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">template</span>.setDefaultSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="6"><li>测试缓存</li></ol><p>原理：</p><ul><li><p>引入redis的starter后，容器中的缓存管理器是RedisCacheManager</p></li><li><p>RedisCacheManager帮我们创建RedisCache</p></li><li><p>对于对象数据，默认使用jdk序列化机制。这是由于RedisCacheManager操作Redis的时候使用的是默认的redistemplate</p></li></ul><p>解决：自定义CacheManager</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">   public RedisCacheManager redis<span class="constructor">CacheManager(RedisConnectionFactory <span class="params">redisConnectionFactory</span>)</span>&#123;</span><br><span class="line">       Jackson2JsonRedisSerializer redisSerializer = <span class="keyword">new</span> <span class="constructor">Jackson2JsonRedisSerializer(Employee.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       RedisCacheConfiguration cacheConfiguration = <span class="module-access"><span class="module"><span class="identifier">RedisCacheConfiguration</span>.</span></span>default<span class="constructor">CacheConfig()</span></span><br><span class="line">               .serialize<span class="constructor">ValuesWith(RedisSerializationContext.SerializationPair.<span class="params">fromSerializer</span>(<span class="params">redisSerializer</span>)</span>);</span><br><span class="line"></span><br><span class="line">       RedisCacheManager cacheManager = <span class="module-access"><span class="module"><span class="identifier">RedisCacheManager</span>.</span></span>builder(redisConnectionFactory).cache<span class="constructor">Defaults(<span class="params">cacheConfiguration</span>)</span>.build<span class="literal">()</span>;</span><br><span class="line">       return cacheManager;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="整合RabbitMQ"><a href="#整合RabbitMQ" class="headerlink" title="整合RabbitMQ"></a>整合RabbitMQ</h2><p>使用docker安装RabbitMQ</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:<span class="number">3</span>-management</span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">15672</span>:<span class="number">15672</span> --name myRabbitMQ <span class="number">8</span>b98d04578a5</span><br></pre></td></tr></table></figure><ol><li>引入相关的模块</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置相关文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.190</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用RabbitTemplate进行操作</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    @Autowired</span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单播</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void text<span class="literal">()</span>&#123;</span><br><span class="line">        <span class="comment">//可以自己定义消息对象；定义消息内容和消息体</span></span><br><span class="line">        <span class="comment">//rabbitTemplate.send(exchange, routingKey, message);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接使用需要发送的对象，自动序列化成消息体</span></span><br><span class="line">        <span class="comment">//rabbitTemplate.convertAndSend(exchange, routingKey, object);</span></span><br><span class="line">        Employee employee = employeeMapper.get<span class="constructor">Employee(1)</span>;</span><br><span class="line">        rabbitTemplate.convert<span class="constructor">AndSend(<span class="string">"exchange.direct"</span>, <span class="string">"lyb.emps"</span>, <span class="params">employee</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void recive<span class="literal">()</span>&#123;</span><br><span class="line">        Object o = rabbitTemplate.receive<span class="constructor">AndConvert(<span class="string">"lyb.emps"</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(o.get<span class="constructor">Class()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(o.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用json作为数据存储格式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于注解监听消息队列"><a href="#基于注解监听消息队列" class="headerlink" title="基于注解监听消息队列"></a>基于注解监听消息队列</h2><ol><li>@EnableRabbit开启基于注解的Rabbit模式</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableRabbit</span></span><br><span class="line">public class CacheApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用@RabbitListener监听消息队列里的内容</li></ol><h2 id="AmqpAdmin"><a href="#AmqpAdmin" class="headerlink" title="AmqpAdmin"></a>AmqpAdmin</h2><p>作用：用于创建删除交换器、队列、绑定规则</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testAmqpAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    amqpAdmin.declareExchange(<span class="keyword">new</span> DirectExchange(<span class="string">"lyb.users"</span>));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h1><h2 id="docker搭建Elasticsearch集群"><a href="#docker搭建Elasticsearch集群" class="headerlink" title="docker搭建Elasticsearch集群"></a>docker搭建Elasticsearch集群</h2><p><a href="https://blog.csdn.net/belonghuang157405/article/details/83301937" target="_blank" rel="noopener">博客链接</a></p><h2 id="整合Elasticsearch"><a href="#整合Elasticsearch" class="headerlink" title="整合Elasticsearch"></a>整合Elasticsearch</h2><h3 id="使用docker安装启动elasticsearch"><a href="#使用docker安装启动elasticsearch" class="headerlink" title="使用docker安装启动elasticsearch"></a>使用docker安装启动elasticsearch</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">docker pull elasticsearch:<span class="number">5.6</span><span class="number">.15</span></span><br><span class="line"></span><br><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> -d -p <span class="number">9200</span>:<span class="number">9200</span> -p <span class="number">9300</span>:<span class="number">9300</span> --name ES01 d7052f192d01</span><br></pre></td></tr></table></figure><h3 id="两种技术"><a href="#两种技术" class="headerlink" title="两种技术"></a>两种技术</h3><p><code>SpringBoot 默认支持两种技术来和ES交互</code></p><h4 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h4><blockquote><p>（默认不支持需要导入jest的工具包）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用jest提供的jestClient来操作Es</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>注意配置Es的地址：</span><br><span class="line">    spring.elasticsearch.jest.uris:http:<span class="comment">//192.168.1.190:9200</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">    public <span class="keyword">class</span> Article &#123;</span><br><span class="line">        @JestId <span class="comment">//声明主键，如果不声明，那么下面在构建索引功能的时候就要自己指定</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String author;</span><br><span class="line">        <span class="keyword">private</span> String title;</span><br><span class="line">        <span class="keyword">private</span> String context;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>测试</span><br><span class="line"></span><br><span class="line">@<span class="constructor">RunWith(SpringRunner.<span class="params">class</span>)</span></span><br><span class="line">@SpringBootTest</span><br><span class="line">public <span class="keyword">class</span> SpringbootElasticsearchApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JestClient jestClient;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void context<span class="constructor">Loads()</span> &#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> <span class="constructor">Article()</span>;</span><br><span class="line">        article.set<span class="constructor">Author(<span class="string">"罗贯中"</span>)</span>;</span><br><span class="line">        article.set<span class="constructor">Id(1)</span>;</span><br><span class="line">        article.set<span class="constructor">Title(<span class="string">"三国演绎"</span>)</span>;</span><br><span class="line">        article.set<span class="constructor">Context(<span class="string">"天下大势、合久必分、分久必合"</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建一个索引功能</span></span><br><span class="line">        Index index = <span class="keyword">new</span> Index.<span class="constructor">Builder(<span class="params">article</span>)</span>.index(<span class="string">"lyb"</span>).<span class="keyword">type</span>(<span class="string">"article"</span>).build<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            jestClient.execute(index);</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void search<span class="literal">()</span>&#123;</span><br><span class="line">        <span class="comment">//测试搜索</span></span><br><span class="line">        Search search = <span class="keyword">new</span> Search.<span class="constructor">Builder(<span class="string">""</span>)</span>.add<span class="constructor">Index(<span class="string">"lyb"</span>)</span>.add<span class="constructor">Type(<span class="string">"article"</span>)</span>.build<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//构建搜索功能</span></span><br><span class="line">            SearchResult result = jestClient.execute(search);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(result.get<span class="constructor">JsonString()</span>);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringData-Elasticsearch"><a href="#SpringData-Elasticsearch" class="headerlink" title="SpringData Elasticsearch"></a>SpringData Elasticsearch</h4><ol><li>导入spring data的elasticsearch模块</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意如果spring-data-elasticsearch和安装的elasticsearch版本不是适配会出现错误</p><p>具体的版本适配关系参考：</p><p>解决办法： 1)升级springboot版本 2)安装对应的Es</p></blockquote><ol start="2"><li>配置节点信息</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span>       <span class="string">//这个信息可以通过访问192.168.1.190:9200获取</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.190</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure><ol start="3"><li>操作Elasticsearch</li></ol><blockquote><p>具体用法参考 <a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.0.RELEASE/reference/html/#elasticsearch.operations" target="_blank" rel="noopener">https://docs.spring.io/spring-data/elasticsearch/docs/3.2.0.RELEASE/reference/html/#elasticsearch.operations</a><br>1.ElasticsearchRepository</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"lyb"</span>,type = <span class="string">"book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//可以使用父接口提供的api，也可以自己按照命名规则写功能方法，具体查看文档</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBookRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setAuthor(<span class="string">"金庸"</span>);</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setTitle(<span class="string">"天龙八部"</span>);</span><br><span class="line"></span><br><span class="line">        bookRepository.index(book);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>ElasticsearchTemplate</li></ol><h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><ul><li><p>将@EnableScheduling标注在主类上</p></li><li><p>将@Scheduled(cron=””)标注在定时调用方法上</p></li></ul><p><img src="https://s2.ax1x.com/2020/01/25/1egnF1.png" alt="image"></p><p><img src="https://s2.ax1x.com/2020/01/25/1eguJx.png" alt="image"></p><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><ul><li>将@EnableAsync标注在主类上将</li><li>@Async标注在需要实现异步调用的方法上</li></ul><h2 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h2><p>引入mail的starter依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置邮箱相关信息</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">mail</span>:</span><br><span class="line">    <span class="attribute">username</span>: <span class="number">734635746</span><span class="variable">@qq</span>.com</span><br><span class="line">    <span class="attribute">password</span>: boeqlkwhsxcrbaif     <span class="comment">//邮箱登陆授权码，不是邮箱的登陆密码</span></span><br><span class="line">    <span class="attribute">host</span>: smtp.qq.com</span><br><span class="line">    <span class="attribute">properties</span>:</span><br><span class="line">      mail.smtp.ssl.<span class="attribute">enable</span>: true   <span class="comment">//开启安全连接</span></span><br></pre></td></tr></table></figure><p>通过JavaMailSenderImpl来操作邮件的发送</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">    JavaMailSenderImpl javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单邮件的发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void  send<span class="constructor">Mail()</span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> <span class="constructor">SimpleMailMessage()</span>;</span><br><span class="line">        message.set<span class="constructor">To(<span class="string">"15521309102@189.cn"</span>)</span>;</span><br><span class="line">        message.set<span class="constructor">From(<span class="string">"734635746@qq.com"</span>)</span>;</span><br><span class="line">        message.set<span class="constructor">Subject(<span class="string">"重要通知"</span>)</span>;</span><br><span class="line">        message.set<span class="constructor">Text(<span class="string">"国庆不放假"</span>)</span>;</span><br><span class="line"></span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复杂邮件的发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void send<span class="constructor">ComplexMail()</span> throws MessagingException &#123;</span><br><span class="line">        <span class="comment">//创建一个复杂的邮件消息</span></span><br><span class="line">        MimeMessage mimeMessage = javaMailSender.create<span class="constructor">MimeMessage()</span>;</span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> <span class="constructor">MimeMessageHelper(<span class="params">mimeMessage</span>, <span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//邮件设置</span></span><br><span class="line">        helper.set<span class="constructor">To(<span class="string">"15521309102@189.cn"</span>)</span>;</span><br><span class="line">        helper.set<span class="constructor">From(<span class="string">"734635746@qq.com"</span>)</span>;</span><br><span class="line">        helper.set<span class="constructor">Subject(<span class="string">"重要通知"</span>)</span>;</span><br><span class="line">        helper.set<span class="constructor">Text(<span class="string">"&lt;b style='color:red'&gt;国庆不放假&lt;/b&gt;"</span>,<span class="params">true</span>)</span>; <span class="comment">//支持html格式</span></span><br><span class="line">        helper.add<span class="constructor">Attachment(<span class="string">"1.jpg"</span>,<span class="params">new</span> File(<span class="string">"F:\\bg.jpg"</span>)</span>); <span class="comment">//支持附件</span></span><br><span class="line"></span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="整合Spring-Security"><a href="#整合Spring-Security" class="headerlink" title="整合Spring-Security"></a>整合Spring-Security</h2><p>引入Spring-Security模块/thymeleaf和Security的整合模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Security</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableWebSecurity</span></span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制请求的授权规则</span></span><br><span class="line"><span class="comment">     * @param http</span></span><br><span class="line"><span class="comment">     * @throws Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置请求权限</span></span><br><span class="line">        <span class="selector-tag">http</span><span class="selector-class">.authorizeRequests</span>()<span class="selector-class">.antMatchers</span>(<span class="string">"/"</span>)<span class="selector-class">.permitAll</span>()</span><br><span class="line">                <span class="selector-class">.antMatchers</span>(<span class="string">"/level1/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"VIP1"</span>)</span><br><span class="line">                <span class="selector-class">.antMatchers</span>(<span class="string">"/level2/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"VIP2"</span>)</span><br><span class="line">                <span class="selector-class">.antMatchers</span>(<span class="string">"/level3/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"VIP3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动登陆功能，如果没有登陆就会来到security提供的登陆页面</span></span><br><span class="line">        <span class="comment">//默认来到/login</span></span><br><span class="line">        <span class="comment">//默认出现错误来到/login?error表示登陆失败</span></span><br><span class="line">        <span class="comment">//可以通过loginPage()来定制登陆页面</span></span><br><span class="line">        <span class="comment">//默认表单是post请求/login,security会进行登陆认证,一旦定制了loginPage那么默认规则会随之改变：比如此时的处理登陆请求就是post的/userlogin,也可以通过loginProcessingUrl修改</span></span><br><span class="line">        <span class="comment">//可以通过usernameParameter(),passwordParameter()来修改提交表单的参数名。默认是username和password</span></span><br><span class="line">        <span class="selector-tag">http</span><span class="selector-class">.formLogin</span>()<span class="selector-class">.usernameParameter</span>(<span class="string">"user"</span>)<span class="selector-class">.passwordParameter</span>(<span class="string">"pwd"</span>)<span class="selector-class">.loginPage</span>(<span class="string">"/userlogin"</span>)<span class="selector-class">.loginProcessingUrl</span>(<span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动配置的注销功能，访问/logout表示用户退出，清空session</span></span><br><span class="line">        <span class="comment">//默认登出后请求/login</span></span><br><span class="line">        <span class="selector-tag">http</span><span class="selector-class">.logout</span>()<span class="selector-class">.logoutSuccessUrl</span>(<span class="string">"/"</span>);<span class="comment">//定制注销成功以后来到首页</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能</span></span><br><span class="line">        <span class="selector-tag">http</span><span class="selector-class">.rememberMe</span>()<span class="selector-class">.rememberMeParameter</span>(<span class="string">"remeber"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制授权规则</span></span><br><span class="line"><span class="comment">     * @param auth</span></span><br><span class="line"><span class="comment">     * @throws Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="selector-tag">Override</span></span><br><span class="line">    <span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">configure</span>(AuthenticationManagerBuilder auth) <span class="selector-tag">throws</span> <span class="selector-tag">Exception</span> &#123;</span><br><span class="line">        <span class="comment">//super.configure(auth);</span></span><br><span class="line">        <span class="selector-tag">auth</span><span class="selector-class">.inMemoryAuthentication</span>()<span class="selector-class">.passwordEncoder</span>(new BCryptPasswordEncoder())<span class="selector-class">.withUser</span>(<span class="string">"lyb"</span>)<span class="selector-class">.password</span>(new BCryptPasswordEncoder().encode(<span class="string">"980328"</span>))<span class="selector-class">.roles</span>(<span class="string">"VIP1"</span>,<span class="string">"VIP3"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span></span><br><span class="line"><span class="xml">  xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4" &gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>欢迎光临武林秘籍管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"!isAuthenticated()"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>游客您好，如果想查看武林秘籍 <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">userlogin</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 您好，您的角色有<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注销"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('VIP1')"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>普通武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>1/1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>罗汉拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>1/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>武当长拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>1/3&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>全真剑法<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('VIP2')"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>高级武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>2/1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>太极拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>2/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>七伤拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>2/3&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>梯云纵<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('VIP3')"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>绝世武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>3/1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>葵花宝典<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>3/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>龟派气功<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>3/3&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>独孤九剑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>登陆页</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>欢迎登陆武林秘籍管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remeber"</span> /&gt;</span>记住我<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="dubbo-zookeeper"><a href="#dubbo-zookeeper" class="headerlink" title="dubbo-zookeeper"></a>dubbo-zookeeper</h2><h3 id="docker安装zookeeper"><a href="#docker安装zookeeper" class="headerlink" title="docker安装zookeeper"></a>docker安装zookeeper</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper</span><br><span class="line"></span><br><span class="line">docker run --name zk01 -p <span class="number">2181</span>:<span class="number">2181</span> --restart always -d 镜像id</span><br></pre></td></tr></table></figure><h3 id="dubbo的应用"><a href="#dubbo的应用" class="headerlink" title="dubbo的应用"></a>dubbo的应用</h3><h4 id="服务提供者应用"><a href="#服务提供者应用" class="headerlink" title="服务提供者应用"></a>服务提供者应用</h4><ol><li>引入相关模块</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--引入dubbo的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入zookeeper的客户端工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置dubbo的扫描包和注册中心地址</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot-dubbo-provider</span> <span class="comment">#当前应用的名字</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.1.190:2181</span> <span class="comment">#注册中心的地址</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.lyb.provider.service</span>  <span class="comment">#配置要注册的组件，扫描其所在的包</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动类配置注解扫描</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableDubbo</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class SpringbootDubboProviderApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(SpringbootDubboProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用dubbo的@Service来发布服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//将服务发布出去，注意这里使用的是dubbo的@Service注解而不是spring的@Service注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"《肖申克的救赎》"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务消费者应用"><a href="#服务消费者应用" class="headerlink" title="服务消费者应用"></a>服务消费者应用</h4><ol><li>引入相关模块</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--引入dubbo的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入zookeeper的客户端工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置dubbo的扫描包和注册中心地址</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">dubbo:</span></span><br><span class="line"><span class="symbol">  application:</span></span><br><span class="line"><span class="symbol">    name:</span> springboot-dubbo-consumer <span class="meta">#当前应用的名字</span></span><br><span class="line"><span class="symbol">  registry:</span></span><br><span class="line"><span class="symbol">    address:</span> zookeeper:<span class="comment">//192.168.1.190:2181 #注册中心的地址</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动类配置注解扫描</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableDubbo</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class SpringbootDubboProviderApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(SpringbootDubboProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在项目下建立服务提供者的提供接口(注意保持全类相同)</li></ol><p>比如：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">服务提供者：                    服务消费者</span><br><span class="line">com                             com                     </span><br><span class="line">  -<span class="ruby">lyb                             -lyb</span></span><br><span class="line"><span class="ruby">    -provider                        -provider</span></span><br><span class="line"><span class="ruby">      -service                          -service</span></span><br><span class="line"><span class="ruby">        -TicketService                    -TicketService</span></span><br><span class="line"><span class="ruby">        -TicketServiceImpl           -consumer</span></span><br><span class="line"><span class="ruby">                                        -service</span></span><br><span class="line"><span class="ruby">                                           -TicketConsumer</span></span><br></pre></td></tr></table></figure><ol start="5"><li>通过@Reference进行远程接口调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTicket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"买到票："</span>+ticketService.getTicket());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h1><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过配置文件配置数据源</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">datasource</span>:</span><br><span class="line">    <span class="attribute">username</span>: root</span><br><span class="line">    <span class="attribute">password</span>: lyb980328</span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//127.0.0.1:3306/s_01?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attribute">driver-class-name</span>: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>测试效果</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line"> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"> @Test</span><br><span class="line"> <span class="built_in">public</span> <span class="type">void</span> contextLoads() throws SQLException &#123;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(dataSource.getClass());</span><br><span class="line">     <span class="keyword">Connection</span> <span class="keyword">connection</span> = dataSource.getConnection();</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">connection</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>默认使用com.zaxxer.hikari.HikariDataSource数据源</p></li><li><p>数据源的相关配置将会被加载到DataSourceProperties里</p><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3></li><li><p>参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat数据源。可以使用spring.datasource.type指定数据源类型</p></li><li><p>springboot默认支持以下数据源</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.jdbc</span><span class="selector-class">.pool</span><span class="selector-class">.DataSource</span>  </span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.zaxxer</span><span class="selector-class">.hikari</span><span class="selector-class">.HikariDataSource</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.dbcp2</span><span class="selector-class">.BasicDataSource</span></span><br><span class="line"><span class="selector-tag">spring</span><span class="selector-class">.datasource</span><span class="selector-class">.dbcp2</span></span><br></pre></td></tr></table></figure><p><code>通过自动注入JdbcTemplate即可操作数据库</code></p></li></ul><p><code>注意踩坑</code></p><ul><li><code>com.mysql.jdbc.Driver</code> 是 mysql-connector-java 5中的，</li><li><code>com.mysql.cj.jdbc.Driver</code> 是 mysql-connector-java 6中的</li></ul><p>JDBC连接Mysql6 com.mysql.cj.jdbc.Driver， 需要指定时区serverTimezone</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">jdbc:</span><span class="string">mysql:</span><span class="comment">//localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"></span><br><span class="line">在设定时区的时候，如果设定serverTimezone=UTC，会比中国时间早<span class="number">8</span>个小时，如果在中国，可以选择Asia<span class="regexp">/Shanghai或者Asia/</span>Hongkong</span><br></pre></td></tr></table></figure><hr><h2 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h2><p>引入Druid依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入Druid数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定数据源</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">datasource</span>:</span><br><span class="line">    <span class="attribute">username</span>: root</span><br><span class="line">    <span class="attribute">password</span>: lyb980328</span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//127.0.0.1:3306/s_01?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attribute">driver-class-name</span>: com.mysql.jdbc.Driver</span><br><span class="line">    <span class="attribute">type</span>: com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure><p>数据源示例配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_crud</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙  </span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>由于DataSource里面并没有以上的扩展属性，所以我们要自己创建数据源对象加入容器</p><p>整合Druid</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    @Bean</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid监控</span></span><br><span class="line">    <span class="comment">//1.配置一个管理后台的servlet</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(),<span class="string">"/druid/*"</span>);</span><br><span class="line">        <span class="comment">//监控的参数设置</span></span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.<span class="built_in">put</span>(<span class="string">"loginUsername"</span>, <span class="string">"lyb"</span>);<span class="comment">//登陆用户名</span></span><br><span class="line">        initParams.<span class="built_in">put</span>(<span class="string">"loginPassword"</span>,<span class="string">"lyb980328"</span>);<span class="comment">//登陆密码</span></span><br><span class="line">        <span class="comment">//initParams.put("allow",""); 默认所有登陆</span></span><br><span class="line">        initParams.<span class="built_in">put</span>(<span class="string">"deny"</span>, <span class="string">"192.168.0.107"</span>); <span class="comment">//阻止登陆</span></span><br><span class="line"></span><br><span class="line">        registrationBean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span>  registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.配置一个web监控的filter</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">//监控的参数设置</span></span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.<span class="built_in">put</span>(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*"</span>);<span class="comment">//排除拦截哪些请求</span></span><br><span class="line"></span><br><span class="line">        registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        registrationBean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span>  registrationBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合JPA"><a href="#整合JPA" class="headerlink" title="整合JPA"></a>整合JPA</h2><p>引入MyBatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个实体类(bean)和数据表进行映射</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个和数据表映射的类</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">""</span>)</span> <span class="comment">//指定和哪个数据表对应;如果省略默认表明为类名首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name=<span class="meta-string">"dept_name"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setId(Integer id) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setName(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer getId() &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写dao接口来操作实体类对应的数据表</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository接口-------两个泛型(实体类类型，实体类主键类型)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">DepartmentRepository</span> <span class="symbol">extends</span> <span class="symbol">JpaRepository</span>&lt;<span class="symbol">Department</span>,<span class="symbol">Integer</span>&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lyb980328</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/s_02?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">driver-Class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment">#更新或创建表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment">#每次在crud的时候控制台会显示sql</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    DepartmentRepository departmentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/dept/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> Department getDept(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> Integer id)&#123;</span><br><span class="line">        Optional&lt;Department&gt; id1 = departmentRepository.findById(id);</span><br><span class="line">        <span class="keyword">return</span> id1.<span class="keyword">get</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><p>引入MyBatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据源的相关属性(详见整合Druid)</p><p> 注解实现</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Mapper</span></span><br><span class="line">public interface DepartmentMapper &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">@Results</span>(&#123;<span class="variable">@Result</span>(column = <span class="string">"dept_id"</span>,property = <span class="string">"id"</span>),<span class="variable">@Result</span>(column = <span class="string">"dept_name"</span>,property = <span class="string">"name"</span>)&#125;)</span><br><span class="line">    <span class="variable">@Select</span>(<span class="string">"SELECT * FROM tbl_dept WHERE dept_id=#&#123;id&#125;"</span>)</span><br><span class="line">    public Department getDeptById(Integer id);</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Delete</span>(<span class="string">"delete from tbl_dept where dept_id=#&#123;id&#125;"</span>)</span><br><span class="line">    public int deleteDeptById(Integer id);</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Insert</span>(<span class="string">"insert into tbl_dept(dept_name) values(#&#123;name&#125;)"</span>)</span><br><span class="line">    public int insertDept(Department department);</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Update</span>(<span class="string">"update tbl_dept set dept_name=#&#123;name&#125; where dept_id=#&#123;id&#125;"</span>)</span><br><span class="line">    public int updateDept(Department department);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line">public class DeptController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</span><br><span class="line">    public Department getDept(<span class="variable">@PathVariable</span>(<span class="string">"id"</span>) Integer id)&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">departmentMapper</span><span class="selector-class">.getDeptById</span>(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要其它复杂的配置，springboot自动配置</p><p>xml文件接口映射实现</p><ul><li>在mapper接口用@Repository代替@Mapper</li><li>编写接口对应的xml文件<ul><li>xml文件的namespace需要添对应接口的全类名</li><li>xml文件的SQL块id需要与接口的方法名对应</li></ul></li><li>在配置类上添加@MapperScan(basePackages = “com.lyb.community.mapper”)来指定mapper接口文件位置</li><li>需要在application.yml中配置mapper.xml文件的位置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(basePackages = "com.lyb.community.mapper")</span><br><span class="line">public class CommunityApplication   &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CommunityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    public void insertUser(User user);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    public User selectUserByToken(@Param("token") String token);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void deleteUserByAccountId(@Param("account_id") String account_id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lyb.community.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByToken"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">         select * from user where token=#&#123;token&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserByAccountId"</span>&gt;</span></span><br><span class="line">        delete from user where account_id=#&#123;account_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.lyb.community.model.User"</span>&gt;</span></span><br><span class="line">        insert into user(name,account_id,token,gmt_create,gmt_modified,avatar_url) values(#&#123;name&#125;,#&#123;account_id&#125;,#&#123;token&#125;,#&#123;gmt_create&#125;,#&#123;gmt_modified&#125;,#&#123;avatar_url&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  #指定mapper xml文件的位置</span><br><span class="line">  mapper-locations: classpath*:mapping/*.xml</span><br><span class="line">  #设置需要类名代替全类名的文件位置</span><br><span class="line">  type-aliases-package: com.lyb.community</span><br></pre></td></tr></table></figure>技巧</li></ul><p>可以通过@MapperScan(value=类全限定名)标注在主配置类或者MyBtais配置类上来指定包下是Mapper接口</p><h1 id="页面映射"><a href="#页面映射" class="headerlink" title="页面映射"></a>页面映射</h1><h2 id="通过控制器映射"><a href="#通过控制器映射" class="headerlink" title="通过控制器映射"></a>通过控制器映射</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&#123;<span class="meta-string">"/index.html"</span>,<span class="meta-string">"/index"</span>,<span class="meta-string">"/"</span>&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String index()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过定制SpringMvc的页面映射-两种方法"><a href="#通过定制SpringMvc的页面映射-两种方法" class="headerlink" title="通过定制SpringMvc的页面映射(两种方法)"></a>通过定制SpringMvc的页面映射(两种方法)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加视图映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//浏览器发送/add请求，转到success页面(不需要经过控制器)</span></span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根源码可以知道所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class="line"><span class="comment">     * 添加视图的映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span>  adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="静态资源的引用"><a href="#静态资源的引用" class="headerlink" title="静态资源的引用"></a>静态资源的引用</h1><ul><li><p>问题：引用静态资源比如：jquery、bootstrap</p></li><li><p>解决：</p></li></ul><ol><li>将静态资源放在公共文件夹下引用</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">此时资源在类路径下的/static/asserts下</span><br><span class="line"></span><br><span class="line">引用方式：</span><br><span class="line">        <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用webjar的方式引用</li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">在pom.xml中导入模块</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--引入jquery模块--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--引入bootstrap模块--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--引入Thymeleaf模板引擎--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">引用方式：</span></span><br><span class="line"><span class="xml">    //注意在html头添加<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span>，使用thymeleaf引擎</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span>  <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.3.1/css/bootstrap.min.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/css/dashboard.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">这是由于对于所有的/webjars/访问都会定位到/META-INF/resources/webjars/下</span></span><br></pre></td></tr></table></figure><h1 id="SpringBoot测试"><a href="#SpringBoot测试" class="headerlink" title="SpringBoot测试"></a>SpringBoot测试</h1><p>​        通过普通的junit测试是无法启动Spring容器的。SpringBoot提供了以下方式来启动容器进行测试。</p><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>测试类编写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= VodApplication<span class="class">.<span class="keyword">class</span>) //填写<span class="title">SpringBoot</span>启动类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        。。。。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;SpringBoot学习笔记的整理 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="http://liuyoubin.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解开发</title>
    <link href="http://liuyoubin.top/2020/01/25/backEnd/framework/Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    <id>http://liuyoubin.top/2020/01/25/backEnd/framework/Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</id>
    <published>2020-01-25T03:29:37.000Z</published>
    <updated>2020-01-25T13:21:02.866Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>Spring学习笔记的整理补充(基于注解方面的) </p>          </div><a id="more"></a><h1 id="Web注解"><a href="#Web注解" class="headerlink" title="Web注解"></a>Web注解</h1><h2 id="整合SpringMvc-注解"><a href="#整合SpringMvc-注解" class="headerlink" title="整合SpringMvc(注解)"></a>整合SpringMvc(注解)</h2><ul><li>原理</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">1</span>. <span class="selector-tag">web</span>容器在启动的时候,会扫描每个<span class="selector-tag">iar</span>包下的<span class="selector-tag">META-INF</span>/<span class="selector-tag">services</span>/<span class="selector-tag">iavax</span><span class="selector-class">.servlet</span><span class="selector-class">.ServletContainerInitializer</span></span><br><span class="line"><span class="selector-tag">2</span>. 加载这个文件指定的类<span class="selector-tag">SpringServletContainerInitializer</span></span><br><span class="line"><span class="selector-tag">3</span>. <span class="selector-tag">spring</span>的应用一启动会加载感兴趣的<span class="selector-tag">WebApplicationInitializer</span>接口的下的所有组件</span><br><span class="line"><span class="selector-tag">4</span>. 并且为<span class="selector-tag">WebApplicationInitializer</span>组件创建对象(组件不是接口,不是抽象类)</span><br><span class="line">    <span class="selector-tag">1</span>)、<span class="selector-tag">AbstractContextLoaderInitializer</span>:创建根容器 <span class="selector-tag">createRootApplicationContext</span>()</span><br><span class="line">    <span class="selector-tag">2</span>)<span class="selector-class">.AbstractDispatcherservletInitializer</span>:</span><br><span class="line">         创建一个<span class="selector-tag">web</span>的<span class="selector-tag">ioc</span>容器: <span class="selector-tag">createservletApplicationContext</span>()</span><br><span class="line">         创建了<span class="selector-tag">DispatcherServlet</span>, <span class="selector-tag">createDispatcherServlet</span>():</span><br><span class="line">         将创建的<span class="selector-tag">DispatcherServlet</span>添加到<span class="selector-tag">ServletContext</span>中,<span class="selector-tag">getServletMappings</span>();</span><br><span class="line">    <span class="selector-tag">3</span>), <span class="selector-tag">AbstractAnnotationConfigDispatcherServletInitializer</span>, 注解方式配置的<span class="selector-tag">DispatcherServlet</span>初始化器</span><br><span class="line">        创建根容器 <span class="selector-tag">createRootApplicationContext</span>()<span class="selector-tag">getRootConfigclasses</span>();传入一个起<span class="selector-tag">Ta</span></span><br><span class="line">        创建<span class="selector-tag">web</span>的<span class="selector-tag">ioc</span>容器, <span class="selector-tag">createServletApplicationContext</span>();获 取配置类, <span class="selector-tag">getServletconfigclasses</span>();</span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><p>以注解的方式来启动SpringMvc，继承AbstractAnnotationConfigDispatcherServletInitializer，实现抽象方法指定DispatcherServlet的配置信息</p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringMvc的配置类</span></span><br><span class="line"><span class="variable">@EnableWebMvc</span> <span class="comment">//开启SpringMvc定制功能,通过继承WebMvcConfigurerAdapter/实现WebMvcConfigurer来实现组件配置</span></span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(value = &#123;<span class="string">"com.lyb"</span>&#125;,</span><br><span class="line">includeFilters = &#123;</span><br><span class="line">        <span class="variable">@ComponentScan</span>.Filter(type= FilterType.ANNOTATION,classes = &#123;Controller.class&#125;)</span><br><span class="line">&#125;,useDefaultFilters = false)</span><br><span class="line">public class AppConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">        <span class="comment">//复写需要定制组件的对应方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图解析器</span></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void configureViewResolvers(ViewResolverRegistry registry) &#123;</span><br><span class="line">        <span class="comment">//默认jsp("/WEB-INF/", ".jsp")</span></span><br><span class="line">        <span class="selector-tag">registry</span><span class="selector-class">.jsp</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态资源访问 相当于&lt;mvc:default-servlet-handler/&gt;</span></span><br><span class="line">    @<span class="selector-tag">Override</span></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">configureDefaultServletHandling</span>(DefaultServletHandlerConfigurer configurer) &#123;</span><br><span class="line">        <span class="selector-tag">configurer</span><span class="selector-class">.enable</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截器</span></span><br><span class="line">    @<span class="selector-tag">Override</span></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">addInterceptors</span>(InterceptorRegistry registry) &#123;</span><br><span class="line">        <span class="selector-tag">registry</span><span class="selector-class">.addInterceptor</span>()<span class="selector-class">.addPathPatterns</span>(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring根容器的配置类</span></span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(value = <span class="string">"com.lyb"</span>,</span><br><span class="line">        excludeFilters = &#123;</span><br><span class="line">                <span class="variable">@ComponentScan</span>.Filter(type= FilterType.ANNOTATION,classes=&#123;Controller.class&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">public class RootConfig &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author liuyoubin</span></span><br><span class="line"><span class="comment"> * @date 2019/8/14 - 20:16</span></span><br><span class="line"><span class="comment"> * 应用启动时启动的时候创建对象，调用方法来初始化容器和前端控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyWebApp</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取根容器的配置类、类似以前通过监听器获取Spring的配置文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Class</span>&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="type">RootConfig</span><span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Web容器的配置文件、SpringMvc的配置文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Class</span>&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="type">AppConfig</span><span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取DispatcherServlet的映射信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span>[] getServletMappings() &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">           *   "/"拦截所有请求包括静态资源，但不包括*.jsp</span></span><br><span class="line"><span class="comment">           *    "/*"拦截所有请求</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-interceptors" target="_blank" rel="noopener">SpringMvc官方文档</a></p><h2 id="三大组件的注册"><a href="#三大组件的注册" class="headerlink" title="三大组件的注册"></a>三大组件的注册</h2><p>1 使用ServletContainerInitializer得到的ServletContext注册组件</p><p>2 使用ServletContext监听器得到的ServletContext注册组件</p><hr><ul><li>注册监听器(Listener)只需要直接注册到ServletContext</li><li>注册Servlet、Filter需要在添加到ServletContext后注册映射信息<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ServletRegistration.Dynamic dynamic = servletContext.add<span class="constructor">Servlet(, )</span>;</span><br><span class="line">dynamic.add<span class="constructor">Mapping(String <span class="params">arg</span>)</span>;</span><br><span class="line"></span><br><span class="line"> FilterRegistration.Dynamic dynamic = servletContext.add<span class="constructor">Filter(, )</span>;</span><br><span class="line"> dynamic.add<span class="constructor">MappingForServletNames(EnumSet&lt;DispatcherType&gt; <span class="params">var1</span>, <span class="params">boolean</span> <span class="params">var2</span>, String<span class="operator">...</span> <span class="params">var3</span> )</span>;</span><br><span class="line"> </span><br><span class="line"> servletContext.add<span class="constructor">Listener()</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ServletContainerInitializer"><a href="#ServletContainerInitializer" class="headerlink" title="ServletContainerInitializer"></a>ServletContainerInitializer</h2><ol><li>servlet容器启动时会扫描，当前应用里面每一个jar包的ServletContainerInitializer实现</li><li>提供ServletContainerInitializer的实现类必须绑定在META-INF/services/javax.servlet.ServletContainerInitializer</li><li>文本内容就是ServletContainerInitializer的实现类的全类名</li></ol><hr><p>在web容器（例如tomcat）启动时为提供给第三方组件机会做一些初始化的工作，例如注册servlet或者filtes等。对此servlet规范提供了ServletContainerInitializer来实现这个功能。</p><p>每个框架要使用ServletContainerInitializer就必须在对应的jar包的META-INF/services 目录创建一个名为javax.servlet.ServletContainerInitializer的文件，文件内容指定具体的ServletContainerInitializer实现类，那么，当web容器启动时就会运行这个ServletContainerInitializer实现类做一些组件内的初始化工作。</p><hr><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器会将指定的类型的子类/实现类传递进来</span></span><br><span class="line"><span class="meta">@HandlesTypes(value = &#123;HelloService.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContainerInitializer</span> <span class="title">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在应用启动时调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> set <span class="doctag">@HandlesTypes</span>指定类型的子类/实现类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext 代表当前应用的ServletContext对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onStartup(Set&lt;Class&lt;?&gt;&gt; <span class="keyword">set</span>, ServletContext servletContext) throws ServletException &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"感兴趣的类型。。。。。。。。。。。。。。。。。。"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : <span class="keyword">set</span>) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(aClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>环境搭建</p><ul><li>导入相关依赖<ul><li>数据源</li><li>数据库驱动</li><li>spring-jdbc模块</li><li>spring-tx模块</li></ul></li><li>配置数据源和jdbcTemplate操作数据库</li><li>给方法上标注@<strong>Transactional</strong>表示该方法具有事务特性</li><li>在配置类上加上@<strong>EnableTransactionManagement</strong>开启事务注解功能</li><li>给容器注册事务管理器</li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = &#123;<span class="string">"com.lyb.service"</span>,<span class="string">"com.lyb.dao"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> PropertyVetoException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"lyb980328"</span>);</span><br><span class="line">        dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/s_02?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册事务管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">        <span class="comment">//模拟出错</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><blockquote><p>@EnableAspectJAutoProxy</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string">*@EnableAspectJAutoProxy源码</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="string">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="string">@Documented</span></span><br><span class="line"><span class="string">@Import(AspectJAutoProxyRegistrar.class)</span></span><br><span class="line"><span class="string">public</span> <span class="string">@interface</span> <span class="string">EnableAspectJAutoProxy</span> <span class="string">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">....</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line">  <span class="number">1</span><span class="string">.</span>  <span class="string">@Import(AspectJAutoProxyRegistrar.class)</span> <span class="string">//给容器中导入AspectJAutoProxyRegistrar组件</span></span><br><span class="line">        <span class="string">利用AspectJAutoProxyRegistrar给容器中注册bean：AnnotationAwareAspectJAutoProxyCreator//自动代理创建器</span></span><br><span class="line"> </span><br><span class="line">  <span class="number">2</span><span class="string">.</span>    <span class="string">AnnotationAwareAspectJAutoProxyCreator</span></span><br><span class="line">            <span class="string">--父类--&gt;AspectJAwareAdvisorAutoProxyCreator</span></span><br><span class="line">                 <span class="string">--父类--&gt;AbstractAdvisorAutoProxyCreator</span></span><br><span class="line">                    <span class="string">--父类--&gt;AbstractAutoProxyCreator</span></span><br><span class="line">                                <span class="string">implements</span> <span class="string">SmartInstantiationAwareBeanPostProcessor，BeanFactoryAware</span></span><br><span class="line">            <span class="string">关注后置处理器(bean初始化前后完成工作)、自动注入beanFActroy</span></span><br><span class="line">  </span><br><span class="line"><span class="string">流程：</span></span><br><span class="line">    <span class="number">1</span><span class="string">)</span> <span class="string">传入配置类，创建ioc容器</span></span><br><span class="line">    <span class="number">2</span><span class="string">)</span> <span class="string">注册配置类，调用refresh()刷新容器</span></span><br><span class="line">    <span class="number">3</span><span class="string">)</span> <span class="string">registerBeanPostProcessors(beanFactory),注册bean的后置处理器来方便拦截bean的创建</span></span><br><span class="line">        <span class="number">1</span><span class="string">&gt;</span> <span class="string">先获取ioc容器已经定义了需要创建对象的所有BeanPostProcesser</span></span><br><span class="line">        <span class="number">2</span><span class="string">&gt;</span> <span class="string">给容器添加其他的BeanPostProcesser</span></span><br><span class="line">        <span class="number">3</span><span class="string">&gt;</span> <span class="string">优先注册实现了PriorityOrdered接口的BeanPostProcessor</span></span><br><span class="line">        <span class="number">4</span><span class="string">&gt;</span> <span class="string">其次注册实现了Ordered接口的BeanPostProcessor</span></span><br><span class="line">        <span class="number">5</span><span class="string">&gt;</span> <span class="string">最后注册没有实现优先级接口的BeanPostProcessor</span></span><br><span class="line">                <span class="string">----所谓的注册其实就是创建BeanPostProcessor对象保存在容器中</span></span><br><span class="line">        <span class="number">6</span><span class="string">&gt;</span> <span class="string">创建AnnotationAwareAspectJAutoProxyCreator</span></span><br><span class="line">                <span class="number">1</span><span class="string">.创建Bean的实例</span></span><br><span class="line">                <span class="number">2.</span><span class="string">populateBean()，给bean的属性赋值</span></span><br><span class="line">                <span class="number">3.</span><span class="string">initializeBean()初始化bean</span></span><br><span class="line">                      <span class="string">&gt;</span>  <span class="string">invokeAwareMethod()</span> <span class="string">处理Aware接口的方法回调</span></span><br><span class="line">                      <span class="string">&gt;</span>  <span class="string">applyBeanPostProcessorsBeforeInitialization()</span>  <span class="string">应用后置处理器</span></span><br><span class="line">                      <span class="string">&gt;</span>  <span class="string">invokeInitMethods()</span> <span class="string">指定自定义的初始化方法</span></span><br><span class="line">                      <span class="string">&gt;</span>  <span class="string">applyBeanPostProcessorsAfterInitialization</span></span><br><span class="line">                <span class="number">4</span><span class="string">.</span> <span class="string">BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功</span></span><br><span class="line">                </span><br><span class="line"><span class="string">------------------以上注册和创建以AnnotationAwareAspectJAutoProxyCreator</span></span><br><span class="line">    <span class="number">4</span><span class="string">)</span> <span class="string">finishBeanFactoryInitialization(beanFactroy)完成BeanFActroy的初始化工作，创键剩下的单实例bean</span></span><br><span class="line">        <span class="number">1</span><span class="string">&gt;遍历获取容器中所有的bean，依次创建对象getBean(beanName)</span></span><br><span class="line">            <span class="string">getBean()---&gt;doGetBean()---&gt;getSingleton()</span></span><br><span class="line">        <span class="number">2</span><span class="string">&gt;创建bean</span></span><br><span class="line">            <span class="number">1</span><span class="string">.先从缓存中获取当前的bean，获取不到再创建---&gt;保证单例</span></span><br><span class="line">                <span class="string">AnnotationAwareAspectJAutoProxyCreator会在所有bean创建之前尝试拦截</span></span><br><span class="line">            <span class="number">2.</span><span class="string">createBean</span> <span class="string">创建bean</span></span><br><span class="line">                <span class="string">&gt;resolveBeforeInstantiation(beanName,mbdToUsew);解析希望后置处理器器在此能返回一个代理对象，如果返回失败则继续下一步</span></span><br><span class="line">                <span class="string">&gt;doCreateBean(beanName,mbdToUse,args),真正去创建一个bean，流程同3.6一样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">AnnotationAwareAspectJAutoProxyCreator的作用</span></span><br><span class="line">    <span class="number">1</span><span class="string">)每一个bean创建之前，调用postPocessBeforeInstantiation</span></span><br><span class="line">        <span class="string">关心Mathcalculator和LogAspect的创建</span></span><br><span class="line"></span><br><span class="line">        <span class="number">1</span><span class="string">)、判断当前bean是否在advisedBeans中(保存了所有需要增强bean)</span></span><br><span class="line">        <span class="number">2</span><span class="string">)、判断当前bean是否是基础类型的Advice,</span> <span class="string">Pointcut.Advisor.</span> <span class="string">AopInfrastructuret或者是否是切面(@Aspect)、</span></span><br><span class="line">        <span class="number">3</span><span class="string">)、</span>   <span class="string">是否需要跳过</span></span><br><span class="line">            <span class="number">1</span><span class="string">)获取候选的增强器(切面里面的通知方法)</span> <span class="string">【List&lt;Advisor&gt;</span> <span class="string">candidateAdvisors'每一个封装的通知方法的增强器是InstantiationModelAwarePointcutAdviso判断每一个增强器是否是AspectJPointcutAdvisor类型的;返回true)、</span></span><br><span class="line">            <span class="number">2</span><span class="string">)永远返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2</span><span class="string">)、创建对象</span></span><br><span class="line">        <span class="string">postProcessAfterInitialization;</span></span><br><span class="line">        <span class="string">return</span> <span class="string">wrapIfNecessary(bean,</span> <span class="string">beanName,</span> <span class="string">cacheKey);//包装如果需要的情况下</span></span><br><span class="line">        <span class="number">1</span><span class="string">)、获取当前bean的所有增强器(通知方法)</span> <span class="string">object[]</span> <span class="string">specificInterceptors1、</span></span><br><span class="line">            <span class="number">1</span> <span class="string">找到候选的所有的增强器(找哪些通知方法是需要切入当前bean方法的)</span></span><br><span class="line">            <span class="number">2</span> <span class="string">获取能在bean使用的增强器</span></span><br><span class="line">            <span class="number">3</span> <span class="string">给增强器排序</span></span><br><span class="line"></span><br><span class="line">    <span class="number">3</span><span class="string">)</span> <span class="string">、如果当前bean需要增强,创建当前bean的代理对象</span></span><br><span class="line">        <span class="number">1</span><span class="string">)、获取所有增强器(通知方法)</span></span><br><span class="line">        <span class="number">2</span><span class="string">)、保存到proxyFactory</span></span><br><span class="line">        <span class="number">3</span><span class="string">)、创建代理对象:</span> <span class="string">Spring自动决定</span></span><br><span class="line">            <span class="string">JdkDynamicAopProxy</span> <span class="string">(config)</span> <span class="string">;</span> <span class="string">jdk动态代理</span></span><br><span class="line">            <span class="string">objenesiscglibAopProxy</span> <span class="string">(config)</span> <span class="string">;cglib的动态代理</span></span><br><span class="line">    <span class="number">4</span><span class="string">)、给容器中返回当前组件使用cglib增强了的代理对象;</span></span><br><span class="line">    <span class="number">5</span><span class="string">)、以后容器中获取到的就是这个组件的代理对象,执行目标方法的时候,代理对象就会执行通知方法的流程</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">目标方法的执行/方法拦截器链</span></span><br><span class="line">    <span class="string">容器中保存了组件的代理对象(Cglib增强后的对象)，这个对象里保存了详细信息(比如增强器、目标对象)</span></span><br><span class="line">    <span class="number">1</span><span class="string">)CglibAopProxy.intercept();栏捷目标方法的执行</span></span><br><span class="line">    <span class="number">2</span><span class="string">)、根据ProxyFactory对象获取将要执行的目标方注拦截器链,</span></span><br><span class="line">        <span class="string">List&lt;obiect&gt;</span> <span class="string">chain</span> <span class="string">=</span> <span class="string">this.</span> <span class="string">advised.getInterceptorsAndDvnamicInterceptionAdvice1).</span> </span><br><span class="line">        <span class="number">1</span><span class="string">&gt;List&lt;obiect&gt;</span> <span class="string">interceptorList保存所有拦截器5</span></span><br><span class="line">            <span class="string">一个默认的ExposeInvocationInterceptor和4个增强器</span></span><br><span class="line">        <span class="number">2</span><span class="string">&gt;遍历所有的增强器,将其转为Interceptor</span></span><br><span class="line">            <span class="string">registry.getInterceptors</span> <span class="string">(advisor):</span></span><br><span class="line">        <span class="number">3</span><span class="string">&gt;将增强器转为List&lt;MethodInterceptor&gt;,</span></span><br><span class="line">            <span class="string">如果是MethodInterceptor,直接加入到集合中,</span></span><br><span class="line">            <span class="string">如果不是,使用AdvisorAdapter将增强器转为Interceptor</span></span><br><span class="line">    <span class="number">3</span><span class="string">)、如果没有拦献器链,直接执行目标方法;</span></span><br><span class="line">    <span class="number">4</span><span class="string">)、如果有拦鼓器链,把需要执行的目标对象,目标方法,拦戴器植等信息传入创建一个CglibMethodInvocation对象,并调用object</span> <span class="string">retVal=</span> <span class="string">mi.proceed();</span></span><br><span class="line">    <span class="number">5</span><span class="string">)、拦截器链的触发执行</span></span><br><span class="line">        <span class="string">&gt;如果没有拦截器链，执行目标方法</span></span><br><span class="line">        <span class="string">&gt;链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完返回后再执行；</span></span><br><span class="line">            <span class="string">拦截器链的机制保证了通知方法与目标方法的执行顺序</span></span><br></pre></td></tr></table></figure><h3 id="AOP总结"><a href="#AOP总结" class="headerlink" title="AOP总结"></a>AOP总结</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) @EnableAspectJAutoProxy 开启AOP功能</span><br><span class="line"><span class="number">2</span>) @EnableAspectJAutoProxy会给容器中导入AspectJAutoProxyRegistrar组件</span><br><span class="line">        利用AspectJAutoProxyRegistrar给容器中注册bean：AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line"><span class="number">3</span>) AnnotationAwareAspectJAutoProxyCreator是一个后置处理器</span><br><span class="line"><span class="number">4</span>) 容器创建</span><br><span class="line">    <span class="number">1</span>&gt;registerBeanPostProcessors() 注册后置处理器AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line">    <span class="number">2</span>&gt;finishBeanFactoryInitialization(beanFactory)初始化剩下的单实例bean</span><br><span class="line">        <span class="number">1.</span>创建业务组件和切面组件</span><br><span class="line">        <span class="number">2.</span>AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程</span><br><span class="line">        <span class="number">3.</span>组件创建完成，判断组件是否需要增强</span><br><span class="line">            是：切面的通知方法包装成一个增强器(Advisor),给逻辑组件创建代理对象</span><br><span class="line"><span class="number">5</span>) 执行目标方法</span><br><span class="line">        <span class="number">1.</span>代理对象执行目标方法</span><br><span class="line">        <span class="number">2.</span>CglibAopProxy.<span class="built_in">int</span>ercept()</span><br><span class="line">            <span class="number">1</span>)得到拦截器链(增强器包装成拦截器MethodInterceptor)</span><br><span class="line">            <span class="number">2</span>)利用拦截器链的机制，依次进行每一个拦截器进行拦截</span><br><span class="line">            <span class="number">3</span>)效果：</span><br><span class="line">                正常执行：前置通知==&gt;目标方法==&gt;后置通知==&gt;返回通知</span><br><span class="line">                出现异常：前置通知==&gt;目标方法==&gt;后置通知==&gt;异常通知</span><br></pre></td></tr></table></figure><h2 id="基于注解AOP实现"><a href="#基于注解AOP实现" class="headerlink" title="基于注解AOP实现"></a>基于注解AOP实现</h2><p>AOP：指程序在运行过程中能将某段代码切入到指定位置运行的编程方式</p><ol><li>导入模块</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>定义目标类</p></li><li><p>定义切面类 加上@Aspect注解</p></li><li><p>给切面类的方法标注对应的通知注解</p></li></ol><ul><li>前置通知 @Before <ul><li>目标方法开始前通知</li></ul></li><li>后置通知 @After   <ul><li>目标方法结束后通知，无论是否异常</li></ul></li><li>返回通知 @AfterReturn</li><li>异常通知 @AfterThrowing</li><li>环绕通知 @Around</li></ul><ol start="5"><li><p>将目标类和切面类加入到容器中</p></li><li><p>给配置类加上@EnableAspectJAutoProxy –开启基于注解的AOP</p></li></ol><p>示例</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author liuyoubin</span></span><br><span class="line"><span class="comment"> * @date 2019/8/13 - 10:09</span></span><br><span class="line"><span class="comment"> * 日志切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Aspect</span><br><span class="line">public <span class="keyword">class</span> LogAspects &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取公共的切入点表答式</span></span><br><span class="line">    <span class="comment">//在本类引用 ---直接写方法名</span></span><br><span class="line">    <span class="comment">//外部类引用 ---全类名+方法名</span></span><br><span class="line">    @<span class="constructor">Pointcut(<span class="string">"execution(public int com.lyb.service.MyCaculater.div(int,int))"</span>)</span></span><br><span class="line">    public void point<span class="constructor">Cut()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过JoinPoint可以获取到目标方法的信息,joinPoint一定要在要在参数的第一位</span></span><br><span class="line">    @<span class="constructor">Before(<span class="string">"pointCut()"</span>)</span></span><br><span class="line">    public void log<span class="constructor">Start_div(JoinPoint <span class="params">joinPoint</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获取参数列表</span></span><br><span class="line">        Object<span class="literal">[]</span> args = joinPoint.get<span class="constructor">Args()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">""</span>+joinPoint.get<span class="constructor">Signature()</span>.get<span class="constructor">Name()</span>+<span class="string">"除法开始，参数列表"</span>+ <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">args</span>)</span> +<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @<span class="constructor">After(<span class="string">"pointCut()"</span>)</span></span><br><span class="line">    public void log<span class="constructor">End_div()</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"除法结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过returning属性来封装返回信息</span></span><br><span class="line">    @<span class="constructor">AfterReturning(<span class="params">value</span>=<span class="string">"pointCut()"</span>,<span class="params">returning</span> = <span class="string">"result"</span>)</span></span><br><span class="line">    public void log<span class="constructor">Return_div(Object <span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"除法正常返回...返回结果"</span>+result+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过throwing属性来封装异常信息</span></span><br><span class="line">    @<span class="constructor">AfterThrowing(<span class="params">value</span> = <span class="string">"pointCut()"</span>,<span class="params">throwing</span> = <span class="string">"e"</span>)</span></span><br><span class="line">    public void log<span class="constructor">Exception_div(Exception <span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"除法出现异常....异常信息"</span>+e+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyoubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/13 - 10:10</span></span><br><span class="line"><span class="comment"> * 业务逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCaculater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i/j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*   配置类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class MyConfigOfAop &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public MyCaculater myCaculater()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">MyCaculater</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="selector-tag">Bean</span></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">LogAspects</span> <span class="selector-tag">logAspects</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">LogAspects</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h2><h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h3><ul><li>Spring为我们提供的可以根据当前环境、动态激活和切换一系列的功能</li><li>@Profile：指定组件在哪个环境中才能注册到容器中,默认时default环境<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="variable">@Bean</span>(<span class="string">"devDataSource"</span>)</span><br><span class="line">public DataSource dataSourceDev()&#123;</span><br><span class="line">    </span><br><span class="line">....</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@Profile</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="variable">@Bean</span>(<span class="string">"testDataSource"</span>)</span><br><span class="line">public DataSource dataSourceTest()&#123;</span><br><span class="line">    </span><br><span class="line">....</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Profile</span>(<span class="string">"prod"</span>)</span><br><span class="line"><span class="variable">@Bean</span>(<span class="string">"prodDataSource"</span>)</span><br><span class="line">public DataSource dataSourceProd()&#123;</span><br><span class="line">    </span><br><span class="line">....</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如何切换环境?</p><p>1 使用命令行参数,在虚拟机参数加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dspring.profiles.active</span>=</span><br></pre></td></tr></table></figure><p>2 使用代码实现 /不能使用带参构造器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过无参构造器创建一个IOC容器</span></span><br><span class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> <span class="constructor">AnnotationConfigApplicationContext()</span>;</span><br><span class="line"><span class="comment">//设置需要激活的环境</span></span><br><span class="line">context.get<span class="constructor">Environment()</span>.set<span class="constructor">ActiveProfiles(<span class="string">"dev"</span>)</span>;</span><br><span class="line"><span class="comment">//注册主配置类</span></span><br><span class="line">context.register(<span class="module-access"><span class="module"><span class="identifier">MyConfig</span>.</span></span><span class="keyword">class</span>);</span><br><span class="line"><span class="comment">//启动刷新容器</span></span><br><span class="line">context.refresh<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>Spring利用依赖注入(DI),完成对IOC容器中各个组件的依赖关系赋值</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><ul><li>默认优先按照类型从容器中找</li><li>如果找到多个相同类型的组件，就会按照属性名称作为id去容器中找</li><li>可以使用@Qualifier来明确指定id去容器中找</li><li>默认一定需要装配，可以使用required属性来修改</li><li>可以使用@Primary来指定自动装配时首选的bean<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Service</span></span><br><span class="line">public class BookService&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="variable">@Service</span></span><br><span class="line">public class BookService&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Qualifier</span>(<span class="string">"book"</span>)</span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="variable">@Service</span></span><br><span class="line">public class BookService&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">@Autowired</span>(required=fasle)</span><br><span class="line">    BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="variable">@Primary</span></span><br><span class="line"><span class="variable">@Bean</span></span><br><span class="line">public Dog dog()&#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Dog</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Autowired 补充</p></blockquote></li><li>Autowired 可以标注在方法、构造器、属性、参数上。所需要的组件都会从容器中获取</li></ul><hr><h3 id="Resoruce和-Inject"><a href="#Resoruce和-Inject" class="headerlink" title="@Resoruce和@Inject"></a>@Resoruce和@Inject</h3><blockquote><p>java的规范 </p></blockquote><ul><li>@Resource<ul><li>可以和@Autowired一样实现自动装配，但是默认按照组件名称装配</li></ul></li><li>@Inject<ul><li>需要导入javax.inject的依赖</li><li>和Autowired的功能一样，但没有requried的属性</li></ul></li></ul><p>自定义的组件如果想要实现Spring的一些底层组件(ApplicationContext、BeanFactory…),可以实现XXXAware接口。在创建对象的时候会调用接口规定的方法注入相关组件</p><h2 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h2><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><ul><li><p>使用@Value对bean属性进行赋值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Component</span>将组件加入到容器中，<span class="doctag">@Value</span>进行设值</span></span><br><span class="line"><span class="comment">     *      相当与&lt;bean class="Person"&gt;&lt;property name="?"&gt;&lt;/property&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span>支持 1、字面量 2、$&#123;key&#125;获取配置文件的值 3、#&#123;SpEL&#125;Spring表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;person.name&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"#&#123;11*2&#125;"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> int age;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    ·······<span class="keyword">set</span>、<span class="keyword">get</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PropertySoruce"><a href="#PropertySoruce" class="headerlink" title="@PropertySoruce"></a>@PropertySoruce</h3></li><li><p>使用@PropertySoruce(value={})加载外部配置文件到环境变量中，这样@Value就可以使用${key}获取对应的值</p></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>在Spring中bean的生命周期由容器进行管理，我们可以自定义初始化和销毁方法，当bean的生命周期到的时候就会调用</p></blockquote><ul><li>第一种方法 指定初始化和销毁的方法init-method、destroy-method</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Car----constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Car-----inti"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Car-----destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  @Bean(initMethod = <span class="string">"init"</span>,destroyMethod = <span class="string">"destroy"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">   &#125;</span><br><span class="line">------------</span><br><span class="line">              单例                          多例</span><br><span class="line">初始化时机：ioc容器创建、对象创建完成      调用实例对象时</span><br><span class="line">销毁时机：  ioc容器销毁                   ioc容器不进行销毁</span><br></pre></td></tr></table></figure><ul><li>第二种方法 通过实现接口的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car----constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car-----destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car-----inti"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">这种方式不需要在<span class="meta">@bean</span>上指定方法</span><br></pre></td></tr></table></figure><p>第三种方法 使用JSR250规范的注解</p><ul><li><p>@PostConstruct :在bean创建完成并完成属性赋值，来执行初始化方法</p></li><li><p>@PreDestroy 在容器销毁后通知进行销毁操作</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span>  &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Car----constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Car-----destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PreDestroy</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> throws Exception </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Car-----inti"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四种方法 BeanPostProcessor</p></li><li><p>BeanPostProcessor bean后置处理器</p><ul><li>postProcessBeforeInitialization() 在初始化之前进行处理工作</li><li>postProcessAfterInitialization在初始化之后进行处理工作</li></ul></li></ul><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="Configuration和-Bean"><a href="#Configuration和-Bean" class="headerlink" title="@Configuration和@Bean"></a>@Configuration和@Bean</h3><ul><li>@Configuration <ul><li>指明当前类是一个配置类，用于代替Spring配置文件</li></ul></li><li>@Bean <ul><li>向容器中注册组件，一般标注在方法上，默认id为方法名</li><li>也可以通过value属性设置id</li></ul></li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于扫描指定的包，通过指定的条件将包下符合条件的组件注册到容器中</p><ul><li><ul><li>一般负责扫描@Component、@Service、@Controller、@Repository<ul><li>excludeFilters 扫描的时候排除哪些</li><li>includeFilters 扫描的时候只包含哪些、注意使用此属性是要配和useDefaultFilters=false来禁用调默认规则</li></ul></li></ul></li><li><code>可以自定义TypeFilter来指定过滤规则</code></li></ul><p>示例 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">@ComponentScan</span>(value = <span class="string">"com.lyb"</span>,excludeFilters = &#123;</span><br><span class="line">        <span class="variable">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">    ····</span><br><span class="line">&#125;</span><br><span class="line"> <span class="variable">@ComponentScan</span>(value = <span class="string">"com.lyb"</span>,includeFilters = &#123;</span><br><span class="line">        <span class="variable">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class&#125;)</span><br><span class="line">&#125;,useDefaultFilters=false)</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">    ····</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><ul><li>用于指定组件的作用域</li><li>可选项<ul><li>singleton 单例(默认) —容器创建后创建实例</li><li>prototype 多例       —调用时创建</li><li>request 一次请求创建一个实例(Web环境)</li><li>session 一次会话创建一个实例(Web环境)</li></ul></li></ul><p>示例</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="variable">@Bean</span></span><br><span class="line">public Dog dog()&#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Dog</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h3><ul><li>针对单例组件，使得组件被调用时才创建</li><li><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Lazy</span></span><br><span class="line"><span class="variable">@Bean</span></span><br><span class="line">public Dog dog()&#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Dog</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><ul><li>按照条件来添加组件</li><li>可以标注在类或方法上</li><li>传进的参数是Condition对象，我们可以自行定义Condition来指定规则</li></ul><p>示例</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自定义的Condition</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">MyCondition</span> <span class="symbol">implements</span> <span class="symbol">Condition</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context 判断条件能使用的上下文环境</span></span><br><span class="line"><span class="comment">     * @param metadata 注释信息</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line">        <span class="comment">//ioc使用的bean工厂</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        <span class="comment">//类加载器</span></span><br><span class="line">        ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">        <span class="comment">//获取当前环境信息</span></span><br><span class="line">        Environment environment = context.getEnvironment();</span><br><span class="line">        <span class="comment">//获取bean定义的注册类</span></span><br><span class="line">        BeanDefinitionRegistry registry = context.getRegistry();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    @Conditional(&#123;MyCondition.<span class="keyword">class</span>&#125;)</span><br><span class="line">    @<span class="symbol">Bean</span></span><br><span class="line">   <span class="symbol">public</span> <span class="symbol">Person</span> <span class="symbol">person</span>()&#123;</span><br><span class="line">       Person person = new Person();</span><br><span class="line">       person.setAge(<span class="number">22</span>);</span><br><span class="line">       person.setName(<span class="string">"lyb"</span>);</span><br><span class="line">       <span class="keyword">return</span> person;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><ul><li>快速给容器导入一个组件,默认id为全类名<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Import</span>(&#123;Dog.class&#125;)</span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class MyConfig&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ImportSelector 返回需要导入组件的全类名数组</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">MyImportSelector</span> <span class="symbol">implements</span> <span class="symbol">ImportSelector</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param importingClassMetadata 标注@Import注解当前类的所有注解信息</span></span><br><span class="line"><span class="comment">     * @return 要导入到容器中组件的全类名数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> new String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Import(&#123;MyImportSelector.<span class="keyword">class</span>&#125;)</span><br><span class="line">@<span class="symbol">Configuration</span></span><br><span class="line"><span class="symbol">public</span> <span class="symbol">class</span> <span class="symbol">MyConfig</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MyImportBeanDefinitionRegistrar 手动注册bean组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata 类的注释信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">             <span class="comment">//指定Bean的定义类型</span></span><br><span class="line">             RootBeanDefinition definition = <span class="keyword">new</span> RootBeanDefinition(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">             <span class="comment">//注册一个bean，指定bean名</span></span><br><span class="line">             registry.registerBeanDefinition(<span class="string">"dog"</span>, definition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Import</span>(&#123;MyImportBeanDefinitionRegistrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyConfig</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FactoryBean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制是否为单例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MyFactoryBean <span class="title">myFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyFactoryBean();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   ----</span><br><span class="line">   通过容器获取“myFactoryBean”的FactoryBean实际上是调用了getObject()方法获取对应的bean对象而不是FactroyBean本身</span><br><span class="line">   可以通过“&amp;myFactoryBean”来获取FactoryBean对象本身</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;Spring学习笔记的整理补充(基于注解方面的) &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="http://liuyoubin.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合配置参考</title>
    <link href="http://liuyoubin.top/2020/01/25/backEnd/framework/SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/"/>
    <id>http://liuyoubin.top/2020/01/25/backEnd/framework/SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/</id>
    <published>2020-01-25T03:20:10.000Z</published>
    <updated>2020-01-25T13:21:13.162Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>整理了一下SSM整合的基本配置文件 (并不是基于注解写法) </p>          </div><a id="more"></a><h1 id="pom-xml参考配置"><a href="#pom-xml参考配置" class="headerlink" title="pom.xml参考配置"></a>pom.xml参考配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 引入相关的模块 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 引入SpringMvc、Spring --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 引入Spring JBDC --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring 单元测试模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 引入Spring 面向切面编程 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JSR 303校验 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.16.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--json支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 引入MyBatis --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis Spring 整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池以及驱动包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jstl servlet junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis逆向工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="web-xml参考配置"><a href="#web-xml参考配置" class="headerlink" title="web.xml参考配置"></a>web.xml参考配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- spring配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 设置编码过滤器 一定要在所有过滤器之前 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  对restul风格的支持</span></span><br><span class="line"><span class="comment">  作用：可以将post请求转换为delete、put方式请求</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解决ajax请求直接发送PUT请求，导致SpringMvc的参数绑定失败问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="spring配置文件"><a href="#spring配置文件" class="headerlink" title="spring配置文件"></a>spring配置文件</h1><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">    xmlns:p="http://www.springframework.org/schema/p"</span></span><br><span class="line"><span class="xml">    xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="xml">    xmlns:aop="http://www.springframework.org/schema/aop"</span></span><br><span class="line"><span class="xml">    xmlns:tx="http://www.springframework.org/schema/tx"</span></span><br><span class="line"><span class="xml">    xsi:schemaLocation="</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="xml">        http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 跟业务逻辑相关的 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 扫描组件 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 不扫描Contorller --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 数据源 c3p0 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;driverClass&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbcUrl&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置和MyBatis的整合 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- mybatis全局配置文件 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 指定mybatis。mapper文件的位置 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置扫描器 将mybatis的接口实现加入到ioc容器中1  --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 扫描所有的dao接口 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.lyb.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置一个可以执行批量操作的sqlSession --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 事务控制 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.lyb.service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置事务的增强 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 配置哪些方法使用什么样的事务，以及事务的传播特性 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="SpringMVC配置文件"><a href="#SpringMVC配置文件" class="headerlink" title="SpringMVC配置文件"></a>SpringMVC配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 包含网站跳转逻辑的控制 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只扫描控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;整理了一下SSM整合的基本配置文件 (并不是基于注解写法) &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="http://liuyoubin.top/tags/Spring/"/>
    
      <category term="SpringMvc" scheme="http://liuyoubin.top/tags/SpringMvc/"/>
    
      <category term="MyBatis" scheme="http://liuyoubin.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Shrio学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/25/backEnd/framework/Shrio%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/25/backEnd/framework/Shrio%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-25T02:41:34.000Z</published>
    <updated>2020-01-25T13:20:49.402Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>Shrio学习笔记的整理 </p>          </div><a id="more"></a><h1 id="Shrio-集成Spring"><a href="#Shrio-集成Spring" class="headerlink" title="Shrio 集成Spring"></a>Shrio 集成Spring</h1><p>一 导入相关jar包</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">aopalliance</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">aspectjweaver</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">commons-beanutils-1</span><span class="selector-class">.9</span><span class="selector-class">.3</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">commons-logging-1</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">ehcache-2</span><span class="selector-class">.10</span><span class="selector-class">.6</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">log4j-1</span><span class="selector-class">.2</span><span class="selector-class">.17</span> (1)<span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">shiro-all-1</span><span class="selector-class">.4</span><span class="selector-class">.1</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">slf4j-api-1</span><span class="selector-class">.7</span><span class="selector-class">.25</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">slf4j-log4j12-1</span><span class="selector-class">.7</span><span class="selector-class">.25</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aop-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aspects-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-beans-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-support-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-core-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-expression-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-tx-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-web-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-webmvc-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure><p>二 编写Web.xml、Spring 、SpringMvc配置文件</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Shrio-Spring<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 编写shrio的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1.配置securityManager </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    2.配置 cacheManager </span></span><br><span class="line"><span class="comment">    需要导入 ehcache的jar包 以及配置文件</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">3.配置Realm </span></span><br><span class="line"><span class="comment">直接使用实现了Realm接口的bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.ShrioRealm"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- =========================================================</span></span><br><span class="line"><span class="comment">         Shiro Spring-specific integration</span></span><br><span class="line"><span class="comment">         ========================================================= --&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   4.配置lifecycleBeanPostProcessor ，可以自动的调用配置在Spring ioc容器中的shrio bean 的生命周期方法</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Enable Shiro Annotations for Spring-configured beans.  Only run after</span></span><br><span class="line"><span class="comment">         the lifecycleBeanProcessor has run: --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     5. 启用ioc容器中使用shrio的注解，但必须在配置了lifecycleBeanPostProcessor之后才能使用</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -</span></span><br><span class="line"><span class="comment">         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us</span></span><br><span class="line"><span class="comment">         to wire things with more control as well utilize nice Spring things such as</span></span><br><span class="line"><span class="comment">         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: --&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    6.配置shrioFilter</span></span><br><span class="line"><span class="comment">    - id 必须和 web.xml 中配置的DelegatingFilterProxy的&lt;filter-name&gt;一致</span></span><br><span class="line"><span class="comment">    - </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">        1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">        3) logout 登出</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login.do = anon</span><br><span class="line">                /logout = logout</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span> --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本效果：login.jsp页面可以匿名访问，在登陆之前访问其他页面会被重定向到login页面</p><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><h2 id="认证的实现"><a href="#认证的实现" class="headerlink" title="认证的实现"></a>认证的实现</h2><h3 id="实现认证的思路"><a href="#实现认证的思路" class="headerlink" title="实现认证的思路"></a>实现认证的思路</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>·获取当前的subiect.调用Securityutils.getsubiect ();</span><br><span class="line"><span class="number">2</span>·测试当前的用户是否已经被认证,刚是否已经登录,调用Subiect的isAuthenticated ()</span><br><span class="line"><span class="number">3</span>,若没有被认证,则把用户名和密码封装为UsernamePasswordToken对象</span><br><span class="line">    <span class="number">1</span>).创建一个表单页面</span><br><span class="line">    <span class="number">2</span>).把请求提交到springMvC的Handler</span><br><span class="line">    <span class="number">3</span>).获取用户名和密码.</span><br><span class="line"><span class="number">4</span>·执行登录:调用Subject的login (AuthenticationToken)方法<span class="number">.5</span>·自定义Realm的方法,从数据库中获取对应的记录,返回给shiro.</span><br><span class="line">    <span class="number">1</span>),实际上需要继承orq. apache.shiro.realm.AuthenticatingRealm类</span><br><span class="line">    <span class="number">2</span>).实现doGetAuthenticationInfo (AuthenticationToken)方法.</span><br><span class="line"><span class="number">6</span>·由shiro完成对密码的比对.</span><br></pre></td></tr></table></figure><h3 id="身份认证相关的拦截器"><a href="#身份认证相关的拦截器" class="headerlink" title="身份认证相关的拦截器"></a>身份认证相关的拦截器</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://note.youdao.com/yws/public/resource/95dc5fd583515e098ac1c0633b7c4216/xmlnote/ADCF8DE003A94B08BAA7B4011D8ADB7B/9453" alt="image"></h2><h3 id="具体的实现例子"><a href="#具体的实现例子" class="headerlink" title="具体的实现例子"></a>具体的实现例子</h3><p>login登陆页面</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &lt;h4&gt;<span class="keyword">login</span> page&lt;/h4&gt;</span><br><span class="line">&lt;form action="login.do" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">用户名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="username"/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">密码：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="password" <span class="type">name</span>="password"/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="登陆"/&gt;</span><br></pre></td></tr></table></figure><p>根据applicationContext.xml中对shrio的配置，登陆成功后跳转到list页面</p><p>list页面</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list page</span><br><span class="line"><span class="comment"> //在登陆成功后会有缓存存在，如果要重新实现登陆需要登出</span></span><br><span class="line"><span class="comment"> //登出操作在applicationContext.xml对shrio进行配置</span></span><br><span class="line"> &lt;<span class="keyword">a</span> href=<span class="string">"logout"</span>&gt;登出&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></table></figure><p>登陆controller</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public <span class="keyword">class</span> LoginController &#123;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/login"</span>)</span></span><br><span class="line">public String login(String username,String password) &#123;</span><br><span class="line"></span><br><span class="line">Subject currentUser = <span class="module-access"><span class="module"><span class="identifier">SecurityUtils</span>.</span></span>get<span class="constructor">Subject()</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!currentUser.is<span class="constructor">Authenticated()</span>) &#123;</span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> <span class="constructor">UsernamePasswordToken(<span class="params">username</span>, <span class="params">password</span>)</span>;</span><br><span class="line">            token.set<span class="constructor">RememberMe(<span class="params">true</span>)</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用login方法实际上是调用realm</span></span><br><span class="line">                currentUser.login(token);</span><br><span class="line">     </span><br><span class="line">            &#125; </span><br><span class="line">            catch (AuthenticationException ae) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"登陆失败"</span>+ae.get<span class="constructor">Message()</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">return <span class="string">"redirect:/list.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>realm的实现–继承AuthenticatingRealm</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ShrioRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">AuthenticationInfo</span> doGetAuthenticationInfo(<span class="type">AuthenticationToken</span> token) <span class="keyword">throws</span> <span class="type">AuthenticationException</span> &#123;</span><br><span class="line"><span class="comment">// 1. 把AuthenticationToken 转为 UsernamePasswordToken</span></span><br><span class="line"><span class="type">UsernamePasswordToken</span> upToken = (<span class="type">UsernamePasswordToken</span>)token;</span><br><span class="line"><span class="comment">// 2. 通过UsernamePasswordToken获取用户名和密码</span></span><br><span class="line"><span class="type">String</span> username = upToken.getUsername();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用数据库的方法 查询对用的记录</span></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"调用数据库获得username："</span>+username+<span class="string">"所对应的数据库信息"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 如果用户不存在 则抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"unknow"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UnknownAccountException</span>(<span class="string">"用户不存在"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 根据用户情况决定是否抛出其他AuthenticationException异常</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"bad"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">LockedAccountException</span>(<span class="string">"非法用户，被锁定"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 根据用户情况 构建AuthenticationInfo返回 通常使用SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下信息在实际开发中是在数据库中获取的</span></span><br><span class="line"><span class="comment">//1) principal:认证的实体信息 可以是username 也可以是数据库表对应的实体类对象</span></span><br><span class="line"><span class="type">Object</span> principal = username;</span><br><span class="line"><span class="comment">//2) credentials : 密码</span></span><br><span class="line"><span class="type">String</span> credentials = <span class="string">"123456"</span>;</span><br><span class="line"><span class="comment">//3)realmName :当前Realm对象的name ,调用父类的getName方法获取</span></span><br><span class="line"><span class="type">String</span> realmName = getName();</span><br><span class="line"></span><br><span class="line"><span class="type">SimpleAuthenticationInfo</span> info = <span class="keyword">new</span> <span class="type">SimpleAuthenticationInfo</span>(principal, credentials, realmName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>到现在已经可以实现简单的认证了，但还有问题：</li></ul><ol><li><p>shrio是如何实现密码的比对</p></li><li><p>使用明文进行密码的存储显然是不安全的 那么如何实现对密码的加密呢</p></li></ol><h2 id="密码的加密"><a href="#密码的加密" class="headerlink" title="密码的加密"></a>密码的加密</h2><h3 id="shrio是如何实现加密的"><a href="#shrio是如何实现加密的" class="headerlink" title="shrio是如何实现加密的"></a>shrio是如何实现加密的</h3><p>shrio在构建realm中AuthenticationInfo的时候会调用具体的匹配器(credentialsMatcher).</p><p>调用具体的匹配器的时候会比对原token和构建的token的密码</p><h3 id="shrio具体是如何实现加密"><a href="#shrio具体是如何实现加密" class="headerlink" title="shrio具体是如何实现加密?"></a>shrio具体是如何实现加密?</h3><p>通过在spring的配置文件中配置具体凭证验证器、加密算法、加密次数。。。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.ShrioRealm"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定凭证匹配器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定加密算法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定加密的次数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：当配置了具体的加密算法后,shrio在进行密码比对之前就会先将用户的原密码(封装在token中)进行加密，然后再比对。</p><p>实际上是调用了SimpleHash进行加密</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span> result = <span class="keyword">new</span> SimpleHash(<span class="string">"MD5"</span>, <span class="string">"123456"</span>, <span class="keyword">null</span>, <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><h3 id="shrio如何实现盐值加密"><a href="#shrio如何实现盐值加密" class="headerlink" title="shrio如何实现盐值加密"></a>shrio如何实现盐值加密</h3><h4 id="什么是盐值加密"><a href="#什么是盐值加密" class="headerlink" title="什么是盐值加密?"></a>什么是盐值加密?</h4><p>就是使用一个”固定且唯一的东西”比如说用户名作为”盐”，让相同的密码在加密后不同</p><h4 id="如何做到盐值加密"><a href="#如何做到盐值加密" class="headerlink" title="如何做到盐值加密?"></a>如何做到盐值加密?</h4><ul><li>在doGetAuthenticationInfo方法创建AuthenticationInfo返回值的时候使用new SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName)来构造</li><li>使用ByteSource.Util.bytes()来创建盐值</li><li>盐值需要唯一 一般使用随机字符串或者user id</li><li>使用 new SimpleHashRequest(algorithmName, source, salt, iterations)来计算盐值加密后的密文</li></ul><h2 id="多Realm认证"><a href="#多Realm认证" class="headerlink" title="多Realm认证"></a>多Realm认证</h2><h3 id="如何实现多Realm认证"><a href="#如何实现多Realm认证" class="headerlink" title="如何实现多Realm认证?"></a>如何实现多Realm认证?</h3><p>在spring配置文件添加多个realm,注入到ModularRealmAuthenticator中，在通过配置securityManager进行管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1.配置securityManager </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">多Realm验证</span></span><br><span class="line"><span class="comment">配置认证器</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">3.配置Realm </span></span><br><span class="line"><span class="comment">直接使用实现了Realm接口的bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.ShrioRealm"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定凭证匹配器 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定加密算法 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定加密的次数 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.lyb.shrio.realm.SecondRealm"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定凭证匹配器 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定加密算法 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定加密的次数 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="认证策略"><a href="#认证策略" class="headerlink" title="认证策略"></a>认证策略</h3><p><img src="https://s2.ax1x.com/2020/01/25/1eCw7Q.png" alt="image"></p><h3 id="认证策略的更改"><a href="#认证策略的更改" class="headerlink" title="认证策略的更改"></a>认证策略的更改</h3><p>通过认证器的authenticationStrategy属性进行更改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--指定认证策略--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AllSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><h2 id="权限的拦截"><a href="#权限的拦截" class="headerlink" title="权限的拦截"></a>权限的拦截</h2><h3 id="如何实现权限的拦截"><a href="#如何实现权限的拦截" class="headerlink" title="如何实现权限的拦截?"></a>如何实现权限的拦截?</h3><ol><li>注意： 实现权限拦截realm要注入到securityManager的reamls属性</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;bean <span class="built_in">id</span>=<span class="string">"securityManager"</span> <span class="built_in">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"cacheManager"</span> <span class="keyword">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span><br><span class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"authenticator"</span> <span class="keyword">ref</span>=<span class="string">"authenticator"</span> /&gt;</span><br><span class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"realms"</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">list</span>&gt;</span><br><span class="line"> &lt;<span class="keyword">ref</span> bean=<span class="string">"jdbcRealm"</span>/&gt;</span><br><span class="line"> &lt;<span class="keyword">ref</span> bean=<span class="string">"secondRealm"</span>/&gt;</span><br><span class="line"> &lt;/<span class="built_in">list</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">---- realm在实现多realm认证的时候配置在ModularRealmAuthenticator中，但实现授权的时候通知要注入到securityManager的realms属性中</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在ShiroFilterFactoryBean中配置相应的权限拦截</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">    1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">    2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">    3) logout 登出</span></span><br><span class="line"><span class="comment">    4) rloes 权限拦截器  必须有相应权限才能通过</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /login.jsp = anon</span><br><span class="line">            /login.do = anon</span><br><span class="line">            /logout = logout</span><br><span class="line">            <span class="comment">&lt;!--权限拦截--&gt;</span></span><br><span class="line">            /user.jsp = roles[user]</span><br><span class="line">            /admin.jsp = roles[admin]</span><br><span class="line">            </span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="授权的实现"><a href="#授权的实现" class="headerlink" title="授权的实现"></a>授权的实现</h2><h3 id="如何实现授权"><a href="#如何实现授权" class="headerlink" title="如何实现授权?"></a>如何实现授权?</h3><ol><li><p>授权的realm需要继承AuthorizingRealm类并实现doGetAuthorizationInfo抽象方法</p></li><li><p>推荐：realm直接继承AuthorizingRealm类并实现doGetAuthorizationInfo和doGetAuthenticationInfo抽象方法就可直接实现认证和授权操作</p></li></ol><p>ps:AuthorizingRealm是AuthenticatingRealm的子类</p><h3 id="具体实现授权"><a href="#具体实现授权" class="headerlink" title="具体实现授权?"></a>具体实现授权?</h3><p>shrio会回调realm实现的doGetAuthorizationInfo方法进行授权</p><p>spring配置了权限拦截</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">        1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">        3) logout 登出</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login.do = anon</span><br><span class="line">                /logout = logout</span><br><span class="line">                /user.jsp = roles[user]</span><br><span class="line">                /admin.jsp = roles[admin]</span><br><span class="line">                </span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>realm实现了具体授权</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于授权 shrio 会回调</span></span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span>(<span class="params">PrincipalCollection principals</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 从PrincipalCollection 中获取用户登陆信息</span></span><br><span class="line">Object principal = principals.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用用户的登陆信息来授予用户 的权限或者角色(可能需要查询数据库)</span></span><br><span class="line">Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">roles.<span class="keyword">add</span>(<span class="string">"user"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"lyb"</span>.<span class="keyword">equals</span>(principal)) &#123;</span><br><span class="line">roles.<span class="keyword">add</span>(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 SimpleAuthorizationInfo 对象 ，并设置roles属性----授权</span></span><br><span class="line">SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo(roles);</span><br><span class="line"><span class="comment">// 4. 返回SimpleAuthorizationInfo对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><p>上面的代码根据用户的principal信息进行具体的授权，这个principal信息就是在realm认证的时候设置的。注意当实现多realm认证时，在授权获取到的principal会受到realm认证顺序和认证策略的影响。</p><h2 id="权限注解"><a href="#权限注解" class="headerlink" title="权限注解"></a>权限注解</h2><p><img src="https://s2.ax1x.com/2020/01/25/1eCDts.png" alt="image"></p><p>例子:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(<span class="meta-string">"shrioService"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShrioService</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequiresRoles(<span class="meta-string">"admin"</span>)</span> <span class="comment">//必须拥有admin角色才能访问</span></span><br><span class="line"><span class="keyword">public</span> void testMethod() &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"service 测试"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="授权相关拦截器"><a href="#授权相关拦截器" class="headerlink" title="授权相关拦截器"></a>授权相关拦截器</h2><h3 id="授权相关拦截器-1"><a href="#授权相关拦截器-1" class="headerlink" title="授权相关拦截器"></a>授权相关拦截器</h3><p><img src="https://s2.ax1x.com/2020/01/25/1eCWBF.png" alt="image"></p><h3 id="授权相关的拦截器"><a href="#授权相关的拦截器" class="headerlink" title="授权相关的拦截器"></a>授权相关的拦截器</h3><p><img src="https://s2.ax1x.com/2020/01/25/1eCf74.png" alt="image"></p><h1 id="从数据表中初始化资源"><a href="#从数据表中初始化资源" class="headerlink" title="从数据表中初始化资源"></a>从数据表中初始化资源</h1><ul><li><p>问题：当前对于权限拦截的配置是直接配置在文件中，对于大量拦截配置这样是不方便的，如何解决?</p></li><li><p>解决：采用从数据表中初始化资源，因为shrio底层是读取配置的字符串形成一个LinkedHashMap，所以我们直接创建一个LinkedMap注入到ShiroFilterFactoryBean的filterChainDefinitionMap属性</p></li></ul><p>原先是采用直接配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        配置哪些页面需要受保护，以及访问这些页面所需要的权限</span></span><br><span class="line"><span class="comment">        1) anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        2) authc 必须认证(即登陆)后才能访问</span></span><br><span class="line"><span class="comment">        3) logout 登出</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login.do = anon</span><br><span class="line">                /logout = logout</span><br><span class="line">                /user.jsp = roles[user]</span><br><span class="line">                /admin.jsp = roles[admin]</span><br><span class="line">                </span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后：采用初始化资源获取一个LinkedHashMap注入到filterChainDefinitionMap属性</p><ol><li>创建一个实例工厂用于获取LinkedHashMap</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChainDefinitionMapFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> LinkedHashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; buildFilterChainDefinitionMap()&#123;</span><br><span class="line"></span><br><span class="line">LinkedHashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; map = <span class="keyword">new</span> <span class="type">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过数据表获取初始化资源</span></span><br><span class="line"><span class="comment">//map.put("/login.jsp","anon") ----通过键值对的形式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在spring中配置这个工厂bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--j将获取的LinkedHashMap注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">ref</span>=<span class="string">"filterChainDefinitionMap"</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个bean ，该bean实际上是一个Map 通过实例工厂的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMap"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">factory-bean</span>=<span class="string">"filterChainDefinitionMapFactory"</span> <span class="attr">factory-method</span>=<span class="string">"buildFilterChainDefinitionMap"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMapFactory"</span> <span class="attr">class</span>=<span class="string">"com.lyb.factory.FilterChainDefinitionMapFactory"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h1><p>SessionDAO</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">配置示例</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Session ID生成器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionIdGenerator"</span></span></span></span><br><span class="line"><span class="xml">class="orq.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Session DAO. 继承EnterpriseCachesessionDAO--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionDAO"</span></span></span></span><br><span class="line"><span class="xml">class="com.atguiqgu.shiro.realms.MysessionDao"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"activeSessionsCacheName"</span> <span class="attr">value</span>=<span class="string">"shiro-activeSessionCache"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionIdGenerator"</span> <span class="attr">ref</span>=<span class="string">"sessionIdGenerator"</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--会话管理a--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.session.mgt. DefaultSessionManager"</span>&lt;<span class="attr">property</span> <span class="attr">name</span>=<span class="string">"globalSessionTimeout"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deleteInvalidSessions"</span> <span class="attr">values</span>"<span class="attr">true</span>"/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionvalidationSchedulerEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionDAo"</span> <span class="attr">ref</span>=<span class="string">"sessionDAO"</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;Shrio学习笔记的整理 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Shrio" scheme="http://liuyoubin.top/tags/Shrio/"/>
    
  </entry>
  
  <entry>
    <title>struts2学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/24/backEnd/framework/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/24/backEnd/framework/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-24T15:39:50.000Z</published>
    <updated>2020-01-25T13:21:18.244Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>虽然 Struts2已经不流行了 ┌(;￣◇￣)┘，但还是整理了以前学习Struts2的笔记  </p>          </div><a id="more"></a><h1 id="一、Struts2入门"><a href="#一、Struts2入门" class="headerlink" title="一、Struts2入门"></a>一、Struts2入门</h1><h2 id="搭建struts2项目的步骤"><a href="#搭建struts2项目的步骤" class="headerlink" title="搭建struts2项目的步骤"></a>搭建struts2项目的步骤</h2><ol><li>新建web项目</li><li>导入所需的jar包</li><li>配置web.xml文件（配置struts2的核心控制器）</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">filter</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;struts2&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;org.apache.struts2.dispatcher.ng.<span class="keyword">filter</span>.StrutsPrepareAndExecuteFilter&lt;/<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;//注意如果struts2的版本是<span class="number">2.5</span>要去掉.ng</span><br><span class="line">&lt;/<span class="keyword">filter</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">filter</span>-<span class="keyword">mapping</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;struts2&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在src下新建struts2的配置文件（<strong>struts.xml</strong>）<blockquote><p>XML文件的头文件可以直接在一个struts.xml文件里面拷贝，也可以在struts-core包下面的struts-default.xml里面拷贝</p></blockquote></li></ol><p>==注意：到这里struts框架已经搭建完成==</p><ol start="5"><li>编写Action类 </li></ol><ul><li><p>在servlet中默认执行service方法，在struts中默认执行execute方法</p></li><li><p>在servlet中默认执行service方法，在struts中默认执行execute方法</p></li><li><p>在servlet的service方法中的参数是HttpServletRequest和HttpServletResponse，无返回值</p></li><li><p>在struts2中的方法都是public的，且无参数，返回值都为String</p></li></ul><ol start="6"><li>在struts.xml中配置action类<blockquote><p>struts2是基于包来管理的，同样也是基于包来进行配置</p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- extends必须写，直接或间接继承struts-default，name自定义  namespace为命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">“/”</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name写请求名称 ;class是对应action的完全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.action.HelloAction"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result是结果集 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name与对应action中方法的返回值匹配，默认为success --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="struts2执行流程"><a href="#struts2执行流程" class="headerlink" title="struts2执行流程"></a>struts2执行流程</h2><blockquote><p>当用户提交一个请求，服务器接收，并交给struts2的核心过滤器来进行处理，struts2的过滤器调用struts2的一系列处理器来处理（如解析struts2.xml配置文件；和用户请求进行比对），直到调用对应的action类中的方法执行，执行完后再进行一系列处理到核心过滤器。由核心过滤器返回给服务器，服务器对浏览器进行响应。</p></blockquote><h2 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h2><p><img src="https://note.youdao.com/yws/public/resource/95dc5fd583515e098ac1c0633b7c4216/xmlnote/116E3C76607848498F473A995E5CC6FB/4699" alt="image"></p><h2 id="用struts2搭建一个简单登陆案例"><a href="#用struts2搭建一个简单登陆案例" class="headerlink" title="用struts2搭建一个简单登陆案例"></a>用struts2搭建一个简单登陆案例</h2><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Struts2Demo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- extends必须写，直接或间接继承struts-default，name自定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name写请求名称 ;class是对应action的完全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login1"</span> <span class="attr">class</span>=<span class="string">"com.lyb.action.LoginAction"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result是结果集 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name与对应action中方法的返回值匹配，默认为success --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"failed"</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Action类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.lyb.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">"lyb"</span>)&amp;&amp;pwd.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"failed"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login1.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>登陆成功<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、struts2线程安全问题"><a href="#二、struts2线程安全问题" class="headerlink" title="二、struts2线程安全问题"></a>二、struts2线程安全问题</h1><h2 id="线程安全的概念"><a href="#线程安全的概念" class="headerlink" title="线程安全的概念"></a>线程安全的概念</h2><p>在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。</p><h2 id="struts2线程安全？"><a href="#struts2线程安全？" class="headerlink" title="struts2线程安全？"></a>struts2线程安全？</h2><p>每次请求都会重新创建action对象（多例），所以struts2是==线程安全==的</p><p>由于action对象是struts2反射生成的，所以action类要求要有一个公共的无参构造方法</p><h1 id="三、action的实现方式以及表单数据的处理"><a href="#三、action的实现方式以及表单数据的处理" class="headerlink" title="三、action的实现方式以及表单数据的处理"></a>三、action的实现方式以及表单数据的处理</h1><h2 id="action的三种实现方法"><a href="#action的三种实现方法" class="headerlink" title="action的三种实现方法"></a>action的三种实现方法</h2><ul><li>自定义一个pojo类</li></ul><p>好处：不具有侵入性，容易更改、测试</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span>&#123;</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printfln(<span class="string">"pojo execute!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实现Action接口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">HelloAction</span> <span class="symbol">implement</span> <span class="symbol">Action</span>&#123; </span><br><span class="line">    <span class="keyword">public</span> String execute() throws Exception&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.printfln(<span class="string">"pojo execute!"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：使编码更加规范</p></li><li><p>继承ActionSupport</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123; </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：可以使用ActionSupport实现的功能 如：验证</p></li></ul><h2 id="以对象的方式处理表单数据"><a href="#以对象的方式处理表单数据" class="headerlink" title="以对象的方式处理表单数据"></a>以对象的方式处理表单数据</h2><h3 id="属性驱动"><a href="#属性驱动" class="headerlink" title="属性驱动"></a>属性驱动</h3><p>jsp页面</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">""</span> &gt;</span><br><span class="line">    姓名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"user.name"</span> /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    年龄：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=:text<span class="string">" name="</span>user.age" /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"确定"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>vo类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAction</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> User user;<span class="comment">//注意这里的属性全部用小写，否则设置不会成功</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set get 方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模型驱动（ModelDriven）"><a href="#模型驱动（ModelDriven）" class="headerlink" title="模型驱动（ModelDriven）"></a>模型驱动（ModelDriven）</h3><p>jsp页面</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">""</span> &gt;</span><br><span class="line">    姓名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"name"</span> /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    年龄：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=:text<span class="string">" name="</span>age" /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"确定"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>vo类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> UserAction implements ModelDriven&lt;<span class="keyword">User</span>&gt;&#123;</span><br><span class="line">    private <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">    </span><br><span class="line">    //<span class="keyword">get</span> <span class="keyword">set</span>方法</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> String <span class="keyword">execute</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">User</span> getModel()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、struts2配置文件详解"><a href="#四、struts2配置文件详解" class="headerlink" title="四、struts2配置文件详解"></a>四、struts2配置文件详解</h1><ul><li>配置文件名称</li></ul><p>struts2配置文件以struts.xml为名称，不能随意更改</p><ul><li>struts.xml头文件</li></ul><p>XML文件的头文件可以直接在一个struts.xml文件里面拷贝，也可以在struts-core包下面的struts-default.xml里面拷贝</p><p>下面为struts2 2.5版本的struts.xml的头文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="struts-xml的标签"><a href="#struts-xml的标签" class="headerlink" title="struts.xml的标签"></a>struts.xml的标签</h2><h3 id="1-constant标签"><a href="#1-constant标签" class="headerlink" title="1.constant标签"></a>1.constant标签</h3><p>作用：配置struts属性</p><ul><li>解决乱码问题（配置编码格式）</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.i18n.encoding" <span class="keyword">value</span>="UTF-8"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>自定义扩展名</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.action.extension" <span class="keyword">value</span>="action,,lyb"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>设置开发者模式</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.devMode" <span class="keyword">value</span>="true"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure><p>但设置为true时，会启动错误友好提醒模式</p><ul><li>设置配置文件修改时自动加载 —推荐开发时使用<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">constant</span> <span class="type">name</span>="struts.devMode" <span class="keyword">value</span>="true"&gt;&lt;/<span class="keyword">constant</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><p>注：上面常量配置的一种方式；也可以在src下新建==struts.properties==文件进行常量配置</p><h3 id="2-include标签"><a href="#2-include标签" class="headerlink" title="2.include标签"></a>2.include标签</h3><p>作用：引入文件，方便团队协作管理维护</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">include</span> <span class="keyword">file</span>=<span class="string">"com/lyb/struts/user.xml"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="3-package标签"><a href="#3-package标签" class="headerlink" title="3.package标签"></a>3.package标签</h3><ul><li><p>extends（继承）</p><blockquote><p>需要直接或者间接继承struts-default</p></blockquote></li><li><p>namespace（命名空间）</p><blockquote><p>例如当namespace=“/user”时，提交的路径需要以user/开头，并且当加上namespace时，结果集跳转路径不能省略/</p></blockquote><h2 id="action和result的配置详解"><a href="#action和result的配置详解" class="headerlink" title="action和result的配置详解"></a>action和result的配置详解</h2></li><li><p>name </p><blockquote><p>url的请求路径，不需要加后缀（.action）</p></blockquote></li><li><p>class </p><blockquote><p>url请求对应的java类（包名+类名）。该类由公共的无参构造方法创建（基于反射）</p></blockquote></li><li><p>method</p><blockquote><p>配置处理请求的方法，默认为execute 方法需要满足 【公共 无参 返回值为String】</p></blockquote></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;action <span class="built_in">name</span>=<span class="string">"login1"</span> <span class="built_in">class</span>=<span class="string">"com.lyb.action.LoginAction"</span> method=<span class="string">""</span>&gt;</span><br><span class="line">&lt;<span class="literal">result</span> <span class="built_in">name</span>=<span class="string">"success"</span> type=<span class="string">""</span>&gt;index.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="built_in">name</span>=<span class="string">"failed"</span>&gt;login.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure><ul><li><p>name</p><blockquote><p>匹配请求处理方法的返回值 默认为success</p></blockquote></li><li><p>type</p><blockquote><p>结果处理类型 默认为dispather（转发）</p><p>具体类型有哪些可以在struts-default.xml里查找</p></blockquote></li><li><p>chain：action连接，连接下一个action，也就是值为action标签的name属性</p></li><li><p>dispather：转发，与servlet的转发一致，如果request的数据要到视图层显示，使用dispather</p></li><li><p>redirect：重定向  如果重定向到jsp页面可以直接重定向，如果重定向到另一个action则需要注意后缀名，如果需要后缀名则一定要添加后缀名</p></li><li><p>redirectAction：重定向到另一个action，不用加后缀名</p></li><li><p>stream：以流的形式显示——文件下载</p></li></ul><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><ul><li>配置全局结果集</li></ul><p>注意：全局结果集要在action前面</p><ul><li>配置默认class</li></ul><p>注意：不自行配置的话默认配置ActionSupport类</p><ul><li>配置默认的action</li></ul><p>注意：当请求的action不存在时，执行默认的action</p><ul><li>使用通配符简化action的配置<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">package</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span>//默认的action</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span>//默认class</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">global-results</span>&gt;</span>//全局结果集</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">result</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--通配符* method对应的是第几个*的值 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login1*"</span> <span class="attr">class</span>=<span class="string">"com.lyb.action.LoginAction"</span> <span class="attr">method</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> &gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">//常规的action</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="配置文件的加载顺序"><a href="#配置文件的加载顺序" class="headerlink" title="配置文件的加载顺序"></a>配置文件的加载顺序</h2><p>struts-default.xml—–&gt;struts-plugin.xml—–&gt;struts.xml</p><hr><h1 id="五、ActionContext对象"><a href="#五、ActionContext对象" class="headerlink" title="五、ActionContext对象"></a>五、ActionContext对象</h1><h2 id="ActionContext介绍"><a href="#ActionContext介绍" class="headerlink" title="ActionContext介绍"></a>ActionContext介绍</h2><blockquote><p>struts1的Action必须依赖于web容器,他的execute方法会自动获得HttpservletReqest.HttpsevletResponse对象,从而可以跟web容器进行交互。</p><p>struts2的Action不用依赖于web容器,本身只是一个普通的java类而已。但是,在web开发中我们往往需要获得request, session、application等对象。这时候,可以通过ActionContext来处理。</p><p>ActionContext正如其名,是Action执行的上下文。他内部有个map属性,它存放了Action执行时需要用到的对象。</p><p>在每次执行Action之前都会创建新的Actioncontext对象,所以Actioncontext是线程安全的。新new的Actioncontext是保存在一个Threadlocal变量中,即采用Threadlocal.模式。Threadlocal变量为每个线程提供独立的变量值的副本,使每个线程都可以独立的使用自己的副本,而不会和其他线程发生冲突。</p><p>通过ActionContext获取的session 、request,application并不是真正的HttpServletRequest.HttpSerMletResponse, SerletContext对象,而是将这三个对象里面的值重新包装成了mapwn<br>对象。这样的封装,我们及获取了我们需要的值,同时避免了跟Web容器直接打交道,实现了完全的解耦</p></blockquote><ul><li><p>ActionContext是map结构的容器，是Action的上下文，存放了Action执行过程中的数据信息。</p></li><li><p>每次请求都会为当前线程创建一个新的ActionContext（采用ThreadLocal方式存储） ，所以ActionContext是线程安全的</p></li></ul><h2 id="ActionContext的获取"><a href="#ActionContext的获取" class="headerlink" title="ActionContext的获取"></a>ActionContext的获取</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActionContext axt = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>;</span><br></pre></td></tr></table></figure><p>由于ActionContext是线程安全的同时也是通过静态方法获取的，所以本线程中的非action类也可以进行访问/使用。</p><p><code>注意：ActionContext是基于请求创建的，所以在非请求线程中无法获取到ActionContext。</code></p><h2 id="ThreadLocal模式"><a href="#ThreadLocal模式" class="headerlink" title="ThreadLocal模式"></a>ThreadLocal模式</h2><p>ActionContext采用ThreadLocal方式存储信息保证线程安全</p><p>测试用例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//ThreadLocal是存放线程局部变量的容器</span></span><br><span class="line"><span class="comment">//存放在ThreadLocal的变量线程安全</span></span><br><span class="line"><span class="keyword">final</span> ThreadLocal&lt;<span class="keyword">String</span>&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">tl.<span class="built_in">set</span>(<span class="string">"sss"</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"Thread:"</span>+tl.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">System.out.<span class="built_in">println</span>(tl.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ActionContext包含六大对象"><a href="#ActionContext包含六大对象" class="headerlink" title="ActionContext包含六大对象"></a>ActionContext包含六大对象</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.ax1x.com/2020/01/25/1epgCq.png" alt="image"></h2><h1 id="六、struts2获取ServletApi"><a href="#六、struts2获取ServletApi" class="headerlink" title="六、struts2获取ServletApi"></a>六、struts2获取ServletApi</h1><h2 id="通过解耦的方式获取ServlertApi"><a href="#通过解耦的方式获取ServlertApi" class="headerlink" title="通过解耦的方式获取ServlertApi"></a>通过解耦的方式获取ServlertApi</h2><ol><li>通过ActionContext获取</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取session</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get<span class="constructor">Session()</span>.put(String key,Object   value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取HttpServletRequest的Attributes</span></span><br><span class="line">Map&lt;String,Object&gt; request = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get(<span class="string">"request"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取request对象的parameters</span></span><br><span class="line">Map&lt;String,Object&gt; parameters = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get<span class="constructor">Parameters()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取apllication</span></span><br><span class="line">Map&lt;String,Object&gt; application = <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get<span class="constructor">Application()</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过ActionContext直接获取HttpServletRequest</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) <span class="module-access"><span class="module"><span class="identifier">ActionContext</span>.</span></span>get<span class="constructor">Context()</span>.get(StrutsStatics.HTTP_REQUEST);</span><br></pre></td></tr></table></figure><h2 id="通过耦合的方式获取ServletApi"><a href="#通过耦合的方式获取ServletApi" class="headerlink" title="通过耦合的方式获取ServletApi"></a>通过耦合的方式获取ServletApi</h2><ol><li>实现ServletRequestAware接口</li></ol><p>注：要获取response对象可以实现ServletResponseAware</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span></span>&#123;</span><br><span class="line"></span><br><span class="line">HttpServletRequest request;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"hello struts"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.request = res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过ServletActionContext获取</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = <span class="module-access"><span class="module"><span class="identifier">ServletActionContext</span>.</span></span>get<span class="constructor">Request()</span>;</span><br></pre></td></tr></table></figure><h1 id="七、值栈与Ognl表达式"><a href="#七、值栈与Ognl表达式" class="headerlink" title="七、值栈与Ognl表达式"></a>七、值栈与Ognl表达式</h1><h2 id="什么是值栈"><a href="#什么是值栈" class="headerlink" title="什么是值栈?"></a>什么是值栈?</h2><p>值栈（ValueStack）是ActionContext的一个对象。</p><p>值栈是栈结构，具有后进先出的特点</p><p>值栈存储的数据是Action对象</p><h2 id="Ognl表达式"><a href="#Ognl表达式" class="headerlink" title="Ognl表达式"></a>Ognl表达式</h2><p>全称： Object-Graph-Navigation-language(对象图导航语言)</p><p>原则：对象分成两类==常用的==和==不常用的==，常用的一般是小数据而不常用的一般是大数据</p><p>获取：常用的数据直接获取，不常用的数据加#获取</p><h3 id="ognl表达式的直接使用"><a href="#ognl表达式的直接使用" class="headerlink" title="ognl表达式的直接使用"></a>ognl表达式的直接使用</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws OgnlException </span>&#123;</span><br><span class="line"></span><br><span class="line">Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setName(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">Object obj = Ognl.getValue(<span class="string">"#name"</span>, <span class="built_in">map</span>, stu);<span class="comment">//getValue(String,Map,Object) ---ognl表达式、不常用数据、常用数据</span></span><br><span class="line">System.out.<span class="built_in">println</span>(obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struts2中使用ognl表达式"><a href="#struts2中使用ognl表达式" class="headerlink" title="struts2中使用ognl表达式"></a>struts2中使用ognl表达式</h3><p>用法：在struts2中通过标签使用ognl表达式</p><p>注意：在struts2中使用ognl表达式需要通过过滤器来启动，如果过滤器的配置为*.action结尾需要通过action来跳转不能直接访问jsp页面。</p><p>struts2推荐通过action来控制而不是直接访问jsp页面</p><p>使用： </p><ul><li>在jsp页面中导入标签库&lt;%@taglib prefix=”s” uri=”/struts-tags”%&gt;</li></ul><p>例子：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="ruby">    pageEncoding=<span class="string">"utf-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>登陆成功<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#session.user"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">-----</span></span><br><span class="line"><span class="xml">public class LoginAction &#123;</span></span><br><span class="line"><span class="xml">private String name;</span></span><br><span class="line"><span class="xml">private String pwd;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">public String execute() &#123;</span></span><br><span class="line"><span class="xml">if(name.equals("lyb")&amp;&amp;pwd.equals("123")) &#123;</span></span><br><span class="line"><span class="xml">ActionContext.getContext().getSession().put("user", name);</span></span><br><span class="line"><span class="xml">return "success";</span></span><br><span class="line"><span class="xml">&#125;else &#123;</span></span><br><span class="line"><span class="xml">return "failed";</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><code>结论：action中的数据直接获取，ActionContext的数据加#获取</code></p><h1 id="八、类型转换"><a href="#八、类型转换" class="headerlink" title="八、类型转换"></a>八、类型转换</h1><ul><li><p>在servlet中，对于表单提供的非字符串类型需要手动进行类型转换</p></li><li><p>struts2能够对常用数据类型进行自动类型转换</p></li><li><p>对于自定义类型，struts2无法进行自动类型转换，那么需要手动进行转换。如果该类型转换的使用频率比较高则可以使用struts提供的类型转换器</p></li></ul><h2 id="类型转换器使用方法"><a href="#类型转换器使用方法" class="headerlink" title="类型转换器使用方法"></a>类型转换器使用方法</h2><ol><li>编写类型转换器—继承StrutsTypeConverter类</li><li>在src下编写xwork-conversion.properties的配置文件<ul><li>内容为：要转换的类型=类型转换器（类名+包名）</li></ul></li></ol><h3 id="编写类型转换器："><a href="#编写类型转换器：" class="headerlink" title="编写类型转换器："></a>编写类型转换器：</h3><p>当表单提交数据时，会调用<code>convertFromString</code>方法进行类型转换，该方法返回转换好的对象，并对action的对应属性进行赋值</p><p>当前台页面用ognl表达式输出action对应的属性时调用<code>convertToString</code>方法进行转换输出</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PoniterConverter</span> <span class="keyword">extends</span> <span class="title">StrutsTypeConverter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arg0 是ActionContext对象</span></span><br><span class="line"><span class="comment"> * arg1 是要转换的字符串数组</span></span><br><span class="line"><span class="comment"> * arg2是被转换的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="type">Object</span> convertFromString(<span class="type">Map</span> arg0, <span class="type">String</span>[] arg1, <span class="type">Class</span> arg2) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串转换为前台数据显示， ----通过ognl表达式为调用该方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="type">String</span> convertToString(<span class="type">Map</span> arg0, <span class="type">Object</span> arg1) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xwork-conversion.properties配置文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.lyb</span><span class="selector-class">.enty</span>.Poniter=com<span class="selector-class">.lyb</span><span class="selector-class">.converter</span>.PoniterConverter</span><br></pre></td></tr></table></figure><h1 id="九、struts2的验证机制"><a href="#九、struts2的验证机制" class="headerlink" title="九、struts2的验证机制"></a>九、struts2的验证机制</h1><h2 id="手动验证"><a href="#手动验证" class="headerlink" title="手动验证"></a>手动验证</h2><p>用法：action类需要继承ActionSupport类</p><p>作用：当继承ActionSupport类后，每一个请求来时会先执行==validate==验证方法,执行后才执行对应的调用方法。</p><h3 id="两种验证流程："><a href="#两种验证流程：" class="headerlink" title="两种验证流程："></a>两种验证流程：</h3><ol><li>请求的是execute方法</li></ol><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="function"><span class="title">request</span>--&gt;</span>validate方法</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--成功--&gt;</span>execue方法</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--失败--&gt;</span>input视图</span><br><span class="line"><span class="function"><span class="title">execue</span>方法--&gt;</span>respond</span><br></pre></td></tr></table></figure><ol start="2"><li>请求的是自定义的xxx方法</li></ol><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="function"><span class="title">request</span>--&gt;</span>validateXxx方法</span><br><span class="line"><span class="function"><span class="title">validateXxx</span>方法--成功--&gt;</span>validate方法</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--失败--&gt;</span>input视图</span><br><span class="line"><span class="function"><span class="title">validateXxx</span>方法--失败--&gt;</span>input视图</span><br><span class="line"><span class="function"><span class="title">validate</span>方法--&gt;</span>xxx方法</span><br><span class="line"><span class="function"><span class="title">xxx</span>方法--&gt;</span>respond</span><br></pre></td></tr></table></figure><p><code>在jsp页面通过&lt;s:actionerror/actionmessge&gt;取出信息</code></p><h3 id="验证案例："><a href="#验证案例：" class="headerlink" title="验证案例："></a>验证案例：</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">action类 继承ActionSupport</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">120</span>||age&lt;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.addActionError(<span class="string">"年龄不合法"</span>);<span class="comment">//会跳转到input，不会执行execute方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"register"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.RegisterAction"</span> <span class="attr">method</span>=<span class="string">"age"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.jsp页面</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="ruby">    pageEncoding=<span class="string">"utf-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>验证<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">s:actionerror</span>/&gt;</span>//取出验证提示错误信息</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"register.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">用户ID：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>success.jsp页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">验证成功。</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="验证框架的使用"><a href="#验证框架的使用" class="headerlink" title="验证框架的使用"></a>验证框架的使用</h2><p>使用验证框架的步骤：</p><ol><li><p>Action类要继承ActionSupport类</p></li><li><p>在对应的action类的包下，建一个验证框架的配置文件，该配置文件的名称必须为==action类名-validation.xml==</p></li></ol><p>例如: 一个名为<strong>AddACtion</strong>的类，对应的验证框架配置文件为<strong>AddAction-validation.xml</strong></p><ol start="3"><li>在配置文件里配置对应需验证属性的验证信息</li></ol><p>注意： 各种验证及其属性具体信息可以查看struts-core下xwork-validators的类</p><p>案例：</p><p>jsp页面</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action="register.action" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">用户ID：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="id"/&gt;</span><br><span class="line">密码：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="password" <span class="type">name</span>="password"/&gt;</span><br><span class="line">年龄：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="age"/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>Action类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterValidateAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action对应的验证框架</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">validators</span> <span class="meta-keyword">PUBLIC</span></span></span></span><br><span class="line"><span class="xml">   "-//Apache Struts//XWork Validator 1.0.3//EN"</span></span><br><span class="line"><span class="xml">   "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd"&gt; </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">validators</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span>//-----------name的值对应表单提交的name值</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">"requiredstring"</span>&gt;</span>//------使用的验证器</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"trim"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param</span>&gt;</span>//--------验证</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">message</span>&gt;</span>id必须为空<span class="tag">&lt;/<span class="name">message</span>&gt;</span>//-----------验证失败添加信息，并跳转到input页面</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"min"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"max"</span>&gt;</span>120<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">message</span>&gt;</span>年龄不合理,范围在$</span><span class="template-variable">&#123;min&#125;</span><span class="xml">到$</span><span class="template-variable">&#123;max&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"register"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.RegisterValidateAction"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h2 id="什么是拦截器、拦截器栈"><a href="#什么是拦截器、拦截器栈" class="headerlink" title="什么是拦截器、拦截器栈?"></a>什么是拦截器、拦截器栈?</h2><ul><li><p>Interceptor拦器类似于我们前面学过的过滤器,是可以在action执行前后执行的代 是我们做web开发时经常用的技术。比如:权限控制、日志等。我们也可以将多个Interceptor连在一起组成Interceptor 栈。</p></li><li><p>struts2拦截器,每个拦截器类只有一个对象实例,即采用==单例模式==,所有引用这个拦截器的Action都共享这一拦截器类的实例,因此,在拦截器中如果使用类变量,==要注意同步问题==。</p><ul><li><p>拦截器是在访问某个方法,字段之前或之后实施拦截。</p></li><li><p>拦截器是AOP的一种实现</p></li><li><p>拦截器栈(Interceptor stack)就是将拦截器按一定的顺序联结成一条链。<br>在访问被拦截的方法或字段时,拦截器链中的拦截器就会按其之前定义的顺序被调用。</p></li></ul></li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>struts2拦截器的实现原理相对简单,当请求struts2的action时, struts 2会查找配置文件,并根据其配密实例化相对应拦截器对象,然后串成一个列表,最后一个一个地调用列表中的拦截器</p><h2 id="拦截器作用"><a href="#拦截器作用" class="headerlink" title="拦截器作用"></a>拦截器作用</h2><p>一些action的公共代码可以放到拦截器里面</p><h2 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h2><ul><li>过滤器隶属web容器可以过滤一切请求（action、servlet、jsp、html）</li><li>拦截器隶属struts2,只能拦截action</li><li>过滤器内部使用函数回调实现、而拦截器采用动态代理实现<h2 id="拦截器实现步骤"><a href="#拦截器实现步骤" class="headerlink" title="拦截器实现步骤"></a>拦截器实现步骤</h2></li></ul><ol><li><p>编写拦截器类(实现Interceptor接口或者继承AbstractInterceptor类)</p></li><li><p>在struts.xml中配置拦截器</p></li><li><p>在action中引用拦截器</p></li></ol><p>案例：</p><p>拦截器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//执行下一个拦截器，直到执行action获取action返回的结果</span></span><br><span class="line">String result = invocation.invoke();</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"action共执行："</span>+(end-start)+<span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将结果返回给上一个拦截器</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在struts.xml配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 拦截器配置在package标签下，可以配置多个拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截器配置详解"><a href="#拦截器配置详解" class="headerlink" title="拦截器配置详解"></a>拦截器配置详解</h2><ul><li>当配置了自定义拦截器后，默认拦截器将不起作用</li><li>在struts-default.xml中，配置了默认拦截器，当不引用自定义拦截器，默认拦截器将起作用<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;interceptor-stack <span class="built_in">name</span>=<span class="string">"completeStack"</span>&gt;</span><br><span class="line">        &lt;interceptor-<span class="keyword">ref</span> <span class="built_in">name</span>=<span class="string">"defaultStack"</span>/&gt;</span><br><span class="line"> &lt;/interceptor-stack&gt;</span><br></pre></td></tr></table></figure></li><li>当引用了自定义拦截器后，想使用默认拦截器需要手动引用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>当action需要引用的拦截器较多时可以使用拦截器栈<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 拦截器配置在package标签下，可以配置多个拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 拦截器栈可以包含多个拦截器/拦截器栈 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>当包下所有的action都要使用某拦截器/拦截器栈时，可以将其定义为默认拦截器/拦截器栈</li></ul><p>==要注意位置：interceptoe—-defalut-interceptor—-action==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截器配置在package标签下，可以配置多个拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 拦截器栈可以包含多个拦截器/拦截器栈 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义默认拦截器/拦截器栈--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span><span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法拦截器"><a href="#方法拦截器" class="headerlink" title="方法拦截器"></a>方法拦截器</h2><p>作用：可以拦截指定的action执行方法</p><p>用法步骤：</p><ul><li>编写方法拦截器 继承==MethodFilterInterceptor==类</li><li>配置方法拦截器</li><li>引用方法拦截器</li></ul><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">方法拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">String</span> doIntercept(<span class="type">ActionInvocation</span> invocation) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"方法拦截器被执行"</span>);</span><br><span class="line"><span class="keyword">return</span> invocation.invoke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.TimeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置方法拦截器 </span></span><br><span class="line"><span class="comment">            通过includeMethods属性配置需要拦截的方法</span></span><br><span class="line"><span class="comment">            通过excludeMethods属性配置不需要拦截的方法 </span></span><br><span class="line"><span class="comment">            多个方法用逗号隔开</span></span><br><span class="line"><span class="comment">            --&gt;</span>     </span><br><span class="line">     <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"method"</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.MethodInterceptor"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"includeMethods"</span>&gt;</span>list<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 拦截器栈可以包含多个拦截器/拦截器栈 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 引用拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"method"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 手动引用默认拦截器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">1--引用方法拦截器--</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"com.lyb.acion.HelloAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十一、文件上传"><a href="#十一、文件上传" class="headerlink" title="十一、文件上传"></a>十一、文件上传</h1><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><p>案例:</p><p>jsp页面</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">       注意</span></span><br><span class="line"><span class="comment">       1.entype属性改写成multipart/form-data，代表可以上传各种类型的文件</span></span><br><span class="line"><span class="comment">       2.必须要用post方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&lt;form action="upload.action" <span class="keyword">method</span>="post" enctype="multipart/form-data"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="file"/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="上传"/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>action类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">File</span> file;<span class="comment">//接收表单上传的文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> fileFileName;<span class="comment">//文件的名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> fileContentType;<span class="comment">//文件的类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">upload</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">HttpServletRequest req = ServletActionContext.getRequest();</span><br><span class="line"><span class="keyword">String</span> path = req.getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(path);</span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> <span class="built_in">File</span>(path,fileFileName));</span><br><span class="line"><span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"> <span class="keyword">int</span> len;</span><br><span class="line"> <span class="keyword">while</span>((len=is.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line"> os.<span class="built_in">write</span>(<span class="built_in">buffer</span>);</span><br><span class="line"> os.<span class="built_in">flush</span>();</span><br><span class="line"> &#125;</span><br><span class="line">os.<span class="built_in">close</span>();</span><br><span class="line">is.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>多文件上传可以理解为上传到action类的是一个file数组</p><h1 id="十二、文件下载"><a href="#十二、文件下载" class="headerlink" title="十二、文件下载"></a>十二、文件下载</h1><p>文件下载案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"download.action"</span>&gt;</span>下载思维导图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;action <span class="attribute">name</span>=<span class="string">"download"</span> <span class="attribute">class</span>=<span class="string">"cn.lyb.action.DownLoadAction"</span>&gt;&lt;/action&gt;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> * @throws IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line"><span class="comment">//获取请求对象</span></span><br><span class="line">HttpServletRequest req = ServletActionContext.getRequest();</span><br><span class="line"><span class="comment">//获取响应对象</span></span><br><span class="line">HttpServletResponse resp = ServletActionContext.getResponse();</span><br><span class="line"><span class="comment">//获取资源文件路径</span></span><br><span class="line"><span class="keyword">String</span> path = req.getRealPath(<span class="string">"/download"</span>);</span><br><span class="line"><span class="comment">//获取取资源文件，此文件在path目录下</span></span><br><span class="line"><span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(path,<span class="string">"CD.bmd"</span>);</span><br><span class="line"><span class="comment">//设置响应信息</span></span><br><span class="line">resp.setContentLength((<span class="keyword">int</span>)file.length());</span><br><span class="line">resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">resp.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=CD.bmd"</span>);</span><br><span class="line">resp.setContentType(<span class="string">"application/octet-stream"</span>); <span class="comment">//applicatiga/octet-stream..application/x-madonlsed可选参数</span></span><br><span class="line"><span class="comment">//创建输入输出流</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">OutputStream os = resp.getOutputStream();</span><br><span class="line"><span class="comment">//准备缓冲数组</span></span><br><span class="line"><span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//写出文件</span></span><br><span class="line"><span class="keyword">while</span>((len=is.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">os.<span class="built_in">write</span>(<span class="built_in">buffer</span>,<span class="number">0</span>,len);</span><br><span class="line">os.<span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">os.<span class="built_in">close</span>();</span><br><span class="line">is.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、strutsApi实现ajax"><a href="#十三、strutsApi实现ajax" class="headerlink" title="十三、strutsApi实现ajax"></a>十三、strutsApi实现ajax</h1><h2 id="使用原生struts2实现ajax"><a href="#使用原生struts2实现ajax" class="headerlink" title="使用原生struts2实现ajax"></a>使用原生struts2实现ajax</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3 .3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$.post(<span class="string">"ajax.action"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">'#msg'</span>).html(data);</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取ajax信息"</span> <span class="attr">id</span>=<span class="string">"btn"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxAction</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">HttpServletResponse resp =  ServletActionContext.getResponse();</span><br><span class="line">resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">resp.getWriter().<span class="built_in">write</span>(<span class="string">"暗淡青黄体性柔"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;action <span class="attribute">name</span>=<span class="string">"ajax"</span> <span class="attribute">class</span>=<span class="string">"cn.lyb.action.AjaxAction"</span>&gt;&lt;/action&gt;</span><br></pre></td></tr></table></figure><h2 id="使用struts2插件实现ajax-json格式-处理"><a href="#使用struts2插件实现ajax-json格式-处理" class="headerlink" title="使用struts2插件实现ajax(json格式)处理"></a>使用struts2插件实现ajax(json格式)处理</h2><p>使用struts2实现json需要导入下列的jar包</p><p><img src="https://s2.ax1x.com/2020/01/25/1e99IA.png" alt="image"></p><p>jsp页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$.post(<span class="string">"json.action"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> html =<span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    html+="<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].name+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].age+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>"</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">$(<span class="string">'#content'</span>).html(html);</span></span><br><span class="line"><span class="actionscript">&#125;,<span class="string">'json'</span>);</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取json信息"</span> <span class="attr">id</span>=<span class="string">"btn"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>struts.xml</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    注意</span></span><br><span class="line"><span class="comment">        1.要继承json-default</span></span><br><span class="line"><span class="comment">        2.结果集的类型要为json</span></span><br><span class="line"><span class="comment">        3.需要设置参数param的root</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;package <span class="built_in">name</span>=<span class="string">"default2"</span> extends=<span class="string">"json-default"</span> namespace=<span class="string">"/"</span>&gt;</span><br><span class="line">&lt;<span class="built_in">action</span> <span class="built_in">name</span>=<span class="string">"json"</span> class=<span class="string">"cn.lyb.action.JosnAction"</span>&gt;</span><br><span class="line">&lt;result <span class="built_in">type</span>=<span class="string">"json"</span>&gt;</span><br><span class="line">&lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"root"</span>&gt;root&lt;/<span class="built_in">param</span>&gt;</span><br><span class="line">&lt;/result&gt;</span><br><span class="line">&lt;/<span class="built_in">action</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/package&gt;</span><br></pre></td></tr></table></figure><p>action类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosnAction</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JSONArray root;</span><br><span class="line"><span class="comment">//如果是单个对象可以使用JSONObject</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="built_in">list</span>.add(<span class="keyword">new</span> User(<span class="string">"小明"</span>,<span class="number">25</span>));</span><br><span class="line"><span class="built_in">list</span>.add(<span class="keyword">new</span> User(<span class="string">"小宏"</span>,<span class="number">24</span>));</span><br><span class="line"><span class="built_in">list</span>.add(<span class="keyword">new</span> User(<span class="string">"小阿三"</span>,<span class="number">23</span>));</span><br><span class="line">root = JSONArray.fromObject(<span class="built_in">list</span>);<span class="comment">//将Object类型数据转换成json格式 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(JSONArray root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;虽然 Struts2已经不流行了 ┌(;￣◇￣)┘，但还是整理了以前学习Struts2的笔记  &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Struts2" scheme="http://liuyoubin.top/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/24/backEnd/framework/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/24/backEnd/framework/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-24T13:45:17.000Z</published>
    <updated>2020-01-25T13:20:45.932Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>MyBatis学习笔记的整理 </p>          </div><a id="more"></a><h1 id="一、MyBatis入门"><a href="#一、MyBatis入门" class="headerlink" title="一、MyBatis入门"></a>一、MyBatis入门</h1><ol><li>什么是MyBatis?</li></ol><p>MyBatis是一个基于java的持久层框架</p><ol start="2"><li>MyBatis的作用?</li></ol><p>维护数据的持久化，帮助程序员将数据存入数据库，将数据从数据库取出封装成对象</p><h2 id="MyBatis的使用步骤"><a href="#MyBatis的使用步骤" class="headerlink" title="MyBatis的使用步骤"></a>MyBatis的使用步骤</h2><ol><li><p>导入mybatis相关的jar包+数据库驱动包</p></li><li><p>编写核心配置文件 </p></li></ol><p>实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/cdleding?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/entiy/user.mapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建SqlSessionFactory ，以及获得SqlSession</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>; <span class="comment">//读取mybatis配置文件</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource); </span><br><span class="line">SqlSessionFactory sqlSessionFactory =  <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">SqlSession <span class="title">getSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"><span class="function"><span class="keyword">return</span> sqlSessionFactory.<span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里mybatis就可以使用了<br>4. 创建实体类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>编写sql映射语句</li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"cn.lyb.entiy.User"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">select * from user where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="6"><li>测试</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws IOException &#123;</span><br><span class="line">//获得SqlSession</span><br><span class="line">SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">User</span> <span class="keyword">user</span> = <span class="keyword">session</span>.selectOne("cn.lyb.user.Mapper.selectUser", <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、MyBatis增删改查"><a href="#二、MyBatis增删改查" class="headerlink" title="二、MyBatis增删改查"></a>二、MyBatis增删改查</h1><h2 id="sql映射配置文件"><a href="#sql映射配置文件" class="headerlink" title="sql映射配置文件"></a>sql映射配置文件</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"cn.lyb.entiy.User"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">select * from user2 where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lyb.entiy.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">insert into user2 (name,age) values(#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;age&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lyb.entiy.User"</span>&gt;</span></span></span><br><span class="line"><span class="xml">update user2 set name=#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,age=#</span><span class="template-variable">&#123;age&#125;</span><span class="xml"> where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span>&gt;</span></span></span><br><span class="line"><span class="xml">delete from user2 where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="dao层示例"><a href="#dao层示例" class="headerlink" title="dao层示例"></a>dao层示例</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserDao &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">User</span> getUserById(<span class="type">int</span> id) throws IOException &#123;</span><br><span class="line">//获得SqlSession</span><br><span class="line">SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">User</span> <span class="keyword">user</span> = <span class="keyword">session</span>.selectOne("cn.lyb.user.Mapper.selectUser", id);</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">public</span> <span class="type">int</span> addUser(<span class="keyword">User</span> <span class="keyword">user</span>) throws IOException &#123;</span><br><span class="line">//获得SqlSession</span><br><span class="line">SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line"><span class="type">int</span> result = <span class="keyword">session</span>.<span class="keyword">insert</span>("cn.lyb.user.Mapper.addUser", <span class="keyword">user</span>);</span><br><span class="line">//添加信息是一种事务，需要手动提交</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">public</span> <span class="type">int</span> updateUser(<span class="keyword">User</span> <span class="keyword">user</span>) throws IOException &#123;</span><br><span class="line">//获得SqlSession</span><br><span class="line">SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line"><span class="type">int</span> result = <span class="keyword">session</span>.<span class="keyword">update</span>("cn.lyb.user.Mapper.updateUser", <span class="keyword">user</span>);</span><br><span class="line">//更新信息是一种事务，需要手动提交</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">public</span> <span class="type">int</span> deleteUserById(<span class="type">int</span> id) throws IOException &#123;</span><br><span class="line">//获得SqlSession</span><br><span class="line">SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">//参数为映射文件的namespace+id唯一确定<span class="keyword">sql</span>语句</span><br><span class="line"><span class="type">int</span> result = <span class="keyword">session</span>.<span class="keyword">delete</span>("cn.lyb.user.Mapper.deleteUser", id);</span><br><span class="line">//删除信息是一种事务，需要手动提交</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、配置文件的解析和优化"><a href="#三、配置文件的解析和优化" class="headerlink" title="三、配置文件的解析和优化"></a>三、配置文件的解析和优化</h1><h2 id="1-mybatis配置文件的解析"><a href="#1-mybatis配置文件的解析" class="headerlink" title="1.mybatis配置文件的解析"></a>1.mybatis配置文件的解析</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">环境管理</span></span><br><span class="line"><span class="comment">1.environments指MyBatis可以配置多个环境，default指向默认环境</span></span><br><span class="line"><span class="comment">2。每个SqlSessionFactory对应一个环境</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">事务管理</span></span><br><span class="line"><span class="comment"> �  JDBC- 这个类型直接全部使用 JDBC 的提交和回滚功能。它依靠使用连接的数据源来管理事务的 作用域。</span></span><br><span class="line"><span class="comment"> �  MANAGED- 这个类型什么不做，它从不提交、回滚和关闭连接。而是让窗口来管理事务的全部生 命周期。（</span></span><br><span class="line"><span class="comment"> 比如说Spring 或者 JAVAEE 服务器）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  数据源</span></span><br><span class="line"><span class="comment"> UNPOOLED - 这个数据源实现只是在每次请求的时候简单的打开和关闭一个连接。</span></span><br><span class="line"><span class="comment"> POOLED - 这个数据源缓存 JDBC 连接对象用于避免每次都要连接和生成连接实例而需要的验证时间。</span></span><br><span class="line"><span class="comment">      对于并发WEB 应用，这种方式非常流行因为它有最快的响应时间。</span></span><br><span class="line"><span class="comment"> JNDI- 这个数据源实现是为了准备和Spring 或应用服务一起使用，可以在外部也可以在内部配置这个 数据源，</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义映射语句的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/entiy/user.mapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-mybatis配置文件的优化"><a href="#2-mybatis配置文件的优化" class="headerlink" title="2.mybatis配置文件的优化"></a>2.mybatis配置文件的优化</h2><h3 id="1-使用别名简化mapperr文件"><a href="#1-使用别名简化mapperr文件" class="headerlink" title="1.使用别名简化mapperr文件"></a>1.使用别名简化mapperr文件</h3><p>mybatis配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">1--</span></span></span><br><span class="line"><span class="tag">            为指定类型指定别名 使得在<span class="attr">mapper</span>映射文件中简化引用</span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>：原<span class="attr">leixing</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alias:</span>别名</span></span><br><span class="line"><span class="tag">         <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.lyb.entiy.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     为指定包下所有的类指定别名，默认别名为对应的类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.entiy"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    ··································</span><br><span class="line">    ··································</span><br><span class="line">    ··································</span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-使用properties文件配置数据源"><a href="#2-使用properties文件配置数据源" class="headerlink" title="2.使用properties文件配置数据源"></a>2.使用properties文件配置数据源</h3><p>建立porperties文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/s_01?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;useSSL=<span class="literal">false</span></span><br><span class="line"><span class="attr">username</span>=root</span><br><span class="line"><span class="attr">password</span>=lyb980328</span><br></pre></td></tr></table></figure><p>mybatis配置文件</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">src</span>=<span class="string">"文件路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="四、属性名和字段名不一致的处理"><a href="#四、属性名和字段名不一致的处理" class="headerlink" title="四、属性名和字段名不一致的处理"></a>四、属性名和字段名不一致的处理</h1><p>数据库表字段</p><p><code>id , name , pwd</code></p><p>java实体类属性</p><p><code>id , name , password</code></p><p>使用查找语句</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   &lt;select <span class="built_in">id</span>=<span class="string">"selectUser"</span> resultType=<span class="string">"User"</span>&gt; </span><br><span class="line">select <span class="built_in">id</span>,<span class="built_in">name</span>,pwd <span class="keyword">from</span> user2 <span class="keyword">where</span> <span class="built_in">id</span>= <span class="comment">#&#123;id&#125;  </span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li><p>出现的问题：密码无法设置</p></li><li><p>原因：mybatis会将列名转为小写，调用对应的实体类的set方法进行设置</p></li></ul><p>解决办法</p><p>1.使用别名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   &lt;select <span class="built_in">id</span>=<span class="string">"selectUser"</span> resultType=<span class="string">"User"</span>&gt; </span><br><span class="line">select <span class="built_in">id</span>,<span class="built_in">name</span>,pwd password <span class="keyword">from</span> user2 <span class="keyword">where</span> <span class="built_in">id</span>= <span class="comment">#&#123;id&#125;  </span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>2.使用结果集</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"UserMapper"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">select id,name,pwd from user2 where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.lyb.entiy.User"</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--id为主键--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--column为数据库表列名，property为实体类属性名--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="五、分页的实现"><a href="#五、分页的实现" class="headerlink" title="五、分页的实现"></a>五、分页的实现</h1><h2 id="通过Map结构实现分页"><a href="#通过Map结构实现分页" class="headerlink" title="通过Map结构实现分页"></a>通过Map结构实现分页</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--这里使用了MyBatis的自带别名Map ,代表一个Map类型--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"User"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select * from user2 limit #</span><span class="template-variable">&#123;startIndex&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pageSize&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    分页查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> currentPage,<span class="keyword">int</span> pageSize)</span> throws IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">Map&lt;<span class="keyword">String</span>,Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//当前页-1乘每页数=数据数量等于开始下标</span></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"startIndex"</span>,(currentPage<span class="number">-1</span>)*pageSize));</span><br><span class="line"><span class="built_in">map</span>.pur(<span class="string">"pageSize"</span>,pageSize);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; <span class="built_in">list</span>= session.selecList(<span class="string">"cn.lyb.user.Mapper.selectUser"</span>, <span class="built_in">map</span>);</span><br><span class="line">session.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过RowBounds实现分页"><a href="#通过RowBounds实现分页" class="headerlink" title="通过RowBounds实现分页"></a>通过RowBounds实现分页</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper <span class="keyword">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">"selectAll"</span> resultType=<span class="string">"User"</span> &gt;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user2</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    分页查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public User get<span class="constructor">UserById(<span class="params">int</span> <span class="params">currentPage</span>,<span class="params">int</span> <span class="params">pageSize</span>)</span> throws IOException &#123;</span><br><span class="line"></span><br><span class="line">SqlSession session = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line"><span class="comment">//通过RowBounds对象实现分页</span></span><br><span class="line">RowBounds row = <span class="keyword">new</span> <span class="constructor">RowBounds((<span class="params">currentPage</span>-1)</span>*pageSize),pageSize);</span><br><span class="line">    </span><br><span class="line">List&lt;User&gt; <span class="built_in">list</span>= session.selec<span class="constructor">List(<span class="string">"cn.lyb.user.Mapper.selectUser"</span>, <span class="params">null</span>,<span class="params">row</span>)</span>;</span><br><span class="line">session.close<span class="literal">()</span>;</span><br><span class="line">return <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、使用注解实现MyBatis"><a href="#六、使用注解实现MyBatis" class="headerlink" title="六、使用注解实现MyBatis"></a>六、使用注解实现MyBatis</h1><p>1.编写dao层接口</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">UserDao</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    使用注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@Select(<span class="string">"select * from user2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.修改mybatis配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义dao层的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.UserDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.调用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">SqlSession session = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    传入dao接口类型，mybatis会通过动态代理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">UserDao dao = session.get<span class="constructor">Mapper(UserDao.<span class="params">class</span>)</span>;</span><br><span class="line">List&lt;User&gt; <span class="built_in">list</span> = dao.get<span class="constructor">List()</span>;</span><br><span class="line">for(User u:<span class="built_in">list</span>) &#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、联表处理"><a href="#七、联表处理" class="headerlink" title="七、联表处理"></a>七、联表处理</h1><h2 id="多对一的处理"><a href="#多对一的处理" class="headerlink" title="多对一的处理"></a>多对一的处理</h2><p>数据库设计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">教师表 <span class="keyword">create</span> <span class="keyword">table</span> teacher (<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increament,</span><br><span class="line">                             <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                             primary <span class="keyword">key</span>(<span class="keyword">id</span>),</span><br><span class="line">                            );</span><br><span class="line">学生表 <span class="keyword">create</span> <span class="keyword">table</span> student (<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increament,</span><br><span class="line">                             <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                             tid <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                             primary <span class="keyword">key</span>(<span class="keyword">id</span>),</span><br><span class="line">                             <span class="keyword">foreign</span> <span class="keyword">key</span> (tid) <span class="keyword">references</span> teacher(<span class="keyword">id</span>),</span><br><span class="line">                            );</span><br></pre></td></tr></table></figure><p>实体类设计</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> teacher;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>对于多对一联表处理有两种实现方式</p><ul><li>按结果嵌套处理</li><li>按查询嵌套处理<h3 id="按结果嵌套处理"><a href="#按结果嵌套处理" class="headerlink" title="按结果嵌套处理"></a>按结果嵌套处理</h3></li></ul><p>编写映射文件(重点)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按结果嵌套处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllStudent"</span> <span class="attr">resultMap</span>=<span class="string">"studentType"</span>&gt;</span></span><br><span class="line">select s.id sid,s.name sname,s.tid stid,t.id tid,t.name tname from student s,teacher t where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"studentType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关联对象property在Student中的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span>//property就是实体类中的属性，javaType是属性的类型</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按查询嵌套处理"><a href="#按查询嵌套处理" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h3><p>编写映射文件(重点)</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 按查询嵌套处理 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"studentType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select * from student</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"studentType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span>//将查询结果中的tid作为参数，调用另一个select语句查询教师信息</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select * from teacher where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>dao层</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> StudentDao &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> List&lt;Student&gt; getAllStudent() throws IOException &#123;</span><br><span class="line">SqlSession <span class="keyword">session</span> = MyBatisUtil.getSqlSession();</span><br><span class="line">List&lt;Student&gt; list = <span class="keyword">session</span>.selectList("cn.lyb.student.Mapper.getAllStudent");</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line"><span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws IOException </span>&#123;</span><br><span class="line">StudentDao dao  = <span class="keyword">new</span> StudentDao();</span><br><span class="line">List&lt;Student&gt; <span class="built_in">list</span> = dao.getAllStudent(); </span><br><span class="line"><span class="keyword">for</span>(Student s:<span class="built_in">list</span>) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(s);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一对多的处理"><a href="#一对多的处理" class="headerlink" title="一对多的处理"></a>一对多的处理</h2><p>实体类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> List&lt;Student&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Student&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>对于一对多联表处理同样有两种实现方式</p><ul><li>按结果嵌套处理</li><li>按查询嵌套处理<h3 id="按结果嵌套处理-1"><a href="#按结果嵌套处理-1" class="headerlink" title="按结果嵌套处理"></a>按结果嵌套处理</h3></li></ul><p>编写映射文件(重点)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按结果嵌套处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"teacherType"</span>&gt;</span></span><br><span class="line">select s.id sid,s.name sname,s.tid stid,t.id tid,t.name tname from student s,teacher t where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Teacher"</span> <span class="attr">id</span>=<span class="string">"teacherType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">collections</span> <span class="attr">property</span>=<span class="string">"list"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span>&gt;</span>//property就是实体类中的属性，ofType是属性的类型</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collections</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按查询嵌套处理-1"><a href="#按查询嵌套处理-1" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h3><p>编写映射文件(重点)</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.student.Mapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 按查询嵌套处理 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"teacherType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select * from teacher</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Teacher"</span> <span class="attr">id</span>=<span class="string">"teacherType2"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">collections</span> <span class="attr">property</span>=<span class="string">"list"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">odType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudent"</span>&gt;</span><span class="tag">&lt;/<span class="name">collections</span>&gt;</span>//将查询结果中的id作为参数，调用另一个select语句查询教师信息</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select * from student where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="八、动态sql"><a href="#八、动态sql" class="headerlink" title="八、动态sql"></a>八、动态sql</h1><p>根据不同的查询条件，生成不同的sql语句 </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id="" result="User" paramterType="Map"&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> </span><br><span class="line">    &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test="name!=null"&gt;</span><br><span class="line">            <span class="type">name</span> = #&#123;<span class="type">name</span>&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="九-、逆向工程"><a href="#九-、逆向工程" class="headerlink" title="九 、逆向工程"></a>九 、逆向工程</h1><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 在工程下建立mbg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/s_02?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"lyb980328"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定javaBean生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">targetPackage</span>=<span class="string">"com.lyb.bean"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定sql映射文件生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">targetPackage</span>=<span class="string">"mapper"</span>  <span class="attr">targetProject</span>=<span class="string">".\src\main\resources"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定dao接口生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">targetPackage</span>=<span class="string">"com.lyb.dao"</span>  <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定每个表的生成策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tbl_emp"</span> <span class="attr">domainObjectName</span>=<span class="string">"Employee"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tbl_dept"</span> <span class="attr">domainObjectName</span>=<span class="string">"Department"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws SQLException, IOException, InterruptedException, InvalidConfigurationException, XMLParserException &#123;</span><br><span class="line">   List&lt;<span class="keyword">String</span>&gt; warnings = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">   boolean overwrite = <span class="literal">true</span>;</span><br><span class="line">   File configFile = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">"mbg.xml"</span>);</span><br><span class="line">   ConfigurationParser cp = <span class="keyword">new</span> <span class="type">ConfigurationParser</span>(warnings);</span><br><span class="line">   Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">   DefaultShellCallback callback = <span class="keyword">new</span> <span class="type">DefaultShellCallback</span>(overwrite);</span><br><span class="line">   MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> <span class="type">MyBatisGenerator</span>(config, callback, warnings);</span><br><span class="line">   myBatisGenerator.generate(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、映射文件标签引用"><a href="#十、映射文件标签引用" class="headerlink" title="十、映射文件标签引用"></a>十、映射文件标签引用</h1><h3 id="SQL文件顶级标签"><a href="#SQL文件顶级标签" class="headerlink" title="SQL文件顶级标签"></a>SQL文件顶级标签</h3><ul><li>cache  -  给定命名空间的缓存配置</li><li>cache-ref   -  其他空间命名缓存配置的引用</li><li>resultMap - 是最复杂也是最强大的元素， 用来描述如何从数据库结果集中来加载对象。</li><li>sql - 可被其他语句引用的可重用语句块</li><li>insert - 映射插入语句</li><li>update - 映射更新语句</li><li>delete - 映射删除语句</li><li>select - 映射查询语句</li></ul><hr><h3 id="顶级标签详解"><a href="#顶级标签详解" class="headerlink" title="顶级标签详解"></a>顶级标签详解</h3><h4 id="1-Select"><a href="#1-Select" class="headerlink" title="1.Select"></a>1.Select</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id = <span class="string">"select"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"hashmap"</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> id = <span class="meta">#&#123;id&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这样的写法的意思是接受一个int（或Integer）类型的参数，并返回一个HashMap类型的对象，其中的键是列名，值便是结果行中的对应值，注意参数符号： #{id}</p></blockquote><p>子级标签</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;select</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"selectPerson"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"int"</span></span><br><span class="line">  <span class="attribute">parameterMap</span>=<span class="string">"deprecated"</span></span><br><span class="line">  <span class="attribute">resultType</span>=<span class="string">"hashmap"</span></span><br><span class="line">  <span class="attribute">resultMap</span>=<span class="string">"personResultMap"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"false"</span></span><br><span class="line">  <span class="attribute">useCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"10000"</span></span><br><span class="line">  <span class="attribute">fetchSize</span>=<span class="string">"256"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">resultSetType</span>=<span class="string">"FORWARD_ONLY"</span>&gt;</span><br></pre></td></tr></table></figure><p>① id ： 在命名空间中唯一的标识符， 可以被用来引用这条语句</p><p> ② parameterType ： 将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为mybatis可以通过TypeHandler推断出具体传入语句的参数，默认为unset</p><p>③ resultType： 返回期望的类型的类的完全限定名或别名。 注意如果是集合情形，那应该是集合可以包含的类型，而不是集合本身。 使用resultType 或 resultMap， 但不能同时使用</p><p>④ resultMap ： 返回的map集合类型，使用resultType 或 resultMap， 但不能同时使用</p><p>⑤ flushCache： 将其设置为true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值为 false</p><p>⑥ useCache： 将其设置为true，将会导致本条语句的结果被二级缓存，默认值：对select标签元素设置为true</p><p>⑦ timeout： 这个设置是抛出异常之前，驱动程序等待数据库返回请求结果的秒数，默认值为unset（依赖驱动）</p><p>⑧ fetchSize：这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等</p><p>⑨ statementType： statement， prepared或callable的一个。</p><p>⑩ resultSetType：forward_only， scroll_sensitive或scroll_insensitive</p><hr><h4 id="2-Insert、-update、-和-delete语句"><a href="#2-Insert、-update、-和-delete语句" class="headerlink" title="2. Insert、 update、 和 delete语句"></a>2. Insert、 update、 和 delete语句</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;insert</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"insertAuthor"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"domain.blog.Author"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">keyProperty</span>=<span class="string">""</span></span><br><span class="line">  <span class="attribute">keyColumn</span>=<span class="string">""</span></span><br><span class="line">  <span class="attribute">useGeneratedKeys</span>=<span class="string">""</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"20"</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;update</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"updateAuthor"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"domain.blog.Author"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"20"</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;delete</span><br><span class="line">  <span class="attribute">id</span>=<span class="string">"deleteAuthor"</span></span><br><span class="line">  <span class="attribute">parameterType</span>=<span class="string">"domain.blog.Author"</span></span><br><span class="line">  <span class="attribute">flushCache</span>=<span class="string">"true"</span></span><br><span class="line">  <span class="attribute">statementType</span>=<span class="string">"PREPARED"</span></span><br><span class="line">  <span class="attribute">timeout</span>=<span class="string">"20"</span>&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="3-cache和cache-ref元素"><a href="#3-cache和cache-ref元素" class="headerlink" title="3.cache和cache-ref元素"></a>3.cache和cache-ref元素</h4><h5 id="1、-cache元素"><a href="#1、-cache元素" class="headerlink" title="1、 cache元素"></a>1、 cache元素</h5><blockquote><p>Mybatis 包含一个强大的、可配置并可定制的查询缓存机制。Mybatis3 的缓存实现有了许多的改进，使其更强大更容易配置。 默认情况下， 缓存是没有开启的，出了会话缓存以外。 会话缓存可以提高性能，且能解决循环依赖。 开启二级缓存，只需要在SQL映射文件中加入简单的一行。</p></blockquote><p> <cache /> 这句简单的语句作用如下：</p><p> ① 所有映射文件里的select语句的结果都会被缓存</p><p> ② 所有映射文件里的insert、update和delete语句执行都会清空缓存</p><p> ③ 缓存使用最近最少使用算法(LRU)来回收</p><p> ④ 缓存不会被设定的时间所清空</p><p> ⑤ 每个缓存可以存储1024个列表或对象的引用</p><p> ⑥ 缓存作为“读/写”缓存，意味着检索的对象不是共享的且可以被调用者安全地修改，而不会被其他调用者或线程干扰</p><p> 所有这些特性都可以通过cache元素进行修改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache</span><br><span class="line">  <span class="attribute">eviction</span>=<span class="string">"FIFO"</span></span><br><span class="line">  <span class="attribute">flushInterval</span>=<span class="string">"60000"</span></span><br><span class="line">  <span class="attribute">size</span>=<span class="string">"512"</span></span><br><span class="line">  <span class="attribute">readOnly</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure><h5 id="2、cache-ref元素"><a href="#2、cache-ref元素" class="headerlink" title="2、cache-ref元素"></a>2、cache-ref元素</h5><blockquote><p>除了在某一个命名空间里使用cache元素配置或者刷新缓存。但有可能在不同的命名空间里共享同一个缓存配置或者实例。在这种情况下，则可以使用cache-ref元素来引用另一个缓存：</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache-<span class="keyword">ref</span> <span class="keyword">namespace</span>=<span class="string">""</span> /&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="4-Result-Map"><a href="#4-Result-Map" class="headerlink" title="4. Result Map"></a>4. Result Map</h4><blockquote><p>resultMap 元素的作用是将数据集的列映射到Map结果集，例   ：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> hashedPassword;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(<span class="keyword">String</span> username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.username = username;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getHashedPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hashedPassword;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHashedPassword</span><span class="params">(<span class="keyword">String</span> hashedPassword)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hashedPassword = hashedPassword;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"selectUsers"</span> resultMap=<span class="string">"userResultMap"</span>&gt;</span><br><span class="line">  select user_id, user_name, hashed_password</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意返回的类型是一个Map ： userResultMap， 下面我们来定义一个resultMap</span></span><br><span class="line">&lt;resultMap id=<span class="string">"userResultMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">  &lt;id property=<span class="string">"id"</span> column=<span class="string">"user_id"</span> /&gt;</span><br><span class="line">  &lt;result property=<span class="string">"username"</span> column=<span class="string">"user_name"</span>/&gt;</span><br><span class="line">  &lt;result property=<span class="string">"password"</span> column=<span class="string">"hashed_password"</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h5 id="ResultMap-元素内置标签"><a href="#ResultMap-元素内置标签" class="headerlink" title="ResultMap 元素内置标签"></a>ResultMap 元素内置标签</h5><p>1、 constructor - 用于在实例化类时，注入结果到构造方法中</p><p> ① idArg - ID 参数标记出作为ID 的结果可以帮助提高整体性能</p><p> ② arg - 将被注入到构造方法的一个普通结果</p><p> 2、 id - 一个ID结果，标记出作为ID的结果可以帮助提高整体性能</p><p> 3、 result - 注入到字段或javaBean属性的普通结果</p><p> 4、 association - 一个复杂类型的关联；许多结果将包装成这个类型</p><p> 嵌套结果映射 - 集合可以指定为一个resultMap元素，或者引用一个</p><p> 5、 collection - 一个复杂类型的集合</p><p> 嵌套结果映射 - 集合可以指定一个resultMap元素，或者引用一个</p><p> 6、 discriminator - 使用结果值来决定使用那个resultMap</p><p>case - 基于某些值的结果映射</p><p>  嵌套结果映射 - 一个case 也是一个映射它本身的结果，因此可以包含很多相同的元素，或者它可以参照一个外部的resultMap</p><h5 id="ResultMap-元素标签属性"><a href="#ResultMap-元素标签属性" class="headerlink" title="ResultMap 元素标签属性"></a>ResultMap 元素标签属性</h5><p>1、 id - 当前命名空间的一个唯一的标识，用于表示一个result map</p><p>2、 type - 类的完全限定名，或者一个类型别名</p><p>3、 autoMapping - 如果设置这个属性，Mybatis将会为这个ResultMap开启或者关闭自动映射，这个覆盖全局的属性默认值：unset</p><hr><h1 id="博客推荐连接"><a href="#博客推荐连接" class="headerlink" title="博客推荐连接"></a>博客推荐连接</h1><p><a href="https://blog.csdn.net/wfq784967698/article/details/78785398" target="_blank" rel="noopener">MyBatis框架核心之(一)基本使用</a></p><p><a href="https://blog.csdn.net/wfq784967698/article/details/78785458" target="_blank" rel="noopener">MyBatis框架核心之(二)Mapper配置文件使用接口映射</a></p><p><a href="https://blog.csdn.net/wfq784967698/article/details/78785576" target="_blank" rel="noopener">MyBatis框架核心之(三)注解使用接口映射</a></p><p><a href="https://blog.csdn.net/wfq784967698/article/details/78785598" target="_blank" rel="noopener">MyBatis框架核心之(四)Mapper文件使用resultMap及多表查询</a></p><p><a href="https://blog.csdn.net/wfq784967698/article/details/78786001" target="_blank" rel="noopener">MyBatis框架核心之(五)注解使用resultMap及多表查询</a></p><p><a href="https://blog.csdn.net/wfq784967698/article/details/78786021" target="_blank" rel="noopener">MyBatis框架核心之(八)Mybatis一级缓存与二级缓存以及自定义缓存</a></p><p><a href="https://blog.csdn.net/wfq784967698/article/details/78828776" target="_blank" rel="noopener">MyBatis框架核心之(十)Mybatis generator(MBG)代码生成工具</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;MyBatis学习笔记的整理 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="MyBatis" scheme="http://liuyoubin.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/23/backEnd/framework/SpringMvc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/23/backEnd/framework/SpringMvc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-23T11:52:29.000Z</published>
    <updated>2020-01-25T13:21:09.509Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>SpringMvc学习笔记的整理 </p>          </div><a id="more"></a><h1 id="一、-搭建"><a href="#一、-搭建" class="headerlink" title="一、 搭建"></a>一、 搭建</h1><h2 id="1-导入相关jar包"><a href="#1-导入相关jar包" class="headerlink" title="1.导入相关jar包"></a>1.导入相关jar包</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">commons-logging-1</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jstl-1</span><span class="selector-class">.2</span> (1)<span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aop-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-beans-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-core-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-expression-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-web-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-webmvc-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure><h2 id="2-配置web-xml"><a href="#2-配置web-xml" class="headerlink" title="2.配置web.xml"></a>2.配置web.xml</h2><blockquote><p>配置核心分发器</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-添加springmvc的配置文件"><a href="#3-添加springmvc的配置文件" class="headerlink" title="3.添加springmvc的配置文件"></a>3.添加springmvc的配置文件</h2><p>默认在WEB-INF 下添加[DispatcherServlet Name]-servlet.xml文件</p><p>ps：按照上面的配置就应该添加springmvc-servlet.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：也可以通过web.xml的参数配置将springmvc的配置文件和路径指定为其他</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-编写controller的java类"><a href="#4-编写controller的java类" class="headerlink" title="4.编写controller的java类"></a>4.编写controller的java类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//封装数据</span></span><br><span class="line">mv.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>);</span><br><span class="line"><span class="comment">//设置视图名</span></span><br><span class="line">mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-编写springmvc的配置文件"><a href="#5-编写springmvc的配置文件" class="headerlink" title="5.编写springmvc的配置文件"></a>5.编写springmvc的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置handelMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置handelAdapter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span> =<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置渲染器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 结果视图的前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 结果视图的后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置请求和处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、使用注解开发"><a href="#二、使用注解开发" class="headerlink" title="二、使用注解开发"></a>二、使用注解开发</h1><h2 id="1-导入相关jar包-1"><a href="#1-导入相关jar包-1" class="headerlink" title="1.导入相关jar包"></a>1.导入相关jar包</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">commons-logging-1</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jstl-1</span><span class="selector-class">.2</span> (1)<span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-aop-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-beans-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-context-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-core-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-expression-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-web-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">spring-webmvc-4</span><span class="selector-class">.3</span><span class="selector-class">.9</span><span class="selector-class">.RELEASE</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure><h2 id="2-配置web-xml-1"><a href="#2-配置web-xml-1" class="headerlink" title="2.配置web.xml"></a>2.配置web.xml</h2><p><code>配置核心分发器</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-添加springmvc的配置文件-1"><a href="#3-添加springmvc的配置文件-1" class="headerlink" title="3.添加springmvc的配置文件"></a>3.添加springmvc的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-编写controller的java类-1"><a href="#4-编写controller的java类-1" class="headerlink" title="4.编写controller的java类"></a>4.编写controller的java类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.stereotype.Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//封装数据</span></span><br><span class="line">mv.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>);</span><br><span class="line"><span class="comment">//设置视图名</span></span><br><span class="line">mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-编写springmvc的配置文件"><a href="#4-编写springmvc的配置文件" class="headerlink" title="4.编写springmvc的配置文件"></a>4.编写springmvc的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置渲染器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 结果视图的前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 结果视图的后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三、Controller相关配置"><a href="#三、Controller相关配置" class="headerlink" title="三、Controller相关配置"></a>三、Controller相关配置</h1><h2 id="1-通过url对应bean"><a href="#1-通过url对应bean" class="headerlink" title="1. 通过url对应bean"></a>1. 通过url对应bean</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置handelMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置请求和处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置会通过/hello.do去寻找匹配id为hello.do的bean，这种配置适用于小型系统</p><h2 id="2-为url分配bean"><a href="#2-为url分配bean" class="headerlink" title="2. 为url分配bean"></a>2. 为url分配bean</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- key为请求url value为对应处理器的id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/hello.do"</span>&gt;</span>HelloController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"HelloController"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>此配置还可以使用通配符，访问/hello.do时spring会把请求交给id为HelloController的bean处理</p><h2 id="3-url匹配bean-了解"><a href="#3-url匹配bean-了解" class="headerlink" title="3. url匹配bean(了解)"></a>3. url匹配bean(了解)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 请求为hello*.do都将被匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloController"</span> <span class="attr">class</span>=<span class="string">"com.lyb.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-注解"><a href="#4-注解" class="headerlink" title="4. 注解"></a>4. 注解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="四-、结果跳转的方式"><a href="#四-、结果跳转的方式" class="headerlink" title="四 、结果跳转的方式"></a>四 、结果跳转的方式</h1><ol><li>设置ModelAndView对象根据视图解析器的前缀+view name+后缀跳转到指定的页面</li></ol><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      ModelAndView <span class="keyword">mv</span> = <span class="keyword">new</span> ModelAndView()<span class="comment">;</span></span><br><span class="line"><span class="comment">//封装数据</span></span><br><span class="line"><span class="keyword">mv</span>.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>)<span class="comment">;</span></span><br><span class="line"><span class="comment">//设置视图名</span></span><br><span class="line"><span class="keyword">mv</span>.setViewName(<span class="string">"hello"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过servlet Api来实现跳转(不需要视图解析器)</li></ol><ul><li>通过HttpServletResponse的输出流</li><li>通过HttpServletResponse的重定向</li><li>通过HttpServletRequse实现请求转发</li></ul><ol start="3"><li>通过spring mvc来实现请求转发和重定向(没有视图解析器)</li></ol><ul><li>转发的实现 1</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转发的实现 2</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重定向的实现</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过spring mvc来实现请求转发和重定向(使用视图解析器)</li></ol><ul><li>转发的实现</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：重定向不需要视图解析器</p></blockquote><h1 id="五-、数据的处理"><a href="#五-、数据的处理" class="headerlink" title="五 、数据的处理"></a>五 、数据的处理</h1><h2 id="1-提交数据的处理"><a href="#1-提交数据的处理" class="headerlink" title="1.提交数据的处理"></a>1.提交数据的处理</h2><ul><li>提交的域名称与方法参数名称一样</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/springMvc/hello.<span class="keyword">do</span>?<span class="type">name</span>=lyb</span><br><span class="line"></span><br><span class="line">@RequesMapping("/hello")</span><br><span class="line"><span class="built_in">public</span> String hello(String <span class="type">name</span>)&#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span>);</span><br><span class="line">    <span class="keyword">return</span> "index.jsp";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提交的域名称与方法参数名称不一样</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/springMvc/hello.<span class="keyword">do</span>?uname=lyb</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequesMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String hello(<span class="meta">@RequesParam(<span class="meta-string">"uname"</span>)</span>String name)&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果提交的是一个对象，要求表单属性名与对象参数名一致，方法参数用对象名</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    privaye <span class="keyword">String</span> pwd;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/springMvc/<span class="keyword">login</span>.<span class="keyword">do</span>?<span class="type">name</span>=lyb&amp;pwd=<span class="number">0328</span></span><br><span class="line"></span><br><span class="line">@RequesMapping("/login")</span><br><span class="line"><span class="built_in">public</span> String <span class="keyword">login</span>(<span class="keyword">User</span> <span class="keyword">user</span>)&#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">    <span class="keyword">return</span> "index.jsp";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-将数据提交到UI层"><a href="#2-将数据提交到UI层" class="headerlink" title="2.将数据提交到UI层"></a>2.将数据提交到UI层</h2><ul><li>1.通过ModelAndView—需要视图解析器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//封装数据</span></span><br><span class="line"><span class="comment">//相当于req.setAttribute("msg", "hello springmvc");</span></span><br><span class="line">mv.addObject(<span class="string">"msg"</span>, <span class="string">"hello springmvc"</span>);</span><br><span class="line"><span class="comment">//设置视图名</span></span><br><span class="line">mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.通过ModelMap—不需要视图解析器(ModelMap需要作为方法参数)</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span>&#123;</span></span><br><span class="line"></span><br><span class="line">@RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">hello</span><span class="params">(<span class="keyword">String</span> name,ModelMap model)</span> throws Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装数据</span></span><br><span class="line">model.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、-乱码的解决和Restful"><a href="#六、-乱码的解决和Restful" class="headerlink" title="六、 乱码的解决和Restful"></a>六、 乱码的解决和Restful</h1><h2 id="1-乱码的解决"><a href="#1-乱码的解决" class="headerlink" title="1.  乱码的解决"></a>1.  乱码的解决</h2><p>通过过滤器来解决<code>post提交方式</code>产生的乱码，springMvc提供了<code>CharacterEncodingFilter</code>来解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*配置在web.xml里面，要在servlet之前配置*/</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span></span></span><br></pre></td></tr></table></figure><p>get方式通过自定义过滤器解决</p><h2 id="2-Restful风格url"><a href="#2-Restful风格url" class="headerlink" title="2. Restful风格url"></a>2. Restful风格url</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://localhost:8080/springMvc/lyb/123/delete.do</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/&#123;name&#125;/&#123;id&#125;/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String name ,@PathVariable <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index.jsp"</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七-、文件上传"><a href="#七-、文件上传" class="headerlink" title="七 、文件上传"></a>七 、文件上传</h1><h2 id="1-导入相关jar包-2"><a href="#1-导入相关jar包-2" class="headerlink" title="1 .导入相关jar包"></a>1 .导入相关jar包</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*struts2的jar包*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">commons-fileupload-1</span><span class="selector-class">.4</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">commons-io-2</span><span class="selector-class">.6</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure><h2 id="2-在springMvc里配置解析器"><a href="#2-在springMvc里配置解析器" class="headerlink" title="2. 在springMvc里配置解析器"></a>2. 在springMvc里配置解析器</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"multipartResolver"</span> <span class="built_in">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;   </span><br><span class="line">      &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"maxUploadSize"</span> value =<span class="string">"10485760000"</span>&gt;&lt;/<span class="keyword">property</span>&gt; </span><br><span class="line">      &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"maxInMemorySize"</span> value =<span class="string">"40960"</span>&gt;&lt;/<span class="keyword">property</span>&gt; </span><br><span class="line">      &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"defaultEncoding"</span> value=<span class="string">"utf-8"</span>&gt;&lt;/<span class="keyword">property</span>&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="3-编写controller代码"><a href="#3-编写controller代码" class="headerlink" title="3. 编写controller代码"></a>3. 编写controller代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> &#123;</span></span><br><span class="line">@RequestMapping(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)CommonsMultipartFile file,HttpServletRequest req)</span> throws IOException</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件名</span></span><br><span class="line"><span class="keyword">String</span> fileName = file.getOriginalFilename();</span><br><span class="line"><span class="comment">//获取上传路径</span></span><br><span class="line"><span class="keyword">String</span> path = req.getRealPath(<span class="string">"/fileUpload"</span>);</span><br><span class="line"><span class="comment">//获取文件输入流</span></span><br><span class="line">BufferedInputStream bis =null;</span><br><span class="line"><span class="comment">//上传文件路径流</span></span><br><span class="line">BufferedOutputStream bos = null; </span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bis = <span class="keyword">new</span> BufferedInputStream(file.getInputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> <span class="built_in">File</span>(path,fileName)));</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((len=bis.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>) &#123;</span><br><span class="line">bos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, len);</span><br><span class="line">bos.<span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line">bis.<span class="built_in">close</span>();</span><br><span class="line">bos.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-编写上传页面"><a href="#4-编写上传页面" class="headerlink" title="4. 编写上传页面"></a>4. 编写上传页面</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action="upload.do" <span class="keyword">method</span>="post" enctype="multipart/form-data"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="file"/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="上传"/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h1 id="八-、ajax-和-json的处理"><a href="#八-、ajax-和-json的处理" class="headerlink" title="八 、ajax 和 json的处理"></a>八 、ajax 和 json的处理</h1><h2 id="1-用HttpServletResponse处理ajax请求"><a href="#1-用HttpServletResponse处理ajax请求" class="headerlink" title="1 .用HttpServletResponse处理ajax请求"></a>1 .用HttpServletResponse处理ajax请求</h2><p>jsp页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#but"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$.post(<span class="string">"ajax.do"</span>,&#123;<span class="string">'name'</span>:$(<span class="string">"#tx"</span>).val()&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">alert(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"tx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> <span class="attr">id</span>=<span class="string">"but"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> &#123;</span></span><br><span class="line">@RequestMapping(<span class="string">"/ajax"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ajax</span><span class="params">(<span class="keyword">String</span> name,HttpServletResponse resp)</span> throws IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">"lyb"</span>))&#123;</span><br><span class="line">resp.getWriter().<span class="built_in">println</span>(<span class="string">"true"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">resp.getWriter().<span class="built_in">println</span>(<span class="string">"false"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-springMvc处理json"><a href="#2-springMvc处理json" class="headerlink" title="2. springMvc处理json"></a>2. springMvc处理json</h2><ol><li><p>导入jackson jar包</p><p>导入jackson jar包</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">jackson-annotations-2</span><span class="selector-class">.9</span><span class="selector-class">.8</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jackson-core-2</span><span class="selector-class">.9</span><span class="selector-class">.8</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">jackson-databind-2</span><span class="selector-class">.9</span><span class="selector-class">.8</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置json转换器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于将对象转成json--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stringConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jsonConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>controller代码</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> JsonController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping("/json")</span><br><span class="line">@ResponseBody <span class="comment">------------------注意加上这个注解，代表返回一个实体对象</span></span><br><span class="line"><span class="built_in">public</span> List&lt;<span class="keyword">User</span>&gt; <span class="type">json</span>()&#123;</span><br><span class="line"></span><br><span class="line">List&lt;<span class="keyword">User</span>&gt; list = <span class="built_in">new</span> ArrayList&lt;<span class="keyword">User</span>&gt;();</span><br><span class="line">list.<span class="keyword">add</span>(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">1</span>,"lyb","123"));</span><br><span class="line">list.<span class="keyword">add</span>(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">2</span>,"mike","456"));</span><br><span class="line">list.<span class="keyword">add</span>(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">3</span>,"nick","789"));</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>jsp页面代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#but"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$.post(<span class="string">"json.do"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> con = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">con+="<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].id+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].name+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+data[i].pwd+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>"</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">$(<span class="string">"#context"</span>).html(con);</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"but"</span> <span class="attr">value</span>=<span class="string">"获取名单"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"context"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-HttpMessageConverter原理"><a href="#3-HttpMessageConverter原理" class="headerlink" title="3. HttpMessageConverter原理"></a>3. HttpMessageConverter原理</h2><p>HttpMessageConverter是spring 3.0新增加的一个接口，负责将请求转换成一个对象（类型为T）,将对象(类型为T)转换成一个响应消息</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">S<span class="function"><span class="title">pringMvc</span>--java对象--&gt;</span>HttpMessageConverter</span><br><span class="line">H<span class="function"><span class="title">ttpMessageConverter</span>--&gt;</span>HttpOutputMessage</span><br><span class="line">H<span class="function"><span class="title">ttpOutputMessage</span>--&gt;</span>响应报文</span><br><span class="line">请求报文--&gt;HttpInputMessage</span><br><span class="line">H<span class="function"><span class="title">ttpInputMessage</span>--&gt;</span>HttpMessageConverter</span><br><span class="line">H<span class="function"><span class="title">ttpMessageConverter</span>--java对象--&gt;</span>SpringMvc</span><br></pre></td></tr></table></figure><p>为了达到转换的效果，Spring提供了两种途径</p><ul><li>使用@RequestBody/@ResponseBody对目标方法进行标注</li><li>使用HttpEntity<T>/ResponseEntity<T>作为入参或者返回值</li></ul><p>Spring会根据请求头或者响应头的Accpet属性进行匹配HttpMessageConverter，进而根据参数的类型或者泛型的类型过滤得到匹配的HttpMessageConverter，若找不到将报错</p><p>下面是使用ResponseEntity<T>来做文件下载的例子：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@RequestMapping</span>(<span class="string">"/getFile"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; getFile(HttpSession session) throws IOException&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ServletContext context = session.getServletContext();</span><br><span class="line">InputStream <span class="keyword">is</span> = context.getResourceAsStream(<span class="string">"/file/abc.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] <span class="keyword">body</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">is</span>.available()];</span><br><span class="line"><span class="keyword">is</span>.read(<span class="keyword">body</span>);</span><br><span class="line"></span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">headers.add(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=abc.txt"</span>);</span><br><span class="line"></span><br><span class="line">HttpStatus status =  HttpStatus.OK;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; response = <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">body</span>, headers, status);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、拦截器"><a href="#九、拦截器" class="headerlink" title="九、拦截器"></a>九、拦截器</h1><h2 id="1-实现拦截器"><a href="#1-实现拦截器" class="headerlink" title="1. 实现拦截器"></a>1. 实现拦截器</h2><ol><li>实现HandlerInterceptor接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在请求处理器处理之前执行</span></span><br><span class="line"><span class="comment">//当返回false则不会执行下一个interceptor ,反之执行下一个interceptor</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请求处理之前"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在请求处理器处理之后执行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请求处理之后"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在DispatchServlet处理之后执行 -------清理工作</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在springmvc配置文件里配置拦截器</li></ol><blockquote><p>ps:要添加mvc头文件</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"</span></span><br><span class="line">        http:<span class="comment">//www.springframework.org/schema/mvc</span></span><br><span class="line">        http:<span class="comment">//www.springframework.org/schema/mvc/spring-mvc.xsd"</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">/** 代表路径及其子路径</span></span><br><span class="line"><span class="comment">/admin/* 代表拦截/admin/a  /admin/b.....</span></span><br><span class="line"><span class="comment">/admin/** 代表拦截/admin/a  /admin/a/b/c....</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lyb.interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-如果被拦截要指定页面"><a href="#2-如果被拦截要指定页面" class="headerlink" title="2. 如果被拦截要指定页面"></a>2. 如果被拦截要指定页面</h2><p>可以使用HttpServletRequest和HttpServletResponse实现转发或者重定向</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在请求处理器处理之前执行</span></span><br><span class="line"><span class="comment">//当返回false则不会执行下一个interceptor ,反之执行下一个interceptor</span></span><br><span class="line">@Override</span><br><span class="line">public boolean pre<span class="constructor">Handle(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>, Object <span class="params">arg2</span>)</span> throws Exception &#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请求处理之前"</span>);</span><br><span class="line">resp.send<span class="constructor">Redirect(<span class="params">req</span>.<span class="params">getContextPath</span>()</span>+<span class="string">"/index.jsp"</span>);</span><br><span class="line">return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十-整合-Spring、SpringMvc、MyBatis"><a href="#十-整合-Spring、SpringMvc、MyBatis" class="headerlink" title="十 整合 Spring、SpringMvc、MyBatis"></a>十 整合 Spring、SpringMvc、MyBatis</h1><ol><li><p>导入相关依赖</p></li><li><p>编写配置文件</p></li></ol><ul><li>web.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring_SpringMvc_MyBatis<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- springMvc配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>mvc.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描包下的注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>applicationContext.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置dataSource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.cfg.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 声明式事务 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将事务通知切入方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution (* com.lyb.service.iml.*.* (..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lyb"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>mybatis.cfg.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  </span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  </span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.lyb.vo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 填写mapper文件的所在位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/lyb/vo/user.mapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>具体代码</li></ol><ul><li>实体类</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.lyb.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapper文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  </span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lyb.vo.user.mapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>dao层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span>  <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> getSqlSession().selectList(<span class="string">"com.lyb.vo.user.mapper.list"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userdao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserdao</span><span class="params">(UserDao userdao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userdao = userdao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> userdao.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> &#123;</span></span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">list</span><span class="params">(ModelMap <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; <span class="built_in">list</span> = userService.<span class="built_in">list</span>();</span><br><span class="line"><span class="built_in">map</span>.addAttribute(<span class="string">"user"</span>, <span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jsp页面</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="utf-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user &#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"bean"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;bean.id &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;bean.name &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;bean.pwd &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>项目结构</li></ul><p><img src="https://s2.ax1x.com/2020/01/23/1Vy8y9.png" alt="image"></p><h1 id="十一、-异常处理"><a href="#十一、-异常处理" class="headerlink" title="十一、 异常处理"></a>十一、 异常处理</h1><ol><li>springMvc 是使用<code>HandlerExceptionResolver</code>接口来处理异常</li></ol><hr><ol start="2"><li>springMvc 是如何装配异常？</li></ol><ul><li>DispatcherServlet默认装配HandlerExceptionResolver</li></ul><p>1) 没有使用&lt;mvc:annotation-driven /&gt;配置 会装配以下实现类</p><ul><li>AnnotationMethodHandlerExceptionResolver(过期)</li><li>ResponseStatusExceptionResolver</li><li>DefaultHandlerExceptionResolver</li></ul><p>2) 使用&lt;mvc:annotation-driven /&gt;配置【推荐】 会装配以下实现类</p><ul><li><p>HandlerExceptionResolverComposite</p></li><li><p>ResponseStatusExceptionResolver</p></li><li><p>DefaultHandlerExceptionResolver</p></li></ul><hr><ol start="3"><li>通过注解实现异常处理</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 @ExceptionHandler 在方法参数中可以加入Exception类型参数 及对应的异常对象</span></span><br><span class="line"><span class="comment"> * 2 在方法入参中不能使用map 、 ModelMap做为参数. 如果要返回异常对象到页面可以使用ModelAndView</span></span><br><span class="line"><span class="comment"> * 3 @ExceptionHandler 处理异常有优先级的问题，会优先匹配离所抛异常近的处理方法</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="constructor">ExceptionHandler(&#123;ArithmeticException.<span class="params">class</span>&#125;)</span></span><br><span class="line">public ModelAndView <span class="keyword">exception</span><span class="constructor">Deal(Exception <span class="params">e</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"出异常了"</span>+e.get<span class="constructor">Message()</span>);</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line"></span><br><span class="line">mv.add<span class="constructor">Object(<span class="string">"exception"</span>, <span class="params">e</span>)</span>;</span><br><span class="line">mv.set<span class="constructor">ViewName(<span class="string">"error"</span>)</span>;</span><br><span class="line">return mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span></span><br><span class="line">public String test<span class="constructor">Exception(<span class="params">int</span> <span class="params">num</span>,ModelMap <span class="params">map</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">map.add<span class="constructor">Attribute(<span class="string">"res"</span>, 10<span class="operator">/</span><span class="params">num</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"result:"</span>+<span class="number">10</span>/num);</span><br><span class="line"></span><br><span class="line">return <span class="string">"forward:/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上异常处理方法只能与抛异常的方法处于同一个类，那么如何实现全局的异常处理呢?</p><p>实现全局异常处理</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*创建一个类使用@ControllerAdvice注解即可 实现全局异常处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@ControllerAdvice</span><br><span class="line">public <span class="keyword">class</span> TestExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">ExceptionHandler(&#123;ArithmeticException.<span class="params">class</span>&#125;)</span></span><br><span class="line">public ModelAndView <span class="keyword">exception</span><span class="constructor">Deal(Exception <span class="params">e</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"出异常了"</span>+e.get<span class="constructor">Message()</span>);</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line"></span><br><span class="line">mv.add<span class="constructor">Object(<span class="string">"exception"</span>, <span class="params">e</span>)</span>;</span><br><span class="line">mv.set<span class="constructor">ViewName(<span class="string">"error"</span>)</span>;</span><br><span class="line">return mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="4"><li>@ResponseStatus的使用</li></ol><ul><li>注解到类上面 </li></ul><p>这个注解可以用来定制异常的相应状态码和响应消息,当抛出下面这个异常时会携带响应的状态码(403)和响应消(用户名和密码不匹配)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(value=<span class="type">HttpStatus</span>.<span class="type">FORBIDDEN</span>,reason=<span class="string">"用户名和密码不匹配"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserNameNotMatchPwdException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解到方法上面 </li></ul><p>注解到方法上和注解到类上面的使用方式是一样的</p><ol start="5"><li>SimpleMappingExceptionResolver的使用</li></ol><p>使用SimpleMappingExceptionResolver来实现出现异常时页面的跳转</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mvc配置文件</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SimpleMappingExceptionResolver来映射异常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置异常对象名 可以用于页面el表达式的获取 ，默认值：exception --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionAttribute"</span> <span class="attr">value</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置具体异常映射页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.ArrayIndexOutOfBoundsException"</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十二、-springMvc的运行流程"><a href="#十二、-springMvc的运行流程" class="headerlink" title="十二、 springMvc的运行流程"></a>十二、 springMvc的运行流程</h1><p><img src="https://s2.ax1x.com/2020/01/23/1V27gU.png" alt=""></p><h1 id="十三、对REST风格的支持"><a href="#十三、对REST风格的支持" class="headerlink" title="十三、对REST风格的支持"></a>十三、对REST风格的支持</h1><ul><li>HiddenHttpMethodFilter</li></ul><p>浏览器的form表单只支持get、post请求。而delete、put等method不支持。Spring3.0添加了一个过滤器，可以将这些请求转换为标准的http方法。</p><hr><p>使用HiddenHttpMethodFilter过滤器转换请求格式</p><ol><li>在web.xml文件里配置过滤器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  配置org.springframework.web.filter.HiddenHttpMethodFilter </span></span><br><span class="line"><span class="comment">  作用：可以将post请求转换为delete、put方式请求</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>学习表单的写法</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="comment">-- </span></span><br><span class="line">将post请求转为put请求</span><br><span class="line"><span class="number">1</span> 表单请求方法设置为post</span><br><span class="line"><span class="number">2</span> 设置隐藏域  <span class="type">name</span>="_method" <span class="keyword">value</span>="PUT"</span><br><span class="line"> <span class="comment">--&gt;</span></span><br><span class="line">&lt;form action="test/1" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="hidden" <span class="type">name</span>="_method" <span class="keyword">value</span>="PUT"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试put方法" /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- </span></span><br><span class="line">将post请求转为<span class="keyword">delete</span>请求</span><br><span class="line"><span class="number">1</span> 表单请求方法设置为post</span><br><span class="line"><span class="number">2</span> 设置隐藏域  <span class="type">name</span>="_method" <span class="keyword">value</span>="DELETE"</span><br><span class="line"> <span class="comment">--&gt;</span></span><br><span class="line">&lt;form action="test/1" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="hidden" <span class="type">name</span>="_method" <span class="keyword">value</span>="DELETE"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试delete方法" /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action="test" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试post方法" /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action="test/1" <span class="keyword">method</span>="get"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="测试put方法" /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><hr><p>REST风格与传统风格对比</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      REST                 传统</span><br><span class="line">新增 <span class="built_in">/user </span>   POST       /user</span><br><span class="line">删除 /user/1  DELETE     /delete?<span class="attribute">id</span>=1</span><br><span class="line">修改 /user/1  PUT        /update?<span class="attribute">id</span>=1</span><br><span class="line">查询 /user/1  <span class="builtin-name">GET</span>        /select?<span class="attribute">id</span>=1</span><br></pre></td></tr></table></figure><p>使用REST风格后对应的业务用表单提交方式区分，springMvc使用@RequestMapping(RequsetMethod=””)进行区分处理</p><h1 id="十四、常用注解"><a href="#十四、常用注解" class="headerlink" title="十四、常用注解"></a>十四、常用注解</h1><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@RequestParam</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>作用：绑定参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>1 value:      设置参数名对应表单上传的属性名，没有设置的或表单属性名需要与方法参数名相同</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>2 required：  设置参数是否必须存在，默认为true</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>3 defaultValue： 设置默认值，可以解决基本数据类型的传参不存在问题</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line">public <span class="built_in">String</span> testParam(</span><br><span class="line">    <span class="meta">@RequestParam</span>(value=<span class="string">"id"</span>,required=<span class="keyword">false</span>,defaultValue=<span class="string">"0"</span>) <span class="built_in">int</span> id) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">    * </span>@RequestHeader</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>作用：绑定请求头参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>用法：同requestParam用法一致</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param lang</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">public <span class="built_in">String</span> testHeader(<span class="meta">@RequestHeader</span>(value=<span class="string">"Accept-Language"</span>) <span class="built_in">String</span> lang) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@CookieValue</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>作用：获取指定的cookie值</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>用法：同requestParam用法一致</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param lang</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code"> */</span></span></span></span><br><span class="line">public <span class="built_in">String</span> testCookie(<span class="meta">@CookieValue</span>(<span class="string">"JSESSIONID"</span>) <span class="built_in">String</span> lang) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@SessionAttributes</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>作用:将指定的数据存放在Session域里(注意：也会同时存放在request域里),便于多个请求共享参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>1 value: 指定属性名</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>2 type:  指定属性的类型</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@author liuyoubin</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value= &#123;<span class="string">"name"</span>&#125;,types= &#123;<span class="built_in">String</span><span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Controller</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">public <span class="built_in">String</span> handleRequest(<span class="built_in">String</span> name,ModelMap model) throws Exception &#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ModelAtrribute"><a href="#ModelAtrribute" class="headerlink" title="@ModelAtrribute"></a>@ModelAtrribute</h2><p> 方法POJO参数获取的实现流程</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>被@ModelAttribute标记的方法，会在在每个目标方法执行之前被SpringMvc调用</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param id</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param map</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line">public <span class="keyword">void</span> getUser(<span class="meta">@RequestParam</span>(value=<span class="string">"id"</span>,required=<span class="keyword">false</span>) Integer id,</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; map) &#123;</span><br><span class="line">System.err.println(<span class="string">"getUser 方法被调用"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟数据库查询</span></span><br><span class="line"><span class="keyword">if</span>(id!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"用户查询"</span>);</span><br><span class="line">User user = <span class="keyword">new</span> User(id, <span class="string">"lyb"</span>, <span class="string">"0328"</span>);</span><br><span class="line">map.put(<span class="string">"user"</span>, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>运行流程</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>1 执行@ModelAttribute标记的方法，从数据库中取出对象，把对象放到Map中 键为 user</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>2 SpringMvc 从Map 中取出User对象，接收从表单提交过来的数据，并把表单数据赋给User对象的对应属性</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>3 SpringMvc 把User对象传到目标方法参数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>注意：@ModelAttribute标记的方法中，对象放到Map时键名必须时目标方法类型第一个字母小写一致。 例如：User-&gt;user</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>源码分析流程</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>1 调用@ModelAttribute注解修饰的方法，实际上是把@ModelAttribute方法中Map中的数据放到implicitModel中</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>2 解析请求处理器的目标参数，实际上该目标参数来源于WebDataBinder对象的target属性</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>1) 创建WebDataBinder对象</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>① 确定objectName属性 ：</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&gt;若传入的attrName 为空串，则为类名第一个字母小写。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&gt;若目标方法的POJO属性使用了@ModelAttribute来修饰，则attrName为该注解的value值</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>② 确定target属性：</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&gt;在implicitModel中查找attrName对应的属性值，若存在，则ok</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&gt;若不存在则验证当前的controller类是否使用了@SessionAttributes修饰，</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>如果是则尝试从Session中获取attrName对应的属性值。 如果获取不到则会抛出异常</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&gt;如果controller类没有使用@SessionAttributes修饰 或者 @SessionAttributes 没有使用value值指定的键和attrName匹配</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>则通过反射创建了POJO对象</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>2) SpringMvc把表单的请求参数赋给 WebDataBinder对象的target对应的属性</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>3) SpringMvc会把WebDataBinder的 sttrName 和 target 给到 implicitModel 。进而传到request域中</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>4) 把WebDataBinder 的target作为参数传递给目标方法入参</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param user</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updataUser"</span>)</span><br><span class="line">public <span class="built_in">String</span> upddataUser(User user) &#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &lt;form action="updataUser.do" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">id: &lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="id" <span class="keyword">value</span>="2"/&gt;</span><br><span class="line">用户名：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="name" <span class="keyword">value</span>="ss"/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h2><p>由@InitBinder标识的方法，可以对WebDataBinder对象进行初始化。WebDataBinder是DataBinder的子类，用于完成表单字段到javaBean属性的绑定</p><ul><li>@InitBinder方法不能有返回值，必须声明为void</li><li>@InitBinder方法的参数通常是WebDataBinder</li></ul><h2 id="DateTimeFormat-pattern-””"><a href="#DateTimeFormat-pattern-””" class="headerlink" title="@DateTimeFormat(pattern=””)"></a>@DateTimeFormat(pattern=””)</h2><p>将注解到Date属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为birth的字符串按照yyyy-MM-dd的格式转换为Date类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @<span class="constructor">DateTimeFormat(<span class="params">pattern</span>=<span class="string">"yyyy-MM-dd"</span>)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure><h2 id="NumberFormat-pattern-””"><a href="#NumberFormat-pattern-””" class="headerlink" title="@NumberFormat(pattern=””)"></a>@NumberFormat(pattern=””)</h2><p>将注解到Number子类属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为salary的字符串按照#,###,###.#的格式转换为float类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@<span class="constructor">NumberFormat(<span class="params">pattern</span>=<span class="string">"#,###,###.#"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> salary;</span><br></pre></td></tr></table></figure><h1 id="十五-视图"><a href="#十五-视图" class="headerlink" title="十五 视图"></a>十五 视图</h1><p><img src="https://s2.ax1x.com/2020/01/23/1VhGad.png" alt="image"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.ax1x.com/2020/01/23/1VhtPI.png" alt="image"></h2><h4 id="InternalResourceViewResolver"><a href="#InternalResourceViewResolver" class="headerlink" title="InternalResourceViewResolver"></a>InternalResourceViewResolver</h4><ul><li>如果项目中使用了JSTL，则SpringMvc会自动把InternalResourceView转为JstlView</li><li>若使用了JSTL中的fmt标签则需要在SpringMvc的配置文件中配置==国际化资源文件==<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 国际化资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>例子<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">fmt:message</span> <span class="attr">key</span>=<span class="string">"i18n.username"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">fmt:message</span> <span class="attr">key</span>=<span class="string">"i18n.password"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>springMvc会去src下找[i18n+对应的语言缩写.porperties]文件<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[i18n_zh_CN.properties]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">i18n.username</span>=\u7528\u6237\u540D</span><br><span class="line"><span class="attr">i18n.password</span>=\u5BC6\u7801</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="mvc-view-controller标签"><a href="#mvc-view-controller标签" class="headerlink" title="mvc_view_controller标签"></a>mvc_view_controller标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置直接转发的页面，不需要经过具体的handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/success"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在实际开发中要配置以下标签使用，否则注解mapping映射会失败--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十六、-form表单"><a href="#十六、-form表单" class="headerlink" title="十六、 form表单"></a>十六、 form表单</h1><p>可以使用SpringMvc提供的form表单进行表单页面的快速开发</p><ul><li>引入资源文件<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>注意form表单需要handler提供一个bean模型用于存放表单属性<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value=<span class="string">"/emp"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">inputPage</span><span class="params">(Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"departments"</span>, departmentDao.getAllDepartments());</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"employee"</span>, <span class="keyword">new</span> Employee()); <span class="comment">//提供表单bean模型</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"input"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">1.使用form标签可以进行表单的快速开发</span></span><br><span class="line"><span class="xml">    2. 注意：可以通过modelAttribute属性指定模型属性</span></span><br><span class="line"><span class="xml">         如果没有指定属性，则默认从request对象中读取command的表单bean</span></span><br><span class="line"><span class="xml">         如果再没有的话，则会发生错误</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form:form</span> <span class="attr">action</span>=<span class="string">"emp"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">modelAttribute</span>=<span class="string">"employee"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- path属性对应html标签的name属性 --&gt;</span></span></span><br><span class="line"><span class="xml">用户名：<span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"lastName"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span></span><br><span class="line"><span class="xml">email:<span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"email"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript">HashMap&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span></span><br><span class="line"><span class="vbscript">map.put(<span class="string">"男"</span>, <span class="string">"男"</span>);</span></span><br><span class="line"><span class="vbscript">map.put(<span class="string">"女"</span>, <span class="string">"女"</span>);</span></span><br><span class="line"><span class="vbscript"><span class="built_in">request</span>.setAttribute(<span class="string">"map"</span>, map);</span></span><br><span class="line"><span class="vbscript">%&gt;</span></span><br><span class="line"><span class="xml">性别：<span class="tag">&lt;<span class="name">form:radiobuttons</span> <span class="attr">path</span>=<span class="string">"gener"</span> <span class="attr">items</span>=<span class="string">"$&#123;map &#125;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">部门：<span class="tag">&lt;<span class="name">form:select</span> <span class="attr">path</span>=<span class="string">"department.id"</span> <span class="attr">items</span>=<span class="string">"$&#123;departments &#125;"</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">itemLabel="departmentName" itemValue="id"&gt;<span class="tag">&lt;/<span class="name">form:select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"添加"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h1 id="十七、-类型转换器"><a href="#十七、-类型转换器" class="headerlink" title="十七、 类型转换器"></a>十七、 类型转换器</h1><h2 id="ConversionSerivce"><a href="#ConversionSerivce" class="headerlink" title="ConversionSerivce"></a>ConversionSerivce</h2><ul><li><h4 id="ConversionService是Spring类型转换体系的核心接口"><a href="#ConversionService是Spring类型转换体系的核心接口" class="headerlink" title="ConversionService是Spring类型转换体系的核心接口"></a>ConversionService是Spring类型转换体系的核心接口</h4></li><li><h4 id="可以利用ConversionServiceFeactoryBean在Spring-Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换"><a href="#可以利用ConversionServiceFeactoryBean在Spring-Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换" class="headerlink" title="可以利用ConversionServiceFeactoryBean在Spring Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换"></a>可以利用ConversionServiceFeactoryBean在Spring Ioc容器中定义一个CoversionService。Spring将自动识别出ConversionService并在Bean属性配置以及SpringMvc处理方法入参时绑定等场合进行数据类型的转换</h4></li><li><h4 id="可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器"><a href="#可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器" class="headerlink" title="可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器"></a>可以通过ConversionserviceFactoryBean的converters属性注册自定义的类型转换器</h4></li></ul><h2 id="Spring支持的转换器"><a href="#Spring支持的转换器" class="headerlink" title="Spring支持的转换器"></a>Spring支持的转换器</h2><ul><li>Spring定义了三种类型的转换器接口，实现任意一种都可以作为自定义转换器注册到CoversionServiceFactoryBean<ul><li>Converter&lt;S,T&gt; :将S类型转换为T类型</li><li>CoverterFactory ：将相同系列的多个同质封装在一起。如果希望将一种类型转换为另一种类型及其子类</li><li>GenericConverter：会根据源类对象及目标对象所在宿主类中的上下文信息进行类型转换</li></ul></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   &lt;mvc:annotation-driven <span class="keyword">conversion</span>-service="conversionService"/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id="conversionService" <span class="keyword">class</span>="org.springframework.format.support.FormattingConversionServiceFactoryBean"&gt;</span><br><span class="line">&lt;property <span class="type">name</span>="converters"&gt;</span><br><span class="line">&lt;<span class="keyword">set</span>&gt;</span><br><span class="line">&lt;<span class="keyword">ref</span> bean=""/&gt;//此处是填写自定义的类型转换器，类型转换器的bean必须交给spring ioc容器进行管理</span><br><span class="line">&lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="类型转换出错的处理"><a href="#类型转换出错的处理" class="headerlink" title="类型转换出错的处理"></a>类型转换出错的处理</h2><p>类型转换出错会将错误信息放在一个BindingResult的实例中，可以在handler处理方法中传入一个这样的参数进行处理</p><ul><li>@DateTimeFormat(pattern=””)</li></ul><p>将注解到Date属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为birth的字符串按照yyyy-MM-dd的格式转换为Date类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @<span class="constructor">DateTimeFormat(<span class="params">pattern</span>=<span class="string">"yyyy-MM-dd"</span>)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure><ul><li>@NumberFormat(pattern=””)</li></ul><p>将注解到Number子类属性上，在进行参数绑定的时候会自动进行转换(前提：配置<a href="mvc:anncation-driven">mvc:anncation-driven</a>)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *将表单属性名为salary的字符串按照#,###,###.#的格式转换为float类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@<span class="constructor">NumberFormat(<span class="params">pattern</span>=<span class="string">"#,###,###.#"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> salary;</span><br></pre></td></tr></table></figure><h1 id="十八、-数据校验-JSR-303"><a href="#十八、-数据校验-JSR-303" class="headerlink" title="十八、 数据校验(JSR 303)"></a>十八、 数据校验(JSR 303)</h1><h2 id="如何进行数据校验？"><a href="#如何进行数据校验？" class="headerlink" title="如何进行数据校验？"></a>如何进行数据校验？</h2><ul><li>使用注解进行校验</li></ul><h2 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR 303"></a>JSR 303</h2><ul><li><h4 id="JSR-303是java为Bean数据合法性校验提供的标准框架，包含在java-EE-6-0中"><a href="#JSR-303是java为Bean数据合法性校验提供的标准框架，包含在java-EE-6-0中" class="headerlink" title="JSR 303是java为Bean数据合法性校验提供的标准框架，包含在java EE 6.0中"></a>JSR 303是java为Bean数据合法性校验提供的标准框架，包含在java EE 6.0中</h4></li><li><h4 id="JSR-303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证"><a href="#JSR-303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证" class="headerlink" title="JSR 303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证"></a>JSR 303通过在Bean属性上标注规定的注解指定校验规则，并通过验证接口对Bean进行验证</h4></li></ul><table><thead><tr><th>注解</th><th>功能说明</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为null</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为true</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为false</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max,min)</td><td>被注释的元素大小必须在指定的范围内</td></tr><tr><td>@Digits(Integer,fraction)</td><td>被注释的元素必须是一个数字,其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td>被注释的元素必须是一个未来的日期</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><p>Hibernate Validator是JSR 303的一个参考实现，除支持所有标准的注解校验外还支持以下的扩展注解</p><table><thead><tr><th>注解</th><th>功能说明</th></tr></thead><tbody><tr><td>@Email</td><td>被注解的元素必须是电子邮箱</td></tr><tr><td>@Length</td><td>被注解的字符串大小必须在指定范围</td></tr><tr><td>@NotEmpty</td><td>被注解的元素必须非空</td></tr><tr><td>@Range</td><td>被注解的元素必须在指定范围</td></tr></tbody></table><h2 id="具体实现校验"><a href="#具体实现校验" class="headerlink" title="具体实现校验"></a>具体实现校验</h2><ul><li><p>Spring在进行数据绑定的时候，可以同时调用数据框架完成校验工作。==在SpringMvc中可以直接通过注解驱动的方式进行数据校验==</p></li><li><p>Spring的LocalVaildatorFactoryBean既实现了Spring的Vaildator接口，也实现了JSR 303的Vaildator接口，这要在Spring容器中定义==LocalVaildatorFactoryBean==，即可将其注入到所需要校验数据的bean中</p></li><li><p>Spring本身没有提供JSR 303的实现，所以必须将JSR 303的实现jar导入工程文件中</p></li><li><p>&lt;mvc:annocation-driven /&gt;会默认装配一个LocalVaildatorFactoryBean，通过处理方法入参上标注@Vaild注解即可让springMvc在完成入参绑定hou执行数据校验操作</p><ol><li>使用JSR 303 校验标准</li><li>加入hibernate validator验证框架</li><li>配置&lt;mvc:annocation-driven /&gt;</li><li>在bean属性上加上对应的校验注解</li><li>在目标方法bean类型的前面添加@Vaild注解</li></ol></li><li><p>如何将校验出错的结果返回到页面?</p></li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> * 代表所有出错信息</span><br><span class="line"><span class="bullet">* </span>可以使用bean属性名指定具体属性的校验出错信息</span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong">&lt;form:errors path="*</span>" /&gt;</span><br></pre></td></tr></table></figure><h2 id="提示消息的国际"><a href="#提示消息的国际" class="headerlink" title="提示消息的国际"></a>提示消息的国际</h2><ul><li>每个属性在数据绑定和数据校验出错时，会生成一个对应的FieldError对象</li></ul><ul><li>当一个属性校验失败后，校验框架会为每一个属性生成4个消息代码，这些代码==以校验注解类名为前缀==、结合modelAttribute、属性名、属性类型名生成多个消息代码。<ul><li>例如：User类中的password属性标注一个@Pattern注解，当校验出错时会产生以下4个代码</li><li>Pattern.user.password</li><li>Pattern.password</li><li>Pattern.java.lang.String</li><li>Pattern</li></ul></li><li>当SpringMvc标签显示错误消息时，SpringMvc会查看WEB上下文是否装配对应的国际消息，如果没有则显示默认消息</li></ul><h2 id="国际化资源文件的实现"><a href="#国际化资源文件的实现" class="headerlink" title="国际化资源文件的实现"></a>国际化资源文件的实现</h2><ul><li>在SpringMvc里配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 国际化资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在src下建立国际化资源文件</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名：i18n.properties</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NotNull</span>.</span></span>employee.lastName=lastName不能为空</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Email</span>.</span></span>employee.email=email必须为一个合法的邮箱地址</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Past</span>.</span></span>employee.birth=出生日期必须为过去日期</span><br></pre></td></tr></table></figure><p>这里以下面的pojo为例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> lastName;</span><br><span class="line"><span class="meta">@Email</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> email;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> gener;</span><br><span class="line"><span class="keyword">private</span> Department department;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Past</span></span><br><span class="line"><span class="meta">@DateTimeFormat</span>(iso=ISO.DATE)</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">Date</span> birth;</span><br></pre></td></tr></table></figure><h1 id="十九-、国际化问题"><a href="#十九-、国际化问题" class="headerlink" title="十九 、国际化问题"></a>十九 、国际化问题</h1><ul><li>问题：在页面上能根据浏览器语言设置的情况对文本 时间 数值进行本地化处理</li></ul><p>解决:使用fmt标签</p><ul><li>问题：可以在bean中获取国际化资源文件Local的对应消息</li></ul><p>解决:在bean中注入ResourceBundleMessageSource ,使用对应的getMessage方法</p><ul><li>问题：通过超链接切换Local，而不依赖资源文件</li></ul><p>解决： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在超链接加上local参数，比如:</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"aa?local=ch_ZH"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">添加配置文件</span><br><span class="line"><span class="comment">&lt;!-- 配置SessionLocaleResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionLocaleResolver"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.SessionLocaleResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 LocaleChangeInterceptor--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;SpringMvc学习笔记的整理 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMvc" scheme="http://liuyoubin.top/tags/SpringMvc/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="http://liuyoubin.top/2020/01/23/backEnd/framework/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuyoubin.top/2020/01/23/backEnd/framework/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-23T08:28:22.000Z</published>
    <updated>2020-01-25T13:20:52.407Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>Spring学习笔记的整理 </p>          </div><a id="more"></a><h1 id="一、-Spring主要内容"><a href="#一、-Spring主要内容" class="headerlink" title="一、 Spring主要内容"></a>一、 Spring主要内容</h1><p><img src="https://s2.ax1x.com/2020/01/23/1Vkd81.png" alt="image"></p><h1 id="二-、IOC"><a href="#二-、IOC" class="headerlink" title="二 、IOC"></a>二 、IOC</h1><ul><li><p>inversion of control 控制反转</p><ul><li><p>对象由原来本身去创建，变成程序去接收对象</p></li><li><p>主要精力放在业务的实现</p></li><li><p>实现了service和dao的解耦</p></li></ul></li></ul><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>1.导入jar包到lib</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">commons-logging-<span class="number">1.2</span>.jar /<span class="regexp">/这个jar包在struts2中</span></span><br><span class="line"><span class="regexp">spring-aop-4.3.9.RELEASE.jar</span></span><br><span class="line"><span class="regexp">spring-aspects-4.3.9.RELEASE.jar</span></span><br><span class="line"><span class="regexp">lib/spring</span>-beans-<span class="number">4.3</span>.<span class="number">9</span>.RELEASE.jar</span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">context</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">context</span>-<span class="title">support</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">core</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">expression</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">jdbc</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">orm</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">tx</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">web</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">spring</span>-<span class="title">webmvc</span>-4.3.9.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br></pre></td></tr></table></figure><p>2.编写spring配置文件(名称可以自定义)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- bean就是java对象 ，由spring容器进行创建和管理 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.Hello"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.bean类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//解析beans.xml文件，生成管理相应的bean对象</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">Hello hello = (Hello) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(hello);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.总结</p><ul><li><p>对象由spring创建，对象的属性由spring设置，这个过程就叫控制反转+</p></li><li><p>控制的内容：指谁来控制对象的创建，传统的应用程序对象由程序本身来创建，现在控制对象创建的权限交给spring。</p></li><li><p>反转:指原来程序本身创建对象，变为被动的接收对象</p></li></ul><p>控制的内容：指谁来控制对象的创建，传统的应用程序对象由程序本身来创建，现在控制对象创建的权限交给spring。</p><p>反转:指原来程序本身创建对象，变为被动的接收对象</p><ul><li>控制反转也叫依赖注入(denpendcy in inject)</li></ul><h3 id="1-通过无参构造方法创建"><a href="#1-通过无参构造方法创建" class="headerlink" title="1.通过无参构造方法创建"></a>1.通过无参构造方法创建</h3><p>java类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">name</span>=<span class="string">"hello"</span> <span class="built_in">class</span>=<span class="string">"cn.lyb.bean.Hello"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"name"</span> value=<span class="string">"张三"</span>/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="2-通过带参构造方法创建"><a href="#2-通过带参构造方法创建" class="headerlink" title="2.通过带参构造方法创建"></a>2.通过带参构造方法创建</h3><p>java类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class<span class="built_in"> User </span>&#123;</span><br><span class="line">private int id;</span><br><span class="line"></span><br><span class="line">public User(int id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-根据参数的下标来设置"><a href="#2-1-根据参数的下标来设置" class="headerlink" title="2.1 根据参数的下标来设置"></a>2.1 根据参数的下标来设置</h4><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--index是构造方法的参数下标从零开始  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-根据参数的名字来设置"><a href="#2-2-根据参数的名字来设置" class="headerlink" title="2.2 根据参数的名字来设置"></a>2.2 根据参数的名字来设置</h4><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-根据参数的类型来设置"><a href="#2-3-根据参数的类型来设置" class="headerlink" title="2.3 根据参数的类型来设置"></a>2.3 根据参数的类型来设置</h4><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-通过工厂创建"><a href="#3-通过工厂创建" class="headerlink" title="3.通过工厂创建"></a>3.通过工厂创建</h3><h4 id="3-1静态工厂"><a href="#3-1静态工厂" class="headerlink" title="3.1静态工厂"></a>3.1静态工厂</h4><p>静态工厂类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Userfactory &#123;</span><br><span class="line">public static<span class="built_in"> User </span>getUserInstance(int id) &#123;</span><br><span class="line">return new User(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--class对应工厂类 factory-method是工厂静态方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.factory.Userfactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserInstance"</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"15"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-1动态工厂"><a href="#3-1动态工厂" class="headerlink" title="3.1动态工厂"></a>3.1动态工厂</h4><p>动态工厂类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class UserDynamicFactory &#123;</span><br><span class="line">public<span class="built_in"> User </span>getUserInstance(int id) &#123;</span><br><span class="line">return new User(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态工厂的bean--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userFactory"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.factory.UserDynamicFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--factory-bean引用动态工厂--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">factory-bean</span>=<span class="string">"userFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserInstance"</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三-、配置文件参数"><a href="#三-、配置文件参数" class="headerlink" title="三 、配置文件参数"></a>三 、配置文件参数</h1><ul><li>alias 为bean设置别名，可以设置多个别名</li></ul><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">alias</span> <span class="title">name</span>=<span class="string">""</span> <span class="keyword">alias</span>=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>bean的配置</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>是bean的标识符 要唯一。 如果没有配置<span class="built_in">id</span>则<span class="built_in">name</span>默认为标识符；</span><br><span class="line">如果配置了<span class="built_in">id</span>，则<span class="built_in">name</span>为别名可以配置多个，分隔符可以位为 逗号 分号 空格</span><br><span class="line"></span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"h1"</span> <span class="built_in">name</span>=<span class="string">"h2 h3,h4;h5"</span> &gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>团队协作通过import实现</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;import <span class="attribute">resource</span>=<span class="string">"cn/config/a.xml"</span>/&gt;</span><br></pre></td></tr></table></figure><h1 id="四、依赖注入"><a href="#四、依赖注入" class="headerlink" title="四、依赖注入"></a>四、依赖注入</h1><ul><li><p>依赖：bean对象的创建依赖容器    bean对象依赖资源</p></li><li><p>注入：bean对象所依赖的资源由容器设置和装配</p></li></ul><h2 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1.构造器注入"></a>1.构造器注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--index是构造方法的参数下标从零开始  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.bean.User"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name是构造方法参数名称  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-setter注入"><a href="#2-setter注入" class="headerlink" title="2.setter注入"></a>2.setter注入</h2><blockquote><p>要求被注入的属性必须有set方法。set方法名为set+属性名(首字母大写)</p><p>如果属性为boolean类型则没有get方法 为is方法</p></blockquote><ul><li>常量注入<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">""</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li>bean注入<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"a"</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">""</span> <span class="keyword">ref</span>=<span class="string">"a"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li>数组注入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>List注入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Map注入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span>  <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span>//注意这里的写法</span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Set注入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            ·············</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>null注入<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">""</span>&gt;&lt;null/&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li>properties注入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                ·····························</span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>p命名空间注入</li></ul><p>配置文件的头文件需要添加下面路径</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span> p:属性<span class="number">1</span>=<span class="string">""</span> p:属性<span class="number">2</span>=<span class="string">""</span> ......&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>c命名空间注入</li></ul><ol><li>配置文件的头文件需要添加下面路径</li><li>bean类需要对应的构造方法<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:<span class="keyword">c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span><br><span class="line">&lt;bean id=<span class="string">""</span> class=<span class="string">""</span> <span class="keyword">c</span>:属性<span class="number">1</span>=<span class="string">""</span> <span class="keyword">c</span>:属性<span class="number">2</span>=<span class="string">""</span> ......&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="五、bean的作用域以及自动装配"><a href="#五、bean的作用域以及自动装配" class="headerlink" title="五、bean的作用域以及自动装配"></a>五、bean的作用域以及自动装配</h1><h2 id="bean的作用域类型"><a href="#bean的作用域类型" class="headerlink" title="bean的作用域类型"></a>bean的作用域类型</h2><ul><li><code>singleton</code> 单例，整个容器只有一个对象实例</li><li><code>prototype</code> 原型，每次获取bean都产生一个新对象</li><li><code>request</code>   每次请求创建一个新对象</li><li><code>session</code>   会话范围内时一个对象</li><li><code>global session</code>    只在portlet下有用，表示applicable<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*例子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;bean id=<span class="string">""</span> <span class="keyword">class</span>=<span class="string">""</span> scope=<span class="string">"singleton"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h2><p>autowire自动装配，简化spring配置</p><p>注意：可以在头文件里设置 default-autowire来全局设置</p><ul><li>byName： 根据名称(set方法名称)去查找相应的bean，如果有则装配</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*类里面的<span class="keyword">set</span>方法为setUser 则会自动装配<span class="built_in">id</span>=<span class="string">"user"</span>的bean</span><br><span class="line">*/</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"user"</span> <span class="built_in">class</span>=<span class="string">""</span>&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">""</span> <span class="built_in">class</span>=<span class="string">""</span> autowire=<span class="string">"byName"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>byType：根据类型去查找相应的bean，如果有则装配 慎用</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*类里面的属性为cn.user 则会自动装配bean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;bean <span class="keyword">class</span>=<span class="string">"cn.user"</span>&gt;</span><br><span class="line">&lt;bean id=<span class="string">""</span> <span class="keyword">class</span>=<span class="string">""</span> autowire=<span class="string">"byType"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>constructor：当使用构造器注入实例化bean时，使用此方法装配构造方法</li></ul><h1 id="六-、AOP"><a href="#六-、AOP" class="headerlink" title="六 、AOP"></a>六 、AOP</h1><p>Aop (aspect oriented programming)面向切面编程</p><p>Aop在spring中的作用</p><ul><li>提供声明式服务(声明式事务)</li><li>允许用户自定义切面</li></ul><p>Aop就是横向编程模式（代理）</p><p>Aop的好处</p><ul><li>使得真实角色处理的业务更加存粹，不再关注一些公共的业务</li><li>公共的业务由代理来完成—实现业务的分工</li><li>公共业务扩展时更加方便与集中<h2 id="使用Spring实现Aop"><a href="#使用Spring实现Aop" class="headerlink" title="使用Spring实现Aop"></a>使用Spring实现Aop</h2></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.更改配置文件的命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.导入aop所需要的另外两个jar包</p><ul><li>aopalliance.jar</li><li>aspectjweaver.jar</li></ul><h3 id="案例（使用Spring-Api实现）"><a href="#案例（使用Spring-Api实现）" class="headerlink" title="案例（使用Spring Api实现）"></a>案例（使用Spring Api实现）</h3><ol><li>要实现切入的公共业务类需要继承接口</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> <span class="keyword">Log</span> implements MethodBeforeAdvice&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>(<span class="keyword">Method</span> arg0, <span class="keyword">Object</span>[] arg1, <span class="keyword">Object</span> arg2) throws Throwable &#123;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("日志处理信息");</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>目标类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"添加用户"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"查询用户"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 .配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.service.UserServiceImp"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"log"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.log.Log"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 切入点 --&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* cn.lyb.service.UserServiceImp.add())"</span> id=<span class="string">"poi"</span>/&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"log"</span> pointcut-ref=<span class="string">"poi"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/aop:config&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例（使用自定义类实现）"><a href="#案例（使用自定义类实现）" class="headerlink" title="案例（使用自定义类实现）"></a>案例（使用自定义类实现）</h3><ol><li>切入类(自定义，不需要实现接口)</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log2</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"自定义方法执行切入"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.service.UserServiceImp"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"log2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.log.Log2"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:aspect ref=<span class="string">"log2"</span>&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* cn.lyb.service.UserServiceImp.delete())"</span> id=<span class="string">"poi2"</span>/&gt;</span><br><span class="line">&lt;aop:before method=<span class="string">"before"</span> pointcut-ref=<span class="string">"poi2"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/aop:aspect&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>aop:config&gt;</span><br></pre></td></tr></table></figure><h3 id="使用注解实现"><a href="#使用注解实现" class="headerlink" title="使用注解实现"></a>使用注解实现</h3><p>在配置文件加上</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-<span class="built_in">auto</span>proxy /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log2</span> </span>&#123;</span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* cn.lyb.service.UserServiceImp.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自定义方法执行切入"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>在切入点表达式中我们可以利用【*】去进行模糊匹配。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.wf.springaopImpl.ArithmeticCalculatorImpl.*(..))</span><br><span class="line"><span class="comment">//第一个 * 代表任意修饰符及任意返回值. 第二个 * 代表任意方法. .. 匹配任意数量的参数. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若目标类与接口与该切面在同一个包中, 可以省略包名.</span></span><br><span class="line">execution（<span class="keyword">public</span> * ArithmeticCalculator.*(..))</span><br><span class="line"><span class="comment">// 匹配 ArithmeticCalculator 接口的所有公有方法.</span></span><br><span class="line"></span><br><span class="line">execution (<span class="keyword">public</span> <span class="keyword">double</span> ArithmeticCalculator.*(..))</span><br><span class="line"><span class="comment">//匹配 ArithmeticCalculator 中返回 double 类型数值的方法</span></span><br><span class="line"></span><br><span class="line">execution (<span class="keyword">public</span> <span class="keyword">double</span> ArithmeticCalculator.*(<span class="keyword">double</span>, ..))</span><br><span class="line"><span class="comment">// 匹配第一个参数为 double 类型的方法, .. 匹配任意数量任意类型的参数</span></span><br></pre></td></tr></table></figure><h1 id="七、Spring整合Mybatis"><a href="#七、Spring整合Mybatis" class="headerlink" title="七、Spring整合Mybatis"></a>七、Spring整合Mybatis</h1><h2 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h2><p>第一步.导入相关jar包</p><ul><li>spring的jar包（包括commons-logging.jar、aopalliance.jar和aspectjweaver.jar）</li><li>mybatis的jar包</li><li>jdbc的jar包</li><li>mybatis_spring.jar</li></ul><p>第二步.配置文件(将sqlSessionFactory、sqlSession交给Ioc管理)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionTemplate --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过构造器注入将sqlSessionFactory注入 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.Imp.UserDaoImp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybati文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.vo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义映射语句的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/dao/Imp/user.mapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lyb.user.Mapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">select * from user2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过spring注入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sqlSession.selectList(<span class="string">"cn.lyb.user.Mapper.getAll"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h2><ul><li>与第一种整合方式的区别是：dao层直接继承SqlSessionDaoSupport类(通过提供getSession方法获取sqlsession对象),不需要配置/注入SqlSessionTemplate对象</li></ul><p>dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*继承SqlSessionDaoSupport</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> getSession().selectList(<span class="string">"cn.lyb.user.Mapper.getAll"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http ://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  /***</span><br><span class="line">    不需要注入SqlSessionTemplate</span><br><span class="line">    直接注入sqlSessionFactory</span><br><span class="line">  **/</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.Imp.UserDaoImp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三种方案"><a href="#第三种方案" class="headerlink" title="第三种方案"></a>第三种方案</h2><ul><li>mybatis使用注解实现</li></ul><p>mapper接口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>userMapper()&#123;</span><br><span class="line">    @select(<span class="string">"select * from user"</span>)</span><br><span class="line">    public List&lt;User&gt; getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">userService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//mapper的set方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt;  getList()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mapper.<span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">  *配置mapper对象</span><br><span class="line">  */</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapperFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"mapper接口的全限定名"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  //将userMapper注入service层的mapper对象</span><br></pre></td></tr></table></figure><p>mybatis配置文件 修改mappers</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.vo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"mapper接口全限定名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第四种方案"><a href="#第四种方案" class="headerlink" title="第四种方案"></a>第四种方案</h2><blockquote><p>不用mybatis配置文件</p><p>mapper.xml直接在spring中配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"cn/lyb/vo/*.mapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="八、声明式事务"><a href="#八、声明式事务" class="headerlink" title="八、声明式事务"></a>八、声明式事务</h1><p>添加头文件信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:<span class="attribute">tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">  xsi:<span class="attribute">schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">                      http://www.springframework.org/schema/tx/spring-tx.xsd"</span></span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置哪些方法使用什么样的事务，以及事务的传播特性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--通过aop将事务通知切入方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lyb.dao.Imp.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="九-、整合struts2、mybatis"><a href="#九-、整合struts2、mybatis" class="headerlink" title="九 、整合struts2、mybatis"></a>九 、整合struts2、mybatis</h1><h2 id="使用注解整合开发"><a href="#使用注解整合开发" class="headerlink" title="使用注解整合开发"></a>使用注解整合开发</h2><p>1.spring配置文件添加context命名空间</p><p>2.添加自动扫描标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置哪些方法使用什么样的事务，以及事务的传播特性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lyb.dao.Imp.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- 自动扫描所配置包下的所有注解 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lyb"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dao</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*如果不手动写userDao，id将默认为类名（UserDaoImpl）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="title">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void setSqlSessionFactory(<span class="type">SqlSessionFactory</span> sqlSessionFactory) &#123;</span><br><span class="line"><span class="keyword">super</span>.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="type">List</span>&lt;<span class="type">User</span>&gt; getAllUser() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> getSqlSession().selectList(<span class="string">"cn.lyb.vo.user.mapper.getAll"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">（注意：如上配置相当于在spring配置文件中配）</span><br><span class="line"> &lt;bean id=<span class="string">"userDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.lyb.dao.impl.UserDaoImpl"</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">"sqlSessionFactory"</span> ref=<span class="string">"sqlSessionFactory"</span>/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*如果不手动写userService，id将默认为类名（UserServiceImpl）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//自动装配不写id将默认id为属性名的bean装配</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userDao.getAllUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@Scope(<span class="string">"portotype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; <span class="built_in">list</span> = null;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;User&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserService <span class="title">getUserService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">list</span> = userService.getAllUser();</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合struts2和mybat"><a href="#整合struts2和mybat" class="headerlink" title="整合struts2和mybat"></a>整合struts2和mybat</h2><p>1.导入jar包</p><p>2.配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>spring_struts2_mybatis<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置struts2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/s_01?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"lyb980328"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAd"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置哪些方法使用什么样的事务，以及事务的传播特性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lyb.dao.Imp.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"cn.lyb.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.struts2的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"userAction"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.mybatis配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lyb.vo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义映射语句的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lyb/vo/user.mapper.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;Spring学习笔记的整理 &lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="后端" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="框架" scheme="http://liuyoubin.top/categories/%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="http://liuyoubin.top/tags/Spring/"/>
    
  </entry>
  
</feed>
